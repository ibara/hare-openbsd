// License: MPL-2.0
// (c) 2021 Bor Grošelj Simić <bor.groseljsimic@telemach.net>

type testcase = (str, str, bool, []flags);

const testcases: [_]testcase = [
	// homegrown tests
	("a", "a", true, []),
	("b", "b", true, []),
	("ε", "ε", true, []),
	("\0", "\0", true, []),
	("abcde", "abcde", true, []),
	("aaa", "bbb", false, []),
	("わたし", "わたし", true, []),
	("わした", "わたし", false, []),
	("わaし", "わたし", false, []),

	("ab*cde", "abcde", true, []),
	("g*a", "gordana", true, []),
	("ab*cde*foo*bar", "abcdefooba", false, []),
	("*", "foo", true, []),
	("aa*", "aafoo", true, []),
	("bb*", "foo", false, []),
	("*cc", "foocc", true, []),
	("*dd", "foo", false, []),
	("ra**ra", "rarara", true, []),
	("x*yy*x", "xxyyyyyxxx", true, []),
	("*", "*", true, []),
	("*", "", true, []),
	("****", "a", true, []),
	("**a**", "a", true, []),
	("****", "", true, []),
	("*", "わたし", true, []),

	("?", "ε", true, []),
	("?", "\0", true, []),
	("?", "*", true, []),
	("?", "", false, []),
	("??", "a", false, []),
	("??", "abc", false, []),
	("?aa", "bbb", false, []),
	("わ?し", "わたし", true, []),
	("???", "わたし", true, []),

	("**?**", "", false, []),
	("*?*?*?*?", "abcd", true, []),
	("*?*?*?*?", "abc", false, []),

	("[b]", "b", true, []),
	("a[b]c", "abc", true, []),
	("a[b]c", "axc", false, []),
	("[a-c]", "b", true, []),
	("[a-z]", "a", true, []),
	("[c-a]", "b", false, []),
	("x[a-c]y", "xay", true, []),
	("x[a-c]y", "xby", true, []),
	("x[a-c]y", "xcy", true, []),
	("x[a-c]y", "xzy", false, []),
	("x[a-c]y", "xy", false, []),
	("[a-c]*[a-c]", "axxxb", true, []),
	("わ[た]し", "わたし", true, []),

	("[-]", "-", true, []),
	("[.]", ".", true, []),
	("[:ias]", ":", true, []),
	("[-]", "a", false, []),
	("[-ac]", "a", true, []),
	("[-ac]", "-", true, []),
	("[-ac]", "b", false, []),
	("[ac-]", "a", true, []),
	("[ac-]", "-", true, []),
	("[ac-]", "b", false, []),

	("[.a.]", "a", false, []),

	("[[:alnum:]]", "7", true, []),
	("[[:alpha:]]", "[", false, []),
	("[[:alpha:]]", "[[", false, []),
	("[[alpha:]]", "a]", true, []),
	("[[alpha:]]", ":]", true, []),
	("[[:alpha:]]", "a", true, []),
	("[[:blank:]]", " ", true, []),
	("[[:alnum:]]a", "a]a", false, []),
	("[[:alnum:][[:digit:]]", "a", true, []),

	("[!b]", "b", false, []),
	("a[!b]c", "abc", false, []),
	("a[!b]c", "axc", true, []),
	("[!a-c]", "b", false, []),
	("[!c-a]", "b", true, []),
	("x[!a-c]y", "xay", false, []),
	("x[!a-c]y", "xby", false, []),
	("x[!a-c]y", "xcy", false, []),
	("x[!a-c]y", "xzy", true, []),
	("x[!a-c]y", "xy", false, []),
	("[!a-c]*[!a-c]", "axxxb", false, []),
	("わ[!た]し", "わたし", false, []),

	("[!-]", "-", false, []),
	("[!-]", "a", true, []),
	("[!-ac]", "a", false, []),
	("[!-ac]", "-", false, []),
	("[!-ac]", "b", true, []),

	("[![:alnum:]]", "a", false, []),
	("[![:alpha:]]", "[", true, []),
	("[![:alnum:]]a", "a]a", false, []),
	("[![:alpha:]]a", "[a", true, []),
	("[![:alnum:][:digit:]]", "a", false, []),

	(".", ".", true, [flags::PERIOD]),
	("*", ".", false, [flags::PERIOD]),
	("?", ".", false, [flags::PERIOD]),
	("[.]", ".", false, [flags::PERIOD]),
	(".*", ".asdf", true, [flags::PERIOD]),
	(".*", "asdf", false, [flags::PERIOD]),

	("\\", "\\", true, [flags::NOESCAPE]),
	("\\*", "\\asdf", true, [flags::NOESCAPE]),

	// adapted from musl tests
	("*.c", "foo.c", true, []),
	("*.c", ".c", true, []),
	("*.a", "foo.c", false, []),
	("*.c", ".foo.c", true, []),
	("a\\*.c", "ax.c", false, []),
	("a[xy].c", "ax.c", true, []),
	("a[!y].c", "ax.c", true, []),
	("-O[01]", "-O1", true, []),
	("[[?*\\]", "\\", true, []),
	("[]?*\\]", "]", true, []),
	("[!]a-]", "b", true, []),
	("[]-_]", "^", true, []),
	("[!]-_]", "X", true, []),
	("??", "-", false, []),
	("[*]/b", "a/b", false, []),
	("[*]/b", "*/b", true, []),
	("[?]/b", "a/b", false, []),
	("[?]/b", "?/b", true, []),
	("[[a]/b", "a/b", true, []),
	("[[a]/b", "[/b", true, []),
	("\\*/b", "a/b", false, []),
	("\\*/b", "*/b", true, []),
	("\\?/b", "a/b", false, []),
	("\\?/b", "?/b", true, []),
	("[/b", "[/b", false, []),
	("\\[/b", "[/b", true, []),
	("??""/b", "aa/b", true, []),
	("???b", "aa/b", true, []),
	("a[/]b", "a/b", true, []),
	("*[/]b", "a", false, []),
	("[![:d-d]", "b", false, []),
	("[[:d-d]", "[", false, []),
	("[![:d-d]", "[", false, []),
	("[a-z]/[a-z]", "a/b", true, [flags::PATHNAME]),
	("a[/]b", "a/b", false, [flags::PATHNAME]),
	("*", "a/b", false, [flags::PATHNAME]),
	("*[/]b", "a/b", false, [flags::PATHNAME]),
	("*[b]", "a/b", false, [flags::PATHNAME]),
	("a[a/z]*.c", "a/x.c", false, [flags::PATHNAME]),
	("a/*.c", "a/x.c", true, [flags::PATHNAME]),
	("a*.c", "a/x.c", false, [flags::PATHNAME]),
	("*/foo", "/foo", true, [flags::PATHNAME]),
	("*.c", ".foo.c", false, [flags::PERIOD]),
	("*.c", "foo.c", true, [flags::PERIOD]),
	("a\\*.c", "a*.c", false, [flags::NOESCAPE]),
	("???b", "aa/b", false, [flags::PATHNAME]),
	("?a/b", ".a/b", false, [flags::PATHNAME, flags::PERIOD]),
	("a/?b", "a/.b", false, [flags::PATHNAME, flags::PERIOD]),
	("*a/b", ".a/b", false, [flags::PATHNAME, flags::PERIOD]),
	("a/*b", "a/.b", false, [flags::PATHNAME, flags::PERIOD]),
	("[.]a/b", ".a/b", false, [flags::PATHNAME, flags::PERIOD]),
	("a/[.]b", "a/.b", false, [flags::PATHNAME, flags::PERIOD]),
	("*/?", "a/b", true, [flags::PATHNAME, flags::PERIOD]),
	("?/*", "a/b", true, [flags::PATHNAME, flags::PERIOD]),
	(".*/?", ".a/b", true, [flags::PATHNAME, flags::PERIOD]),
	("*/.?", "a/.b", true, [flags::PATHNAME, flags::PERIOD]),
	("*/*", "a/.b", false, [flags::PATHNAME, flags::PERIOD]),
	("*?*/*", "a/.b", true, [flags::PERIOD]),
	("*[.]/b", "a./b", true, [flags::PATHNAME, flags::PERIOD]),
	("*[[:alpha:]]/*[[:alnum:]]", "a/b", true, [flags::PATHNAME]),
	("a?b", "a.b", true, [flags::PATHNAME, flags::PERIOD]),
	("a*b", "a.b", true, [flags::PATHNAME, flags::PERIOD]),
	("a[.]b", "a.b", true, [flags::PATHNAME, flags::PERIOD]),
];

@test fn fnmatch() void = {
	for (let i = 0z; i < len(testcases); i += 1) {
		let tc = testcases[i];
		assert(fnmatch(tc.0, tc.1, tc.3...) == tc.2);
	};

};
