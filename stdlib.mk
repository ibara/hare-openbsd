# This file is generated by the gen-stdlib script, do not edit it by hand

rtscript = $(STDLIB)/rt/hare.sc
# rt (+linux)
stdlib_rt_linux_srcs = \
	$(STDLIB)/rt/+linux/abort.ha \
	$(STDLIB)/rt/+linux/env.ha \
	$(STDLIB)/rt/+linux/errno.ha \
	$(STDLIB)/rt/+linux/types.ha \
	$(STDLIB)/rt/+linux/segmalloc.ha \
	$(STDLIB)/rt/+linux/platformstart.ha \
	$(STDLIB)/rt/+linux/prctl.ha \
	$(STDLIB)/rt/+linux/+$(ARCH).ha \
	$(STDLIB)/rt/+linux/syscallno+$(ARCH).ha \
	$(STDLIB)/rt/+linux/syscalls.ha \
	$(STDLIB)/rt/+linux/signal.ha \
	$(STDLIB)/rt/+linux/stat.ha \
	$(STDLIB)/rt/+linux/socket.ha \
	$(STDLIB)/rt/+$(ARCH)/jmp.ha \
	$(STDLIB)/rt/+$(ARCH)/backtrace.ha \
	$(STDLIB)/rt/fenv_defs.ha \
	$(STDLIB)/rt/+$(ARCH)/cpuid.ha \
	$(STDLIB)/rt/ensure.ha \
	$(STDLIB)/rt/jmp.ha \
	$(STDLIB)/rt/malloc.ha \
	$(STDLIB)/rt/memcpy.ha \
	$(STDLIB)/rt/memmove.ha \
	$(STDLIB)/rt/memset.ha \
	$(STDLIB)/rt/strcmp.ha \
	$(STDLIB)/rt/abort.ha \
	$(STDLIB)/rt/start.ha

# rt (+freebsd)
stdlib_rt_freebsd_srcs = \
	$(STDLIB)/rt/+freebsd/abort.ha \
	$(STDLIB)/rt/+freebsd/env.ha \
	$(STDLIB)/rt/+freebsd/errno.ha \
	$(STDLIB)/rt/+freebsd/platformstart.ha \
	$(STDLIB)/rt/+freebsd/segmalloc.ha \
	$(STDLIB)/rt/+freebsd/signal.ha \
	$(STDLIB)/rt/+freebsd/socket.ha \
	$(STDLIB)/rt/+freebsd/syscallno.ha \
	$(STDLIB)/rt/+freebsd/syscalls.ha \
	$(STDLIB)/rt/+freebsd/types.ha \
	$(STDLIB)/rt/+$(ARCH)/jmp.ha \
	$(STDLIB)/rt/+$(ARCH)/backtrace.ha \
	$(STDLIB)/rt/fenv_defs.ha \
	$(STDLIB)/rt/+$(ARCH)/cpuid.ha \
	$(STDLIB)/rt/ensure.ha \
	$(STDLIB)/rt/jmp.ha \
	$(STDLIB)/rt/malloc.ha \
	$(STDLIB)/rt/memcpy.ha \
	$(STDLIB)/rt/memmove.ha \
	$(STDLIB)/rt/memset.ha \
	$(STDLIB)/rt/strcmp.ha \
	$(STDLIB)/rt/abort.ha \
	$(STDLIB)/rt/start.ha

# rt (+openbsd)
stdlib_rt_openbsd_srcs = \
	$(STDLIB)/rt/+openbsd/abort.ha \
	$(STDLIB)/rt/+openbsd/env.ha \
	$(STDLIB)/rt/+openbsd/errno.ha \
	$(STDLIB)/rt/+openbsd/platformstart.ha \
	$(STDLIB)/rt/+openbsd/segmalloc.ha \
	$(STDLIB)/rt/+openbsd/signal.ha \
	$(STDLIB)/rt/+openbsd/socket.ha \
	$(STDLIB)/rt/+openbsd/syscallno.ha \
	$(STDLIB)/rt/+openbsd/syscalls.ha \
	$(STDLIB)/rt/+openbsd/types.ha \
	$(STDLIB)/rt/+$(ARCH)/jmp.ha \
	$(STDLIB)/rt/+$(ARCH)/backtrace.ha \
	$(STDLIB)/rt/fenv_defs.ha \
	$(STDLIB)/rt/+$(ARCH)/cpuid.ha \
	$(STDLIB)/rt/ensure.ha \
	$(STDLIB)/rt/jmp.ha \
	$(STDLIB)/rt/malloc.ha \
	$(STDLIB)/rt/memcpy.ha \
	$(STDLIB)/rt/memmove.ha \
	$(STDLIB)/rt/memset.ha \
	$(STDLIB)/rt/strcmp.ha \
	$(STDLIB)/rt/abort.ha \
	$(STDLIB)/rt/start.ha

$(HARECACHE)/rt/rt-linux.ssa: $(stdlib_rt_linux_srcs) $(stdlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/rt
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nrt \
		-t$(HARECACHE)/rt/rt.td $(stdlib_rt_linux_srcs)

$(HARECACHE)/rt/rt-freebsd.ssa: $(stdlib_rt_freebsd_srcs) $(stdlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/rt
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nrt \
		-t$(HARECACHE)/rt/rt.td $(stdlib_rt_freebsd_srcs)

$(HARECACHE)/rt/rt-openbsd.ssa: $(stdlib_rt_openbsd_srcs) $(stdlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/rt
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nrt \
		-t$(HARECACHE)/rt/rt.td $(stdlib_rt_openbsd_srcs)

$(HARECACHE)/rt/start.o: $(STDLIB)/rt/+$(PLATFORM)/start+$(ARCH)-libc.s
	@printf 'AS \t$@\n'
	@mkdir -p $(HARECACHE)/rt
	@$(AS) -o $@ $(STDLIB)/rt/+$(PLATFORM)/start+$(ARCH)-libc.s

stdlib_asm = $(HARECACHE)/rt/syscall.o \
	$(HARECACHE)/rt/setjmp.o \
	$(HARECACHE)/rt/longjmp.o \
	$(HARECACHE)/rt/restore.o \
	$(HARECACHE)/rt/getfp.o \
	$(HARECACHE)/rt/fenv.o \
	$(HARECACHE)/rt/start.o \
	$(HARECACHE)/rt/cpuid_native.o

$(HARECACHE)/rt/syscall.o: $(STDLIB)/rt/+$(PLATFORM)/syscall+$(ARCH).s
	@printf 'AS \t$@\n'
	@mkdir -p $(HARECACHE)/rt
	@$(AS) -o $@ $(STDLIB)/rt/+$(PLATFORM)/syscall+$(ARCH).s

$(HARECACHE)/rt/setjmp.o: $(STDLIB)/rt/+$(ARCH)/setjmp.s
	@printf 'AS \t$@\n'
	@mkdir -p $(HARECACHE)/rt
	@$(AS) -o $@ $(STDLIB)/rt/+$(ARCH)/setjmp.s

$(HARECACHE)/rt/longjmp.o: $(STDLIB)/rt/+$(ARCH)/longjmp.s
	@printf 'AS \t$@\n'
	@mkdir -p $(HARECACHE)/rt
	@$(AS) -o $@ $(STDLIB)/rt/+$(ARCH)/longjmp.s

$(HARECACHE)/rt/restore.o: $(STDLIB)/rt/+$(ARCH)/restore.s
	@printf 'AS \t$@\n'
	@mkdir -p $(HARECACHE)/rt
	@$(AS) -o $@ $(STDLIB)/rt/+$(ARCH)/restore.s

$(HARECACHE)/rt/fenv.o: $(STDLIB)/rt/+$(ARCH)/fenv.s
	@printf 'AS \t$@\n'
	@mkdir -p $(HARECACHE)/rt
	@$(AS) -o $@ $(STDLIB)/rt/+$(ARCH)/fenv.s

$(HARECACHE)/rt/getfp.o: $(STDLIB)/rt/+$(ARCH)/getfp.s
	@printf 'AS \t$@\n'
	@mkdir -p $(HARECACHE)/rt
	@$(AS) -o $@ $(STDLIB)/rt/+$(ARCH)/getfp.s

$(HARECACHE)/rt/cpuid_native.o: $(STDLIB)/rt/+$(ARCH)/cpuid_native.s
	@printf 'AS \t$@\n'
	@mkdir -p $(HARECACHE)/rt
	@$(AS) -o $@ $(STDLIB)/rt/+$(ARCH)/cpuid_native.s

$(HARECACHE)/rt/rt-linux.a: $(HARECACHE)/rt/rt-linux.o $(stdlib_asm)
	@printf 'AR\t$@\n'
	@$(AR) -csr $@ $(HARECACHE)/rt/rt-linux.o $(stdlib_asm)

$(HARECACHE)/rt/rt-freebsd.a: $(HARECACHE)/rt/rt-freebsd.o $(stdlib_asm)
	@printf 'AR\t$@\n'
	@$(AR) -csr $@ $(HARECACHE)/rt/rt-freebsd.o $(stdlib_asm)

$(HARECACHE)/rt/rt-openbsd.a: $(HARECACHE)/rt/rt-openbsd.o $(stdlib_asm)
	@printf 'AR\t$@\n'
	@$(AR) -csr $@ $(HARECACHE)/rt/rt-openbsd.o $(stdlib_asm)

stdlib_rt = $(HARECACHE)/rt/rt-$(PLATFORM).a
stdlib_deps_linux += $(stdlib_rt)
stdlib_deps_freebsd += $(stdlib_rt)
stdlib_deps_openbsd += $(stdlib_rt)
stdlib_deps_any += $(stdlib_rt)

# gen_lib ascii (any)
stdlib_ascii_any = $(HARECACHE)/ascii/ascii-any.o
stdlib_deps_any += $(stdlib_ascii_any)
stdlib_ascii_linux = $(stdlib_ascii_any)
stdlib_ascii_freebsd = $(stdlib_ascii_any)
stdlib_ascii_openbsd = $(stdlib_ascii_any)

# gen_lib bufio (any)
stdlib_bufio_any = $(HARECACHE)/bufio/bufio-any.o
stdlib_deps_any += $(stdlib_bufio_any)
stdlib_bufio_linux = $(stdlib_bufio_any)
stdlib_bufio_freebsd = $(stdlib_bufio_any)
stdlib_bufio_openbsd = $(stdlib_bufio_any)

# gen_lib bytes (any)
stdlib_bytes_any = $(HARECACHE)/bytes/bytes-any.o
stdlib_deps_any += $(stdlib_bytes_any)
stdlib_bytes_linux = $(stdlib_bytes_any)
stdlib_bytes_freebsd = $(stdlib_bytes_any)
stdlib_bytes_openbsd = $(stdlib_bytes_any)

# gen_lib crypto (any)
stdlib_crypto_any = $(HARECACHE)/crypto/crypto-any.o
stdlib_deps_any += $(stdlib_crypto_any)
stdlib_crypto_linux = $(stdlib_crypto_any)
stdlib_crypto_freebsd = $(stdlib_crypto_any)
stdlib_crypto_openbsd = $(stdlib_crypto_any)

# gen_lib crypto::aes (any)
stdlib_crypto_aes_any = $(HARECACHE)/crypto/aes/crypto_aes-any.o
stdlib_deps_any += $(stdlib_crypto_aes_any)
stdlib_crypto_aes_linux = $(stdlib_crypto_aes_any)
stdlib_crypto_aes_freebsd = $(stdlib_crypto_aes_any)
stdlib_crypto_aes_openbsd = $(stdlib_crypto_aes_any)

# gen_lib crypto::aes::xts (any)
stdlib_crypto_aes_xts_any = $(HARECACHE)/crypto/aes/xts/crypto_aes_xts-any.o
stdlib_deps_any += $(stdlib_crypto_aes_xts_any)
stdlib_crypto_aes_xts_linux = $(stdlib_crypto_aes_xts_any)
stdlib_crypto_aes_xts_freebsd = $(stdlib_crypto_aes_xts_any)
stdlib_crypto_aes_xts_openbsd = $(stdlib_crypto_aes_xts_any)

# gen_lib crypto::argon2 (any)
stdlib_crypto_argon2_any = $(HARECACHE)/crypto/argon2/crypto_argon2-any.o
stdlib_deps_any += $(stdlib_crypto_argon2_any)
stdlib_crypto_argon2_linux = $(stdlib_crypto_argon2_any)
stdlib_crypto_argon2_freebsd = $(stdlib_crypto_argon2_any)
stdlib_crypto_argon2_openbsd = $(stdlib_crypto_argon2_any)

# gen_lib crypto::bcrypt (any)
stdlib_crypto_bcrypt_any = $(HARECACHE)/crypto/bcrypt/crypto_bcrypt-any.o
stdlib_deps_any += $(stdlib_crypto_bcrypt_any)
stdlib_crypto_bcrypt_linux = $(stdlib_crypto_bcrypt_any)
stdlib_crypto_bcrypt_freebsd = $(stdlib_crypto_bcrypt_any)
stdlib_crypto_bcrypt_openbsd = $(stdlib_crypto_bcrypt_any)

# gen_lib crypto::blake2b (any)
stdlib_crypto_blake2b_any = $(HARECACHE)/crypto/blake2b/crypto_blake2b-any.o
stdlib_deps_any += $(stdlib_crypto_blake2b_any)
stdlib_crypto_blake2b_linux = $(stdlib_crypto_blake2b_any)
stdlib_crypto_blake2b_freebsd = $(stdlib_crypto_blake2b_any)
stdlib_crypto_blake2b_openbsd = $(stdlib_crypto_blake2b_any)

# gen_lib crypto::blowfish (any)
stdlib_crypto_blowfish_any = $(HARECACHE)/crypto/blowfish/crypto_blowfish-any.o
stdlib_deps_any += $(stdlib_crypto_blowfish_any)
stdlib_crypto_blowfish_linux = $(stdlib_crypto_blowfish_any)
stdlib_crypto_blowfish_freebsd = $(stdlib_crypto_blowfish_any)
stdlib_crypto_blowfish_openbsd = $(stdlib_crypto_blowfish_any)

# gen_lib crypto::chacha (any)
stdlib_crypto_chacha_any = $(HARECACHE)/crypto/chacha/crypto_chacha-any.o
stdlib_deps_any += $(stdlib_crypto_chacha_any)
stdlib_crypto_chacha_linux = $(stdlib_crypto_chacha_any)
stdlib_crypto_chacha_freebsd = $(stdlib_crypto_chacha_any)
stdlib_crypto_chacha_openbsd = $(stdlib_crypto_chacha_any)

# gen_lib crypto::cipher (any)
stdlib_crypto_cipher_any = $(HARECACHE)/crypto/cipher/crypto_cipher-any.o
stdlib_deps_any += $(stdlib_crypto_cipher_any)
stdlib_crypto_cipher_linux = $(stdlib_crypto_cipher_any)
stdlib_crypto_cipher_freebsd = $(stdlib_crypto_cipher_any)
stdlib_crypto_cipher_openbsd = $(stdlib_crypto_cipher_any)

# gen_lib crypto::hmac (any)
stdlib_crypto_hmac_any = $(HARECACHE)/crypto/hmac/crypto_hmac-any.o
stdlib_deps_any += $(stdlib_crypto_hmac_any)
stdlib_crypto_hmac_linux = $(stdlib_crypto_hmac_any)
stdlib_crypto_hmac_freebsd = $(stdlib_crypto_hmac_any)
stdlib_crypto_hmac_openbsd = $(stdlib_crypto_hmac_any)

# gen_lib crypto::mac (any)
stdlib_crypto_mac_any = $(HARECACHE)/crypto/mac/crypto_mac-any.o
stdlib_deps_any += $(stdlib_crypto_mac_any)
stdlib_crypto_mac_linux = $(stdlib_crypto_mac_any)
stdlib_crypto_mac_freebsd = $(stdlib_crypto_mac_any)
stdlib_crypto_mac_openbsd = $(stdlib_crypto_mac_any)

# gen_lib crypto::math (any)
stdlib_crypto_math_any = $(HARECACHE)/crypto/math/crypto_math-any.o
stdlib_deps_any += $(stdlib_crypto_math_any)
stdlib_crypto_math_linux = $(stdlib_crypto_math_any)
stdlib_crypto_math_freebsd = $(stdlib_crypto_math_any)
stdlib_crypto_math_openbsd = $(stdlib_crypto_math_any)

# gen_lib crypto::random (linux)
stdlib_crypto_random_linux = $(HARECACHE)/crypto/random/crypto_random-linux.o
stdlib_deps_linux += $(stdlib_crypto_random_linux)

# gen_lib crypto::random (freebsd)
stdlib_crypto_random_freebsd = $(HARECACHE)/crypto/random/crypto_random-freebsd.o
stdlib_deps_freebsd += $(stdlib_crypto_random_freebsd)

# gen_lib crypto::random (openbsd)
stdlib_crypto_random_openbsd = $(HARECACHE)/crypto/random/crypto_random-openbsd.o
stdlib_deps_openbsd += $(stdlib_crypto_random_openbsd)

# gen_lib crypto::poly1305 (any)
stdlib_crypto_poly1305_any = $(HARECACHE)/crypto/poly1305/crypto_poly1305-any.o
stdlib_deps_any += $(stdlib_crypto_poly1305_any)
stdlib_crypto_poly1305_linux = $(stdlib_crypto_poly1305_any)
stdlib_crypto_poly1305_freebsd = $(stdlib_crypto_poly1305_any)
stdlib_crypto_poly1305_openbsd = $(stdlib_crypto_poly1305_any)

# gen_lib crypto::salsa (any)
stdlib_crypto_salsa_any = $(HARECACHE)/crypto/salsa/crypto_salsa-any.o
stdlib_deps_any += $(stdlib_crypto_salsa_any)
stdlib_crypto_salsa_linux = $(stdlib_crypto_salsa_any)
stdlib_crypto_salsa_freebsd = $(stdlib_crypto_salsa_any)
stdlib_crypto_salsa_openbsd = $(stdlib_crypto_salsa_any)

# gen_lib crypto::sha1 (any)
stdlib_crypto_sha1_any = $(HARECACHE)/crypto/sha1/crypto_sha1-any.o
stdlib_deps_any += $(stdlib_crypto_sha1_any)
stdlib_crypto_sha1_linux = $(stdlib_crypto_sha1_any)
stdlib_crypto_sha1_freebsd = $(stdlib_crypto_sha1_any)
stdlib_crypto_sha1_openbsd = $(stdlib_crypto_sha1_any)

# gen_lib crypto::sha256 (any)
stdlib_crypto_sha256_any = $(HARECACHE)/crypto/sha256/crypto_sha256-any.o
stdlib_deps_any += $(stdlib_crypto_sha256_any)
stdlib_crypto_sha256_linux = $(stdlib_crypto_sha256_any)
stdlib_crypto_sha256_freebsd = $(stdlib_crypto_sha256_any)
stdlib_crypto_sha256_openbsd = $(stdlib_crypto_sha256_any)

# gen_lib crypto::sha512 (any)
stdlib_crypto_sha512_any = $(HARECACHE)/crypto/sha512/crypto_sha512-any.o
stdlib_deps_any += $(stdlib_crypto_sha512_any)
stdlib_crypto_sha512_linux = $(stdlib_crypto_sha512_any)
stdlib_crypto_sha512_freebsd = $(stdlib_crypto_sha512_any)
stdlib_crypto_sha512_openbsd = $(stdlib_crypto_sha512_any)

# gen_lib crypto::curve25519 (any)
stdlib_crypto_curve25519_any = $(HARECACHE)/crypto/curve25519/crypto_curve25519-any.o
stdlib_deps_any += $(stdlib_crypto_curve25519_any)
stdlib_crypto_curve25519_linux = $(stdlib_crypto_curve25519_any)
stdlib_crypto_curve25519_freebsd = $(stdlib_crypto_curve25519_any)
stdlib_crypto_curve25519_openbsd = $(stdlib_crypto_curve25519_any)

# gen_lib crypto::ed25519 (any)
stdlib_crypto_ed25519_any = $(HARECACHE)/crypto/ed25519/crypto_ed25519-any.o
stdlib_deps_any += $(stdlib_crypto_ed25519_any)
stdlib_crypto_ed25519_linux = $(stdlib_crypto_ed25519_any)
stdlib_crypto_ed25519_freebsd = $(stdlib_crypto_ed25519_any)
stdlib_crypto_ed25519_openbsd = $(stdlib_crypto_ed25519_any)

# gen_lib datetime (linux)
stdlib_datetime_linux = $(HARECACHE)/datetime/datetime-linux.o
stdlib_deps_linux += $(stdlib_datetime_linux)

# gen_lib datetime (freebsd)
stdlib_datetime_freebsd = $(HARECACHE)/datetime/datetime-freebsd.o
stdlib_deps_freebsd += $(stdlib_datetime_freebsd)

# gen_lib datetime (openbsd)
stdlib_datetime_openbsd = $(HARECACHE)/datetime/datetime-openbsd.o
stdlib_deps_openbsd += $(stdlib_datetime_openbsd)

# gen_lib dirs (any)
stdlib_dirs_any = $(HARECACHE)/dirs/dirs-any.o
stdlib_deps_any += $(stdlib_dirs_any)
stdlib_dirs_linux = $(stdlib_dirs_any)
stdlib_dirs_freebsd = $(stdlib_dirs_any)
stdlib_dirs_openbsd = $(stdlib_dirs_any)

# gen_lib encoding::base64 (any)
stdlib_encoding_base64_any = $(HARECACHE)/encoding/base64/encoding_base64-any.o
stdlib_deps_any += $(stdlib_encoding_base64_any)
stdlib_encoding_base64_linux = $(stdlib_encoding_base64_any)
stdlib_encoding_base64_freebsd = $(stdlib_encoding_base64_any)
stdlib_encoding_base64_openbsd = $(stdlib_encoding_base64_any)

# gen_lib encoding::base32 (any)
stdlib_encoding_base32_any = $(HARECACHE)/encoding/base32/encoding_base32-any.o
stdlib_deps_any += $(stdlib_encoding_base32_any)
stdlib_encoding_base32_linux = $(stdlib_encoding_base32_any)
stdlib_encoding_base32_freebsd = $(stdlib_encoding_base32_any)
stdlib_encoding_base32_openbsd = $(stdlib_encoding_base32_any)

# gen_lib encoding::hex (any)
stdlib_encoding_hex_any = $(HARECACHE)/encoding/hex/encoding_hex-any.o
stdlib_deps_any += $(stdlib_encoding_hex_any)
stdlib_encoding_hex_linux = $(stdlib_encoding_hex_any)
stdlib_encoding_hex_freebsd = $(stdlib_encoding_hex_any)
stdlib_encoding_hex_openbsd = $(stdlib_encoding_hex_any)

# gen_lib encoding::utf8 (any)
stdlib_encoding_utf8_any = $(HARECACHE)/encoding/utf8/encoding_utf8-any.o
stdlib_deps_any += $(stdlib_encoding_utf8_any)
stdlib_encoding_utf8_linux = $(stdlib_encoding_utf8_any)
stdlib_encoding_utf8_freebsd = $(stdlib_encoding_utf8_any)
stdlib_encoding_utf8_openbsd = $(stdlib_encoding_utf8_any)

# gen_lib endian (any)
stdlib_endian_any = $(HARECACHE)/endian/endian-any.o
stdlib_deps_any += $(stdlib_endian_any)
stdlib_endian_linux = $(stdlib_endian_any)
stdlib_endian_freebsd = $(stdlib_endian_any)
stdlib_endian_openbsd = $(stdlib_endian_any)

# gen_lib errors (any)
stdlib_errors_any = $(HARECACHE)/errors/errors-any.o
stdlib_deps_any += $(stdlib_errors_any)
stdlib_errors_linux = $(stdlib_errors_any)
stdlib_errors_freebsd = $(stdlib_errors_any)
stdlib_errors_openbsd = $(stdlib_errors_any)

# gen_lib fmt (any)
stdlib_fmt_any = $(HARECACHE)/fmt/fmt-any.o
stdlib_deps_any += $(stdlib_fmt_any)
stdlib_fmt_linux = $(stdlib_fmt_any)
stdlib_fmt_freebsd = $(stdlib_fmt_any)
stdlib_fmt_openbsd = $(stdlib_fmt_any)

# gen_lib fnmatch (any)
stdlib_fnmatch_any = $(HARECACHE)/fnmatch/fnmatch-any.o
stdlib_deps_any += $(stdlib_fnmatch_any)
stdlib_fnmatch_linux = $(stdlib_fnmatch_any)
stdlib_fnmatch_freebsd = $(stdlib_fnmatch_any)
stdlib_fnmatch_openbsd = $(stdlib_fnmatch_any)

# gen_lib format::elf (any)
stdlib_format_elf_any = $(HARECACHE)/format/elf/format_elf-any.o
stdlib_deps_any += $(stdlib_format_elf_any)
stdlib_format_elf_linux = $(stdlib_format_elf_any)
stdlib_format_elf_freebsd = $(stdlib_format_elf_any)
stdlib_format_elf_openbsd = $(stdlib_format_elf_any)

# gen_lib format::ini (any)
stdlib_format_ini_any = $(HARECACHE)/format/ini/format_ini-any.o
stdlib_deps_any += $(stdlib_format_ini_any)
stdlib_format_ini_linux = $(stdlib_format_ini_any)
stdlib_format_ini_freebsd = $(stdlib_format_ini_any)
stdlib_format_ini_openbsd = $(stdlib_format_ini_any)

# gen_lib fs (any)
stdlib_fs_any = $(HARECACHE)/fs/fs-any.o
stdlib_deps_any += $(stdlib_fs_any)
stdlib_fs_linux = $(stdlib_fs_any)
stdlib_fs_freebsd = $(stdlib_fs_any)
stdlib_fs_openbsd = $(stdlib_fs_any)

# gen_lib getopt (any)
stdlib_getopt_any = $(HARECACHE)/getopt/getopt-any.o
stdlib_deps_any += $(stdlib_getopt_any)
stdlib_getopt_linux = $(stdlib_getopt_any)
stdlib_getopt_freebsd = $(stdlib_getopt_any)
stdlib_getopt_openbsd = $(stdlib_getopt_any)

# gen_lib glob (any)
stdlib_glob_any = $(HARECACHE)/glob/glob-any.o
stdlib_deps_any += $(stdlib_glob_any)
stdlib_glob_linux = $(stdlib_glob_any)
stdlib_glob_freebsd = $(stdlib_glob_any)
stdlib_glob_openbsd = $(stdlib_glob_any)

# gen_lib hare::ast (any)
stdlib_hare_ast_any = $(HARECACHE)/hare/ast/hare_ast-any.o
stdlib_deps_any += $(stdlib_hare_ast_any)
stdlib_hare_ast_linux = $(stdlib_hare_ast_any)
stdlib_hare_ast_freebsd = $(stdlib_hare_ast_any)
stdlib_hare_ast_openbsd = $(stdlib_hare_ast_any)

# gen_lib hare::lex (any)
stdlib_hare_lex_any = $(HARECACHE)/hare/lex/hare_lex-any.o
stdlib_deps_any += $(stdlib_hare_lex_any)
stdlib_hare_lex_linux = $(stdlib_hare_lex_any)
stdlib_hare_lex_freebsd = $(stdlib_hare_lex_any)
stdlib_hare_lex_openbsd = $(stdlib_hare_lex_any)

# gen_lib hare::module (any)
stdlib_hare_module_any = $(HARECACHE)/hare/module/hare_module-any.o
stdlib_deps_any += $(stdlib_hare_module_any)
stdlib_hare_module_linux = $(stdlib_hare_module_any)
stdlib_hare_module_freebsd = $(stdlib_hare_module_any)
stdlib_hare_module_openbsd = $(stdlib_hare_module_any)

# gen_lib hare::parse (any)
stdlib_hare_parse_any = $(HARECACHE)/hare/parse/hare_parse-any.o
stdlib_deps_any += $(stdlib_hare_parse_any)
stdlib_hare_parse_linux = $(stdlib_hare_parse_any)
stdlib_hare_parse_freebsd = $(stdlib_hare_parse_any)
stdlib_hare_parse_openbsd = $(stdlib_hare_parse_any)

# gen_lib hare::types (any)
stdlib_hare_types_any = $(HARECACHE)/hare/types/hare_types-any.o
stdlib_deps_any += $(stdlib_hare_types_any)
stdlib_hare_types_linux = $(stdlib_hare_types_any)
stdlib_hare_types_freebsd = $(stdlib_hare_types_any)
stdlib_hare_types_openbsd = $(stdlib_hare_types_any)

# gen_lib hare::unit (any)
stdlib_hare_unit_any = $(HARECACHE)/hare/unit/hare_unit-any.o
stdlib_deps_any += $(stdlib_hare_unit_any)
stdlib_hare_unit_linux = $(stdlib_hare_unit_any)
stdlib_hare_unit_freebsd = $(stdlib_hare_unit_any)
stdlib_hare_unit_openbsd = $(stdlib_hare_unit_any)

# gen_lib hare::unparse (any)
stdlib_hare_unparse_any = $(HARECACHE)/hare/unparse/hare_unparse-any.o
stdlib_deps_any += $(stdlib_hare_unparse_any)
stdlib_hare_unparse_linux = $(stdlib_hare_unparse_any)
stdlib_hare_unparse_freebsd = $(stdlib_hare_unparse_any)
stdlib_hare_unparse_openbsd = $(stdlib_hare_unparse_any)

# gen_lib hash (any)
stdlib_hash_any = $(HARECACHE)/hash/hash-any.o
stdlib_deps_any += $(stdlib_hash_any)
stdlib_hash_linux = $(stdlib_hash_any)
stdlib_hash_freebsd = $(stdlib_hash_any)
stdlib_hash_openbsd = $(stdlib_hash_any)

# gen_lib hash::adler32 (any)
stdlib_hash_adler32_any = $(HARECACHE)/hash/adler32/hash_adler32-any.o
stdlib_deps_any += $(stdlib_hash_adler32_any)
stdlib_hash_adler32_linux = $(stdlib_hash_adler32_any)
stdlib_hash_adler32_freebsd = $(stdlib_hash_adler32_any)
stdlib_hash_adler32_openbsd = $(stdlib_hash_adler32_any)

# gen_lib hash::crc16 (any)
stdlib_hash_crc16_any = $(HARECACHE)/hash/crc16/hash_crc16-any.o
stdlib_deps_any += $(stdlib_hash_crc16_any)
stdlib_hash_crc16_linux = $(stdlib_hash_crc16_any)
stdlib_hash_crc16_freebsd = $(stdlib_hash_crc16_any)
stdlib_hash_crc16_openbsd = $(stdlib_hash_crc16_any)

# gen_lib hash::crc32 (any)
stdlib_hash_crc32_any = $(HARECACHE)/hash/crc32/hash_crc32-any.o
stdlib_deps_any += $(stdlib_hash_crc32_any)
stdlib_hash_crc32_linux = $(stdlib_hash_crc32_any)
stdlib_hash_crc32_freebsd = $(stdlib_hash_crc32_any)
stdlib_hash_crc32_openbsd = $(stdlib_hash_crc32_any)

# gen_lib hash::crc64 (any)
stdlib_hash_crc64_any = $(HARECACHE)/hash/crc64/hash_crc64-any.o
stdlib_deps_any += $(stdlib_hash_crc64_any)
stdlib_hash_crc64_linux = $(stdlib_hash_crc64_any)
stdlib_hash_crc64_freebsd = $(stdlib_hash_crc64_any)
stdlib_hash_crc64_openbsd = $(stdlib_hash_crc64_any)

# gen_lib hash::fnv (any)
stdlib_hash_fnv_any = $(HARECACHE)/hash/fnv/hash_fnv-any.o
stdlib_deps_any += $(stdlib_hash_fnv_any)
stdlib_hash_fnv_linux = $(stdlib_hash_fnv_any)
stdlib_hash_fnv_freebsd = $(stdlib_hash_fnv_any)
stdlib_hash_fnv_openbsd = $(stdlib_hash_fnv_any)

# gen_lib io (linux)
stdlib_io_linux = $(HARECACHE)/io/io-linux.o
stdlib_deps_linux += $(stdlib_io_linux)

# gen_lib io (freebsd)
stdlib_io_freebsd = $(HARECACHE)/io/io-freebsd.o
stdlib_deps_freebsd += $(stdlib_io_freebsd)

# gen_lib io (openbsd)
stdlib_io_openbsd = $(HARECACHE)/io/io-openbsd.o
stdlib_deps_openbsd += $(stdlib_io_openbsd)

# gen_lib linux (linux)
stdlib_linux_linux = $(HARECACHE)/linux/linux-linux.o
stdlib_deps_linux += $(stdlib_linux_linux)

# gen_lib linux::keyctl (linux)
stdlib_linux_keyctl_linux = $(HARECACHE)/linux/keyctl/linux_keyctl-linux.o
stdlib_deps_linux += $(stdlib_linux_keyctl_linux)

# gen_lib linux::timerfd (linux)
stdlib_linux_timerfd_linux = $(HARECACHE)/linux/timerfd/linux_timerfd-linux.o
stdlib_deps_linux += $(stdlib_linux_timerfd_linux)

# gen_lib linux::vdso (linux)
stdlib_linux_vdso_linux = $(HARECACHE)/linux/vdso/linux_vdso-linux.o
stdlib_deps_linux += $(stdlib_linux_vdso_linux)

# gen_lib log (linux)
stdlib_log_linux = $(HARECACHE)/log/log-linux.o
stdlib_deps_linux += $(stdlib_log_linux)

# gen_lib log (freebsd)
stdlib_log_freebsd = $(HARECACHE)/log/log-freebsd.o
stdlib_deps_freebsd += $(stdlib_log_freebsd)

# gen_lib log (openbsd)
stdlib_log_openbsd = $(HARECACHE)/log/log-openbsd.o
stdlib_deps_openbsd += $(stdlib_log_openbsd)

# gen_lib math (any)
stdlib_math_any = $(HARECACHE)/math/math-any.o
stdlib_deps_any += $(stdlib_math_any)
stdlib_math_linux = $(stdlib_math_any)
stdlib_math_freebsd = $(stdlib_math_any)
stdlib_math_openbsd = $(stdlib_math_any)

# gen_lib math::random (any)
stdlib_math_random_any = $(HARECACHE)/math/random/math_random-any.o
stdlib_deps_any += $(stdlib_math_random_any)
stdlib_math_random_linux = $(stdlib_math_random_any)
stdlib_math_random_freebsd = $(stdlib_math_random_any)
stdlib_math_random_openbsd = $(stdlib_math_random_any)

# gen_lib net (linux)
stdlib_net_linux = $(HARECACHE)/net/net-linux.o
stdlib_deps_linux += $(stdlib_net_linux)

# gen_lib net (freebsd)
stdlib_net_freebsd = $(HARECACHE)/net/net-freebsd.o
stdlib_deps_freebsd += $(stdlib_net_freebsd)

# gen_lib net (openbsd)
stdlib_net_openbsd = $(HARECACHE)/net/net-openbsd.o
stdlib_deps_openbsd += $(stdlib_net_openbsd)

# gen_lib net::dial (any)
stdlib_net_dial_any = $(HARECACHE)/net/dial/net_dial-any.o
stdlib_deps_any += $(stdlib_net_dial_any)
stdlib_net_dial_linux = $(stdlib_net_dial_any)
stdlib_net_dial_freebsd = $(stdlib_net_dial_any)
stdlib_net_dial_openbsd = $(stdlib_net_dial_any)

# gen_lib net::dns (any)
stdlib_net_dns_any = $(HARECACHE)/net/dns/net_dns-any.o
stdlib_deps_any += $(stdlib_net_dns_any)
stdlib_net_dns_linux = $(stdlib_net_dns_any)
stdlib_net_dns_freebsd = $(stdlib_net_dns_any)
stdlib_net_dns_openbsd = $(stdlib_net_dns_any)

# gen_lib net::ip (linux)
stdlib_net_ip_linux = $(HARECACHE)/net/ip/net_ip-linux.o
stdlib_deps_linux += $(stdlib_net_ip_linux)

# gen_lib net::ip (freebsd)
stdlib_net_ip_freebsd = $(HARECACHE)/net/ip/net_ip-freebsd.o
stdlib_deps_freebsd += $(stdlib_net_ip_freebsd)

# gen_lib net::ip (openbsd)
stdlib_net_ip_openbsd = $(HARECACHE)/net/ip/net_ip-openbsd.o
stdlib_deps_openbsd += $(stdlib_net_ip_openbsd)

# gen_lib net::tcp (linux)
stdlib_net_tcp_linux = $(HARECACHE)/net/tcp/net_tcp-linux.o
stdlib_deps_linux += $(stdlib_net_tcp_linux)

# gen_lib net::tcp (freebsd)
stdlib_net_tcp_freebsd = $(HARECACHE)/net/tcp/net_tcp-freebsd.o
stdlib_deps_freebsd += $(stdlib_net_tcp_freebsd)

# gen_lib net::tcp (openbsd)
stdlib_net_tcp_openbsd = $(HARECACHE)/net/tcp/net_tcp-openbsd.o
stdlib_deps_openbsd += $(stdlib_net_tcp_openbsd)

# gen_lib net::udp (linux)
stdlib_net_udp_linux = $(HARECACHE)/net/udp/net_udp-linux.o
stdlib_deps_linux += $(stdlib_net_udp_linux)

# gen_lib net::udp (freebsd)
stdlib_net_udp_freebsd = $(HARECACHE)/net/udp/net_udp-freebsd.o
stdlib_deps_freebsd += $(stdlib_net_udp_freebsd)

# gen_lib net::udp (openbsd)
stdlib_net_udp_openbsd = $(HARECACHE)/net/udp/net_udp-openbsd.o
stdlib_deps_openbsd += $(stdlib_net_udp_openbsd)

# gen_lib net::unix (linux)
stdlib_net_unix_linux = $(HARECACHE)/net/unix/net_unix-linux.o
stdlib_deps_linux += $(stdlib_net_unix_linux)

# gen_lib net::unix (freebsd)
stdlib_net_unix_freebsd = $(HARECACHE)/net/unix/net_unix-freebsd.o
stdlib_deps_freebsd += $(stdlib_net_unix_freebsd)

# gen_lib net::unix (openbsd)
stdlib_net_unix_openbsd = $(HARECACHE)/net/unix/net_unix-openbsd.o
stdlib_deps_openbsd += $(stdlib_net_unix_openbsd)

# gen_lib net::uri (any)
stdlib_net_uri_any = $(HARECACHE)/net/uri/net_uri-any.o
stdlib_deps_any += $(stdlib_net_uri_any)
stdlib_net_uri_linux = $(stdlib_net_uri_any)
stdlib_net_uri_freebsd = $(stdlib_net_uri_any)
stdlib_net_uri_openbsd = $(stdlib_net_uri_any)

# gen_lib os (linux)
stdlib_os_linux = $(HARECACHE)/os/os-linux.o
stdlib_deps_linux += $(stdlib_os_linux)

# gen_lib os (freebsd)
stdlib_os_freebsd = $(HARECACHE)/os/os-freebsd.o
stdlib_deps_freebsd += $(stdlib_os_freebsd)

# gen_lib os (openbsd)
stdlib_os_openbsd = $(HARECACHE)/os/os-openbsd.o
stdlib_deps_openbsd += $(stdlib_os_openbsd)

# gen_lib os::exec (linux)
stdlib_os_exec_linux = $(HARECACHE)/os/exec/os_exec-linux.o
stdlib_deps_linux += $(stdlib_os_exec_linux)

# gen_lib os::exec (freebsd)
stdlib_os_exec_freebsd = $(HARECACHE)/os/exec/os_exec-freebsd.o
stdlib_deps_freebsd += $(stdlib_os_exec_freebsd)

# gen_lib os::exec (openbsd)
stdlib_os_exec_openbsd = $(HARECACHE)/os/exec/os_exec-openbsd.o
stdlib_deps_openbsd += $(stdlib_os_exec_openbsd)

# gen_lib path (any)
stdlib_path_any = $(HARECACHE)/path/path-any.o
stdlib_deps_any += $(stdlib_path_any)
stdlib_path_linux = $(stdlib_path_any)
stdlib_path_freebsd = $(stdlib_path_any)
stdlib_path_openbsd = $(stdlib_path_any)

# gen_lib regex (any)
stdlib_regex_any = $(HARECACHE)/regex/regex-any.o
stdlib_deps_any += $(stdlib_regex_any)
stdlib_regex_linux = $(stdlib_regex_any)
stdlib_regex_freebsd = $(stdlib_regex_any)
stdlib_regex_openbsd = $(stdlib_regex_any)

# gen_lib shlex (any)
stdlib_shlex_any = $(HARECACHE)/shlex/shlex-any.o
stdlib_deps_any += $(stdlib_shlex_any)
stdlib_shlex_linux = $(stdlib_shlex_any)
stdlib_shlex_freebsd = $(stdlib_shlex_any)
stdlib_shlex_openbsd = $(stdlib_shlex_any)

# gen_lib slices (any)
stdlib_slices_any = $(HARECACHE)/slices/slices-any.o
stdlib_deps_any += $(stdlib_slices_any)
stdlib_slices_linux = $(stdlib_slices_any)
stdlib_slices_freebsd = $(stdlib_slices_any)
stdlib_slices_openbsd = $(stdlib_slices_any)

# gen_lib sort (any)
stdlib_sort_any = $(HARECACHE)/sort/sort-any.o
stdlib_deps_any += $(stdlib_sort_any)
stdlib_sort_linux = $(stdlib_sort_any)
stdlib_sort_freebsd = $(stdlib_sort_any)
stdlib_sort_openbsd = $(stdlib_sort_any)

# gen_lib strconv (any)
stdlib_strconv_any = $(HARECACHE)/strconv/strconv-any.o
stdlib_deps_any += $(stdlib_strconv_any)
stdlib_strconv_linux = $(stdlib_strconv_any)
stdlib_strconv_freebsd = $(stdlib_strconv_any)
stdlib_strconv_openbsd = $(stdlib_strconv_any)

# gen_lib strings (any)
stdlib_strings_any = $(HARECACHE)/strings/strings-any.o
stdlib_deps_any += $(stdlib_strings_any)
stdlib_strings_linux = $(stdlib_strings_any)
stdlib_strings_freebsd = $(stdlib_strings_any)
stdlib_strings_openbsd = $(stdlib_strings_any)

# gen_lib strio (any)
stdlib_strio_any = $(HARECACHE)/strio/strio-any.o
stdlib_deps_any += $(stdlib_strio_any)
stdlib_strio_linux = $(stdlib_strio_any)
stdlib_strio_freebsd = $(stdlib_strio_any)
stdlib_strio_openbsd = $(stdlib_strio_any)

# gen_lib temp (linux)
stdlib_temp_linux = $(HARECACHE)/temp/temp-linux.o
stdlib_deps_linux += $(stdlib_temp_linux)

# gen_lib temp (freebsd)
stdlib_temp_freebsd = $(HARECACHE)/temp/temp-freebsd.o
stdlib_deps_freebsd += $(stdlib_temp_freebsd)

# gen_lib temp (openbsd)
stdlib_temp_openbsd = $(HARECACHE)/temp/temp-openbsd.o
stdlib_deps_openbsd += $(stdlib_temp_openbsd)

# gen_lib time (linux)
stdlib_time_linux = $(HARECACHE)/time/time-linux.o
stdlib_deps_linux += $(stdlib_time_linux)

# gen_lib time (freebsd)
stdlib_time_freebsd = $(HARECACHE)/time/time-freebsd.o
stdlib_deps_freebsd += $(stdlib_time_freebsd)

# gen_lib time (openbsd)
stdlib_time_openbsd = $(HARECACHE)/time/time-openbsd.o
stdlib_deps_openbsd += $(stdlib_time_openbsd)

# gen_lib time::chrono (linux)
stdlib_time_chrono_linux = $(HARECACHE)/time/chrono/time_chrono-linux.o
stdlib_deps_linux += $(stdlib_time_chrono_linux)

# gen_lib time::chrono (freebsd)
stdlib_time_chrono_freebsd = $(HARECACHE)/time/chrono/time_chrono-freebsd.o
stdlib_deps_freebsd += $(stdlib_time_chrono_freebsd)

# gen_lib time::chrono (openbsd)
stdlib_time_chrono_openbsd = $(HARECACHE)/time/chrono/time_chrono-openbsd.o
stdlib_deps_openbsd += $(stdlib_time_chrono_openbsd)

# gen_lib types (any)
stdlib_types_any = $(HARECACHE)/types/types-any.o
stdlib_deps_any += $(stdlib_types_any)
stdlib_types_linux = $(stdlib_types_any)
stdlib_types_freebsd = $(stdlib_types_any)
stdlib_types_openbsd = $(stdlib_types_any)

# gen_lib unix (linux)
stdlib_unix_linux = $(HARECACHE)/unix/unix-linux.o
stdlib_deps_linux += $(stdlib_unix_linux)

# gen_lib unix (freebsd)
stdlib_unix_freebsd = $(HARECACHE)/unix/unix-freebsd.o
stdlib_deps_freebsd += $(stdlib_unix_freebsd)

# gen_lib unix (openbsd)
stdlib_unix_openbsd = $(HARECACHE)/unix/unix-openbsd.o
stdlib_deps_openbsd += $(stdlib_unix_openbsd)

# gen_lib unix::hosts (linux)
stdlib_unix_hosts_linux = $(HARECACHE)/unix/hosts/unix_hosts-linux.o
stdlib_deps_linux += $(stdlib_unix_hosts_linux)

# gen_lib unix::hosts (freebsd)
stdlib_unix_hosts_freebsd = $(HARECACHE)/unix/hosts/unix_hosts-freebsd.o
stdlib_deps_freebsd += $(stdlib_unix_hosts_freebsd)

# gen_lib unix::hosts (openbsd)
stdlib_unix_hosts_openbsd = $(HARECACHE)/unix/hosts/unix_hosts-openbsd.o
stdlib_deps_openbsd += $(stdlib_unix_hosts_openbsd)

# gen_lib unix::passwd (any)
stdlib_unix_passwd_any = $(HARECACHE)/unix/passwd/unix_passwd-any.o
stdlib_deps_any += $(stdlib_unix_passwd_any)
stdlib_unix_passwd_linux = $(stdlib_unix_passwd_any)
stdlib_unix_passwd_freebsd = $(stdlib_unix_passwd_any)
stdlib_unix_passwd_openbsd = $(stdlib_unix_passwd_any)

# gen_lib unix::poll (linux)
stdlib_unix_poll_linux = $(HARECACHE)/unix/poll/unix_poll-linux.o
stdlib_deps_linux += $(stdlib_unix_poll_linux)

# gen_lib unix::poll (freebsd)
stdlib_unix_poll_freebsd = $(HARECACHE)/unix/poll/unix_poll-freebsd.o
stdlib_deps_freebsd += $(stdlib_unix_poll_freebsd)

# gen_lib unix::poll (openbsd)
stdlib_unix_poll_openbsd = $(HARECACHE)/unix/poll/unix_poll-openbsd.o
stdlib_deps_openbsd += $(stdlib_unix_poll_openbsd)

# gen_lib unix::resolvconf (linux)
stdlib_unix_resolvconf_linux = $(HARECACHE)/unix/resolvconf/unix_resolvconf-linux.o
stdlib_deps_linux += $(stdlib_unix_resolvconf_linux)

# gen_lib unix::resolvconf (freebsd)
stdlib_unix_resolvconf_freebsd = $(HARECACHE)/unix/resolvconf/unix_resolvconf-freebsd.o
stdlib_deps_freebsd += $(stdlib_unix_resolvconf_freebsd)

# gen_lib unix::resolvconf (openbsd)
stdlib_unix_resolvconf_openbsd = $(HARECACHE)/unix/resolvconf/unix_resolvconf-openbsd.o
stdlib_deps_openbsd += $(stdlib_unix_resolvconf_openbsd)

# gen_lib unix::signal (linux)
stdlib_unix_signal_linux = $(HARECACHE)/unix/signal/unix_signal-linux.o
stdlib_deps_linux += $(stdlib_unix_signal_linux)

# gen_lib unix::tty (linux)
stdlib_unix_tty_linux = $(HARECACHE)/unix/tty/unix_tty-linux.o
stdlib_deps_linux += $(stdlib_unix_tty_linux)

# gen_lib unix::tty (freebsd)
stdlib_unix_tty_freebsd = $(HARECACHE)/unix/tty/unix_tty-freebsd.o
stdlib_deps_freebsd += $(stdlib_unix_tty_freebsd)

# gen_lib unix::tty (openbsd)
stdlib_unix_tty_openbsd = $(HARECACHE)/unix/tty/unix_tty-openbsd.o
stdlib_deps_openbsd += $(stdlib_unix_tty_openbsd)

# gen_lib uuid (any)
stdlib_uuid_any = $(HARECACHE)/uuid/uuid-any.o
stdlib_deps_any += $(stdlib_uuid_any)
stdlib_uuid_linux = $(stdlib_uuid_any)
stdlib_uuid_freebsd = $(stdlib_uuid_any)
stdlib_uuid_openbsd = $(stdlib_uuid_any)

# ascii (+any)
stdlib_ascii_any_srcs = \
	$(STDLIB)/ascii/ctype.ha \
	$(STDLIB)/ascii/strcmp.ha \
	$(STDLIB)/ascii/valid.ha

$(HARECACHE)/ascii/ascii-any.ssa: $(stdlib_ascii_any_srcs) $(stdlib_rt) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/ascii
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nascii \
		-t$(HARECACHE)/ascii/ascii.td $(stdlib_ascii_any_srcs)

# bufio (+any)
stdlib_bufio_any_srcs = \
	$(STDLIB)/bufio/buffered.ha \
	$(STDLIB)/bufio/memstream.ha \
	$(STDLIB)/bufio/scanner.ha

$(HARECACHE)/bufio/bufio-any.ssa: $(stdlib_bufio_any_srcs) $(stdlib_rt) $(stdlib_io_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_encoding_utf8_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_types_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/bufio
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nbufio \
		-t$(HARECACHE)/bufio/bufio.td $(stdlib_bufio_any_srcs)

# bytes (+any)
stdlib_bytes_any_srcs = \
	$(STDLIB)/bytes/contains.ha \
	$(STDLIB)/bytes/equal.ha \
	$(STDLIB)/bytes/index.ha \
	$(STDLIB)/bytes/reverse.ha \
	$(STDLIB)/bytes/tokenize.ha \
	$(STDLIB)/bytes/trim.ha \
	$(STDLIB)/bytes/two_way.ha \
	$(STDLIB)/bytes/zero.ha

$(HARECACHE)/bytes/bytes-any.ssa: $(stdlib_bytes_any_srcs) $(stdlib_rt) $(stdlib_types_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/bytes
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nbytes \
		-t$(HARECACHE)/bytes/bytes.td $(stdlib_bytes_any_srcs)

# crypto (+any)
stdlib_crypto_any_srcs = \
	$(STDLIB)/crypto/authenc.ha \
	$(STDLIB)/crypto/keyderiv.ha

$(HARECACHE)/crypto/crypto-any.ssa: $(stdlib_crypto_any_srcs) $(stdlib_rt) $(stdlib_bytes_$(PLATFORM)) $(stdlib_crypto_argon2_$(PLATFORM)) $(stdlib_crypto_chacha_$(PLATFORM)) $(stdlib_crypto_cihper_$(PLATFORM)) $(stdlib_crypto_poly1305_$(PLATFORM)) $(stdlib_crypto_mac_$(PLATFORM)) $(stdlib_crypto_math_$(PLATFORM)) $(stdlib_endian_$(PLATFORM)) $(stdlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto \
		-t$(HARECACHE)/crypto/crypto.td $(stdlib_crypto_any_srcs)

# crypto::aes (+any)
stdlib_crypto_aes_any_srcs = \
	$(STDLIB)/crypto/aes/aes_ct64.ha

$(HARECACHE)/crypto/aes/crypto_aes-any.ssa: $(stdlib_crypto_aes_any_srcs) $(stdlib_rt) $(stdlib_bytes_$(PLATFORM)) $(stdlib_crypto_cipher_$(PLATFORM)) $(stdlib_crypto_math_$(PLATFORM)) $(stdlib_endian_$(PLATFORM)) $(stdlib_rt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/aes
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::aes \
		-t$(HARECACHE)/crypto/aes/crypto_aes.td $(stdlib_crypto_aes_any_srcs)

# crypto::aes::xts (+any)
stdlib_crypto_aes_xts_any_srcs = \
	$(STDLIB)/crypto/aes/xts/xts.ha

$(HARECACHE)/crypto/aes/xts/crypto_aes_xts-any.ssa: $(stdlib_crypto_aes_xts_any_srcs) $(stdlib_rt) $(stdlib_crypto_aes_$(PLATFORM)) $(stdlib_crypto_cipher_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/aes/xts
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::aes::xts \
		-t$(HARECACHE)/crypto/aes/xts/crypto_aes_xts.td $(stdlib_crypto_aes_xts_any_srcs)

# crypto::argon2 (+any)
stdlib_crypto_argon2_any_srcs = \
	$(STDLIB)/crypto/argon2/argon2.ha

$(HARECACHE)/crypto/argon2/crypto_argon2-any.ssa: $(stdlib_crypto_argon2_any_srcs) $(stdlib_rt) $(stdlib_bufio_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM)) $(stdlib_crypto_blake2b_$(PLATFORM)) $(stdlib_crypto_math_$(PLATFORM)) $(stdlib_endian_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_hash_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_rt_$(PLATFORM)) $(stdlib_types_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/argon2
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::argon2 \
		-t$(HARECACHE)/crypto/argon2/crypto_argon2.td $(stdlib_crypto_argon2_any_srcs)

# crypto::bcrypt (+any)
stdlib_crypto_bcrypt_any_srcs = \
	$(STDLIB)/crypto/bcrypt/bcrypt.ha \
	$(STDLIB)/crypto/bcrypt/base64.ha

$(HARECACHE)/crypto/bcrypt/crypto_bcrypt-any.ssa: $(stdlib_crypto_bcrypt_any_srcs) $(stdlib_rt) $(stdlib_crypto_blowfish_$(PLATFORM)) $(stdlib_encoding_base64_$(PLATFORM)) $(stdlib_bufio_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_crypto_$(PLATFORM)) $(stdlib_crypto_random_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_crypto_cipher_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM)) $(stdlib_strconv_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/bcrypt
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::bcrypt \
		-t$(HARECACHE)/crypto/bcrypt/crypto_bcrypt.td $(stdlib_crypto_bcrypt_any_srcs)

# crypto::blake2b (+any)
stdlib_crypto_blake2b_any_srcs = \
	$(STDLIB)/crypto/blake2b/blake2b.ha

$(HARECACHE)/crypto/blake2b/crypto_blake2b-any.ssa: $(stdlib_crypto_blake2b_any_srcs) $(stdlib_rt) $(stdlib_encoding_hex_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_hash_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_strio_$(PLATFORM)) $(stdlib_crypto_math_$(PLATFORM)) $(stdlib_endian_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/blake2b
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::blake2b \
		-t$(HARECACHE)/crypto/blake2b/crypto_blake2b.td $(stdlib_crypto_blake2b_any_srcs)

# crypto::blowfish (+any)
stdlib_crypto_blowfish_any_srcs = \
	$(STDLIB)/crypto/blowfish/blowfish.ha \
	$(STDLIB)/crypto/blowfish/const.ha

$(HARECACHE)/crypto/blowfish/crypto_blowfish-any.ssa: $(stdlib_crypto_blowfish_any_srcs) $(stdlib_rt) $(stdlib_bytes_$(PLATFORM)) $(stdlib_crypto_cipher_$(PLATFORM)) $(stdlib_endian_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/blowfish
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::blowfish \
		-t$(HARECACHE)/crypto/blowfish/crypto_blowfish.td $(stdlib_crypto_blowfish_any_srcs)

# crypto::chacha (+any)
stdlib_crypto_chacha_any_srcs = \
	$(STDLIB)/crypto/chacha/chacha20.ha

$(HARECACHE)/crypto/chacha/crypto_chacha-any.ssa: $(stdlib_crypto_chacha_any_srcs) $(stdlib_rt) $(stdlib_bytes_$(PLATFORM)) $(stdlib_crypto_cipher_$(PLATFORM)) $(stdlib_crypto_math_$(PLATFORM)) $(stdlib_endian_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/chacha
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::chacha \
		-t$(HARECACHE)/crypto/chacha/crypto_chacha.td $(stdlib_crypto_chacha_any_srcs)

# crypto::cipher (+any)
stdlib_crypto_cipher_any_srcs = \
	$(STDLIB)/crypto/cipher/cipher.ha \
	$(STDLIB)/crypto/cipher/block.ha \
	$(STDLIB)/crypto/cipher/cbc.ha \
	$(STDLIB)/crypto/cipher/ctr.ha \
	$(STDLIB)/crypto/cipher/stream.ha

$(HARECACHE)/crypto/cipher/crypto_cipher-any.ssa: $(stdlib_crypto_cipher_any_srcs) $(stdlib_rt) $(stdlib_crypto_math_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/cipher
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::cipher \
		-t$(HARECACHE)/crypto/cipher/crypto_cipher.td $(stdlib_crypto_cipher_any_srcs)

# crypto::hmac (+any)
stdlib_crypto_hmac_any_srcs = \
	$(STDLIB)/crypto/hmac/hmac.ha \
	$(STDLIB)/crypto/hmac/sha1.ha \
	$(STDLIB)/crypto/hmac/sha256.ha

$(HARECACHE)/crypto/hmac/crypto_hmac-any.ssa: $(stdlib_crypto_hmac_any_srcs) $(stdlib_rt) $(stdlib_crypto_mac_$(PLATFORM)) $(stdlib_crypto_sha1_$(PLATFORM)) $(stdlib_crypto_sha256_$(PLATFORM)) $(stdlib_hash_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/hmac
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::hmac \
		-t$(HARECACHE)/crypto/hmac/crypto_hmac.td $(stdlib_crypto_hmac_any_srcs)

# crypto::mac (+any)
stdlib_crypto_mac_any_srcs = \
	$(STDLIB)/crypto/mac/mac.ha

$(HARECACHE)/crypto/mac/crypto_mac-any.ssa: $(stdlib_crypto_mac_any_srcs) $(stdlib_rt) $(stdlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/mac
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::mac \
		-t$(HARECACHE)/crypto/mac/crypto_mac.td $(stdlib_crypto_mac_any_srcs)

# crypto::math (+any)
stdlib_crypto_math_any_srcs = \
	$(STDLIB)/crypto/math/bits.ha

$(HARECACHE)/crypto/math/crypto_math-any.ssa: $(stdlib_crypto_math_any_srcs) $(stdlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/math
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::math \
		-t$(HARECACHE)/crypto/math/crypto_math.td $(stdlib_crypto_math_any_srcs)

# crypto::random (+linux)
stdlib_crypto_random_linux_srcs = \
	$(STDLIB)/crypto/random/+linux.ha \
	$(STDLIB)/crypto/random/random.ha

$(HARECACHE)/crypto/random/crypto_random-linux.ssa: $(stdlib_crypto_random_linux_srcs) $(stdlib_rt) $(stdlib_rt_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/random
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::random \
		-t$(HARECACHE)/crypto/random/crypto_random.td $(stdlib_crypto_random_linux_srcs)

# crypto::random (+freebsd)
stdlib_crypto_random_freebsd_srcs = \
	$(STDLIB)/crypto/random/+freebsd.ha \
	$(STDLIB)/crypto/random/random.ha

$(HARECACHE)/crypto/random/crypto_random-freebsd.ssa: $(stdlib_crypto_random_freebsd_srcs) $(stdlib_rt) $(stdlib_rt_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/random
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::random \
		-t$(HARECACHE)/crypto/random/crypto_random.td $(stdlib_crypto_random_freebsd_srcs)

# crypto::random (+openbsd)
stdlib_crypto_random_openbsd_srcs = \
	$(STDLIB)/crypto/random/+openbsd.ha \
	$(STDLIB)/crypto/random/random.ha

$(HARECACHE)/crypto/random/crypto_random-openbsd.ssa: $(stdlib_crypto_random_openbsd_srcs) $(stdlib_rt) $(stdlib_rt_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/random
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::random \
		-t$(HARECACHE)/crypto/random/crypto_random.td $(stdlib_crypto_random_openbsd_srcs)

# crypto::poly1305 (+any)
stdlib_crypto_poly1305_any_srcs = \
	$(STDLIB)/crypto/poly1305/poly1305.ha

$(HARECACHE)/crypto/poly1305/crypto_poly1305-any.ssa: $(stdlib_crypto_poly1305_any_srcs) $(stdlib_rt) $(stdlib_bytes_$(PLATFORM)) $(stdlib_crypto_mac_$(PLATFORM)) $(stdlib_endian_$(PLATFORM)) $(stdlib_encoding_hex_$(PLATFORM)) $(stdlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/poly1305
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::poly1305 \
		-t$(HARECACHE)/crypto/poly1305/crypto_poly1305.td $(stdlib_crypto_poly1305_any_srcs)

# crypto::salsa (+any)
stdlib_crypto_salsa_any_srcs = \
	$(STDLIB)/crypto/salsa/salsa20.ha

$(HARECACHE)/crypto/salsa/crypto_salsa-any.ssa: $(stdlib_crypto_salsa_any_srcs) $(stdlib_rt) $(stdlib_bytes_$(PLATFORM)) $(stdlib_crypto_cipher_$(PLATFORM)) $(stdlib_crypto_math_$(PLATFORM)) $(stdlib_endian_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/salsa
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::salsa \
		-t$(HARECACHE)/crypto/salsa/crypto_salsa.td $(stdlib_crypto_salsa_any_srcs)

# crypto::sha1 (+any)
stdlib_crypto_sha1_any_srcs = \
	$(STDLIB)/crypto/sha1/sha1.ha

$(HARECACHE)/crypto/sha1/crypto_sha1-any.ssa: $(stdlib_crypto_sha1_any_srcs) $(stdlib_rt) $(stdlib_bytes_$(PLATFORM)) $(stdlib_hash_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_endian_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/sha1
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::sha1 \
		-t$(HARECACHE)/crypto/sha1/crypto_sha1.td $(stdlib_crypto_sha1_any_srcs)

# crypto::sha256 (+any)
stdlib_crypto_sha256_any_srcs = \
	$(STDLIB)/crypto/sha256/sha256.ha

$(HARECACHE)/crypto/sha256/crypto_sha256-any.ssa: $(stdlib_crypto_sha256_any_srcs) $(stdlib_rt) $(stdlib_bytes_$(PLATFORM)) $(stdlib_hash_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_endian_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/sha256
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::sha256 \
		-t$(HARECACHE)/crypto/sha256/crypto_sha256.td $(stdlib_crypto_sha256_any_srcs)

# crypto::sha512 (+any)
stdlib_crypto_sha512_any_srcs = \
	$(STDLIB)/crypto/sha512/sha512.ha

$(HARECACHE)/crypto/sha512/crypto_sha512-any.ssa: $(stdlib_crypto_sha512_any_srcs) $(stdlib_rt) $(stdlib_bytes_$(PLATFORM)) $(stdlib_hash_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_endian_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/sha512
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::sha512 \
		-t$(HARECACHE)/crypto/sha512/crypto_sha512.td $(stdlib_crypto_sha512_any_srcs)

# crypto::curve25519 (+any)
stdlib_crypto_curve25519_any_srcs = \
	$(STDLIB)/crypto/curve25519/curve25519.ha

$(HARECACHE)/crypto/curve25519/crypto_curve25519-any.ssa: $(stdlib_crypto_curve25519_any_srcs) $(stdlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/curve25519
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::curve25519 \
		-t$(HARECACHE)/crypto/curve25519/crypto_curve25519.td $(stdlib_crypto_curve25519_any_srcs)

# crypto::ed25519 (+any)
stdlib_crypto_ed25519_any_srcs = \
	$(STDLIB)/crypto/ed25519/ed25519.ha \
	$(STDLIB)/crypto/ed25519/edwards25519.ha

$(HARECACHE)/crypto/ed25519/crypto_ed25519-any.ssa: $(stdlib_crypto_ed25519_any_srcs) $(stdlib_rt) $(stdlib_bytes_$(PLATFORM)) $(stdlib_crypto_sha512_$(PLATFORM)) $(stdlib_hash_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/crypto/ed25519
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ncrypto::ed25519 \
		-t$(HARECACHE)/crypto/ed25519/crypto_ed25519.td $(stdlib_crypto_ed25519_any_srcs)

# datetime (+linux)
stdlib_datetime_linux_srcs = \
	$(STDLIB)/datetime/arithmetic.ha \
	$(STDLIB)/datetime/chronology.ha \
	$(STDLIB)/datetime/date.ha \
	$(STDLIB)/datetime/datetime.ha \
	$(STDLIB)/datetime/format.ha \
	$(STDLIB)/datetime/parse.ha \
	$(STDLIB)/datetime/time.ha \
	$(STDLIB)/datetime/timezone.ha

$(HARECACHE)/datetime/datetime-linux.ssa: $(stdlib_datetime_linux_srcs) $(stdlib_rt) $(stdlib_errors_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_strio_$(PLATFORM)) $(stdlib_time_$(PLATFORM)) $(stdlib_time_chrono_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/datetime
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ndatetime \
		-t$(HARECACHE)/datetime/datetime.td $(stdlib_datetime_linux_srcs)

# datetime (+freebsd)
stdlib_datetime_freebsd_srcs = \
	$(STDLIB)/datetime/arithmetic.ha \
	$(STDLIB)/datetime/chronology.ha \
	$(STDLIB)/datetime/date.ha \
	$(STDLIB)/datetime/datetime.ha \
	$(STDLIB)/datetime/format.ha \
	$(STDLIB)/datetime/parse.ha \
	$(STDLIB)/datetime/time.ha \
	$(STDLIB)/datetime/timezone.ha

$(HARECACHE)/datetime/datetime-freebsd.ssa: $(stdlib_datetime_freebsd_srcs) $(stdlib_rt) $(stdlib_errors_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_strio_$(PLATFORM)) $(stdlib_time_$(PLATFORM)) $(stdlib_time_chrono_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/datetime
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ndatetime \
		-t$(HARECACHE)/datetime/datetime.td $(stdlib_datetime_freebsd_srcs)

# datetime (+openbsd)
stdlib_datetime_openbsd_srcs = \
	$(STDLIB)/datetime/arithmetic.ha \
	$(STDLIB)/datetime/chronology.ha \
	$(STDLIB)/datetime/date.ha \
	$(STDLIB)/datetime/datetime.ha \
	$(STDLIB)/datetime/format.ha \
	$(STDLIB)/datetime/parse.ha \
	$(STDLIB)/datetime/time.ha \
	$(STDLIB)/datetime/timezone.ha

$(HARECACHE)/datetime/datetime-openbsd.ssa: $(stdlib_datetime_openbsd_srcs) $(stdlib_rt) $(stdlib_errors_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_strio_$(PLATFORM)) $(stdlib_time_$(PLATFORM)) $(stdlib_time_chrono_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/datetime
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ndatetime \
		-t$(HARECACHE)/datetime/datetime.td $(stdlib_datetime_openbsd_srcs)

# dirs (+any)
stdlib_dirs_any_srcs = \
	$(STDLIB)/dirs/xdg.ha

$(HARECACHE)/dirs/dirs-any.ssa: $(stdlib_dirs_any_srcs) $(stdlib_rt) $(stdlib_fs_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_path_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/dirs
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ndirs \
		-t$(HARECACHE)/dirs/dirs.td $(stdlib_dirs_any_srcs)

# encoding::base64 (+any)
stdlib_encoding_base64_any_srcs = \
	$(STDLIB)/encoding/base64/base64.ha

$(HARECACHE)/encoding/base64/encoding_base64-any.ssa: $(stdlib_encoding_base64_any_srcs) $(stdlib_rt) $(stdlib_ascii_$(PLATFORM)) $(stdlib_bufio_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/encoding/base64
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nencoding::base64 \
		-t$(HARECACHE)/encoding/base64/encoding_base64.td $(stdlib_encoding_base64_any_srcs)

# encoding::base32 (+any)
stdlib_encoding_base32_any_srcs = \
	$(STDLIB)/encoding/base32/base32.ha

$(HARECACHE)/encoding/base32/encoding_base32-any.ssa: $(stdlib_encoding_base32_any_srcs) $(stdlib_rt) $(stdlib_ascii_$(PLATFORM)) $(stdlib_bufio_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_os_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/encoding/base32
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nencoding::base32 \
		-t$(HARECACHE)/encoding/base32/encoding_base32.td $(stdlib_encoding_base32_any_srcs)

# encoding::hex (+any)
stdlib_encoding_hex_any_srcs = \
	$(STDLIB)/encoding/hex/hex.ha

$(HARECACHE)/encoding/hex/encoding_hex-any.ssa: $(stdlib_encoding_hex_any_srcs) $(stdlib_rt) $(stdlib_ascii_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strconv_$(PLATFORM)) $(stdlib_strio_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/encoding/hex
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nencoding::hex \
		-t$(HARECACHE)/encoding/hex/encoding_hex.td $(stdlib_encoding_hex_any_srcs)

# encoding::utf8 (+any)
stdlib_encoding_utf8_any_srcs = \
	$(STDLIB)/encoding/utf8/decode.ha \
	$(STDLIB)/encoding/utf8/encode.ha \
	$(STDLIB)/encoding/utf8/rune.ha

$(HARECACHE)/encoding/utf8/encoding_utf8-any.ssa: $(stdlib_encoding_utf8_any_srcs) $(stdlib_rt) $(stdlib_types_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/encoding/utf8
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nencoding::utf8 \
		-t$(HARECACHE)/encoding/utf8/encoding_utf8.td $(stdlib_encoding_utf8_any_srcs)

# endian (+any)
stdlib_endian_any_srcs = \
	$(STDLIB)/endian/big.ha \
	$(STDLIB)/endian/network.ha \
	$(STDLIB)/endian/little.ha \
	$(STDLIB)/endian/endian.ha \
	$(STDLIB)/endian/host+$(ARCH).ha

$(HARECACHE)/endian/endian-any.ssa: $(stdlib_endian_any_srcs) $(stdlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/endian
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nendian \
		-t$(HARECACHE)/endian/endian.td $(stdlib_endian_any_srcs)

# errors (+any)
stdlib_errors_any_srcs = \
	$(STDLIB)/errors/common.ha \
	$(STDLIB)/errors/opaque.ha \
	$(STDLIB)/errors/string.ha \
	$(STDLIB)/errors/rt.ha

$(HARECACHE)/errors/errors-any.ssa: $(stdlib_errors_any_srcs) $(stdlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/errors
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nerrors \
		-t$(HARECACHE)/errors/errors.td $(stdlib_errors_any_srcs)

# fmt (+any)
stdlib_fmt_any_srcs = \
	$(STDLIB)/fmt/fmt.ha

$(HARECACHE)/fmt/fmt-any.ssa: $(stdlib_fmt_any_srcs) $(stdlib_rt) $(stdlib_bufio_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_strconv_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_types_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/fmt
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nfmt \
		-t$(HARECACHE)/fmt/fmt.td $(stdlib_fmt_any_srcs)

# fnmatch (+any)
stdlib_fnmatch_any_srcs = \
	$(STDLIB)/fnmatch/fnmatch.ha

$(HARECACHE)/fnmatch/fnmatch-any.ssa: $(stdlib_fnmatch_any_srcs) $(stdlib_rt) $(stdlib_strings_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM)) $(stdlib_sort_$(PLATFORM)) $(stdlib_ascii_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/fnmatch
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nfnmatch \
		-t$(HARECACHE)/fnmatch/fnmatch.td $(stdlib_fnmatch_any_srcs)

# format::elf (+any)
stdlib_format_elf_any_srcs = \
	$(STDLIB)/format/elf/+$(ARCH).ha \
	$(STDLIB)/format/elf/+$(PLATFORM).ha \
	$(STDLIB)/format/elf/types.ha

$(HARECACHE)/format/elf/format_elf-any.ssa: $(stdlib_format_elf_any_srcs) $(stdlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/format/elf
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nformat::elf \
		-t$(HARECACHE)/format/elf/format_elf.td $(stdlib_format_elf_any_srcs)

# format::ini (+any)
stdlib_format_ini_any_srcs = \
	$(STDLIB)/format/ini/scan.ha \
	$(STDLIB)/format/ini/types.ha

$(HARECACHE)/format/ini/format_ini-any.ssa: $(stdlib_format_ini_any_srcs) $(stdlib_rt) $(stdlib_bufio_$(PLATFORM)) $(stdlib_encoding_utf8_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/format/ini
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nformat::ini \
		-t$(HARECACHE)/format/ini/format_ini.td $(stdlib_format_ini_any_srcs)

# fs (+any)
stdlib_fs_any_srcs = \
	$(STDLIB)/fs/types.ha \
	$(STDLIB)/fs/fs.ha \
	$(STDLIB)/fs/util.ha

$(HARECACHE)/fs/fs-any.ssa: $(stdlib_fs_any_srcs) $(stdlib_rt) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_path_$(PLATFORM)) $(stdlib_time_$(PLATFORM)) $(stdlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/fs
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nfs \
		-t$(HARECACHE)/fs/fs.td $(stdlib_fs_any_srcs)

# getopt (+any)
stdlib_getopt_any_srcs = \
	$(STDLIB)/getopt/getopts.ha

$(HARECACHE)/getopt/getopt-any.ssa: $(stdlib_getopt_any_srcs) $(stdlib_rt) $(stdlib_encoding_utf8_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/getopt
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ngetopt \
		-t$(HARECACHE)/getopt/getopt.td $(stdlib_getopt_any_srcs)

# glob (+any)
stdlib_glob_any_srcs = \
	$(STDLIB)/glob/glob.ha

$(HARECACHE)/glob/glob-any.ssa: $(stdlib_glob_any_srcs) $(stdlib_rt) $(stdlib_fnmatch_$(PLATFORM)) $(stdlib_fs_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_sort_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_strio_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/glob
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nglob \
		-t$(HARECACHE)/glob/glob.td $(stdlib_glob_any_srcs)

# hare::ast (+any)
stdlib_hare_ast_any_srcs = \
	$(STDLIB)/hare/ast/decl.ha \
	$(STDLIB)/hare/ast/expr.ha \
	$(STDLIB)/hare/ast/ident.ha \
	$(STDLIB)/hare/ast/import.ha \
	$(STDLIB)/hare/ast/type.ha \
	$(STDLIB)/hare/ast/unit.ha

$(HARECACHE)/hare/ast/hare_ast-any.ssa: $(stdlib_hare_ast_any_srcs) $(stdlib_rt) $(stdlib_hare_lex_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/hare/ast
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nhare::ast \
		-t$(HARECACHE)/hare/ast/hare_ast.td $(stdlib_hare_ast_any_srcs)

# hare::lex (+any)
stdlib_hare_lex_any_srcs = \
	$(STDLIB)/hare/lex/token.ha \
	$(STDLIB)/hare/lex/lex.ha

$(HARECACHE)/hare/lex/hare_lex-any.ssa: $(stdlib_hare_lex_any_srcs) $(stdlib_rt) $(stdlib_io_$(PLATFORM)) $(stdlib_bufio_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_types_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_sort_$(PLATFORM)) $(stdlib_strio_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/hare/lex
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nhare::lex \
		-t$(HARECACHE)/hare/lex/hare_lex.td $(stdlib_hare_lex_any_srcs)

# hare::module (+any)
stdlib_hare_module_any_srcs = \
	$(STDLIB)/hare/module/types.ha \
	$(STDLIB)/hare/module/context.ha \
	$(STDLIB)/hare/module/scan.ha \
	$(STDLIB)/hare/module/manifest.ha \
	$(STDLIB)/hare/module/walk.ha

$(HARECACHE)/hare/module/hare_module-any.ssa: $(stdlib_hare_module_any_srcs) $(stdlib_rt) $(stdlib_hare_ast_$(PLATFORM)) $(stdlib_hare_lex_$(PLATFORM)) $(stdlib_hare_parse_$(PLATFORM)) $(stdlib_hare_unparse_$(PLATFORM)) $(stdlib_strio_$(PLATFORM)) $(stdlib_fs_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_hash_$(PLATFORM)) $(stdlib_crypto_sha256_$(PLATFORM)) $(stdlib_dirs_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM)) $(stdlib_encoding_utf8_$(PLATFORM)) $(stdlib_ascii_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_time_$(PLATFORM)) $(stdlib_slices_$(PLATFORM)) $(stdlib_bufio_$(PLATFORM)) $(stdlib_strconv_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_encoding_hex_$(PLATFORM)) $(stdlib_sort_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_temp_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/hare/module
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nhare::module \
		-t$(HARECACHE)/hare/module/hare_module.td $(stdlib_hare_module_any_srcs)

# hare::parse (+any)
stdlib_hare_parse_any_srcs = \
	$(STDLIB)/hare/parse/decl.ha \
	$(STDLIB)/hare/parse/expr.ha \
	$(STDLIB)/hare/parse/ident.ha \
	$(STDLIB)/hare/parse/import.ha \
	$(STDLIB)/hare/parse/parse.ha \
	$(STDLIB)/hare/parse/type.ha \
	$(STDLIB)/hare/parse/unit.ha

$(HARECACHE)/hare/parse/hare_parse-any.ssa: $(stdlib_hare_parse_any_srcs) $(stdlib_rt) $(stdlib_ascii_$(PLATFORM)) $(stdlib_hare_ast_$(PLATFORM)) $(stdlib_hare_lex_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/hare/parse
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nhare::parse \
		-t$(HARECACHE)/hare/parse/hare_parse.td $(stdlib_hare_parse_any_srcs)

# hare::types (+any)
stdlib_hare_types_any_srcs = \
	$(STDLIB)/hare/types/arch.ha \
	$(STDLIB)/hare/types/builtins.ha \
	$(STDLIB)/hare/types/class.ha \
	$(STDLIB)/hare/types/hash.ha \
	$(STDLIB)/hare/types/lookup.ha \
	$(STDLIB)/hare/types/store.ha \
	$(STDLIB)/hare/types/types.ha

$(HARECACHE)/hare/types/hare_types-any.ssa: $(stdlib_hare_types_any_srcs) $(stdlib_rt) $(stdlib_hare_ast_$(PLATFORM)) $(stdlib_hare_parse_$(PLATFORM)) $(stdlib_hash_$(PLATFORM)) $(stdlib_hash_fnv_$(PLATFORM)) $(stdlib_endian_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/hare/types
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nhare::types \
		-t$(HARECACHE)/hare/types/hare_types.td $(stdlib_hare_types_any_srcs)

# hare::unit (+any)
stdlib_hare_unit_any_srcs = \
	$(STDLIB)/hare/unit/check.ha \
	$(STDLIB)/hare/unit/context.ha \
	$(STDLIB)/hare/unit/errors.ha \
	$(STDLIB)/hare/unit/expr.ha \
	$(STDLIB)/hare/unit/process.ha \
	$(STDLIB)/hare/unit/scan.ha \
	$(STDLIB)/hare/unit/scope.ha \
	$(STDLIB)/hare/unit/unit.ha

$(HARECACHE)/hare/unit/hare_unit-any.ssa: $(stdlib_hare_unit_any_srcs) $(stdlib_rt) $(stdlib_hare_ast_$(PLATFORM)) $(stdlib_hare_types_$(PLATFORM)) $(stdlib_hash_$(PLATFORM)) $(stdlib_hash_fnv_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_hare_lex_$(PLATFORM)) $(stdlib_bufio_$(PLATFORM)) $(stdlib_hare_parse_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/hare/unit
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nhare::unit \
		-t$(HARECACHE)/hare/unit/hare_unit.td $(stdlib_hare_unit_any_srcs)

# hare::unparse (+any)
stdlib_hare_unparse_any_srcs = \
	$(STDLIB)/hare/unparse/expr.ha \
	$(STDLIB)/hare/unparse/decl.ha \
	$(STDLIB)/hare/unparse/ident.ha \
	$(STDLIB)/hare/unparse/import.ha \
	$(STDLIB)/hare/unparse/type.ha \
	$(STDLIB)/hare/unparse/unit.ha \
	$(STDLIB)/hare/unparse/util.ha

$(HARECACHE)/hare/unparse/hare_unparse-any.ssa: $(stdlib_hare_unparse_any_srcs) $(stdlib_rt) $(stdlib_fmt_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_strio_$(PLATFORM)) $(stdlib_hare_ast_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/hare/unparse
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nhare::unparse \
		-t$(HARECACHE)/hare/unparse/hare_unparse.td $(stdlib_hare_unparse_any_srcs)

# hash (+any)
stdlib_hash_any_srcs = \
	$(STDLIB)/hash/hash.ha

$(HARECACHE)/hash/hash-any.ssa: $(stdlib_hash_any_srcs) $(stdlib_rt) $(stdlib_io_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/hash
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nhash \
		-t$(HARECACHE)/hash/hash.td $(stdlib_hash_any_srcs)

# hash::adler32 (+any)
stdlib_hash_adler32_any_srcs = \
	$(STDLIB)/hash/adler32/adler32.ha

$(HARECACHE)/hash/adler32/hash_adler32-any.ssa: $(stdlib_hash_adler32_any_srcs) $(stdlib_rt) $(stdlib_endian_$(PLATFORM)) $(stdlib_hash_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/hash/adler32
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nhash::adler32 \
		-t$(HARECACHE)/hash/adler32/hash_adler32.td $(stdlib_hash_adler32_any_srcs)

# hash::crc16 (+any)
stdlib_hash_crc16_any_srcs = \
	$(STDLIB)/hash/crc16/crc16.ha

$(HARECACHE)/hash/crc16/hash_crc16-any.ssa: $(stdlib_hash_crc16_any_srcs) $(stdlib_rt) $(stdlib_endian_$(PLATFORM)) $(stdlib_hash_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/hash/crc16
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nhash::crc16 \
		-t$(HARECACHE)/hash/crc16/hash_crc16.td $(stdlib_hash_crc16_any_srcs)

# hash::crc32 (+any)
stdlib_hash_crc32_any_srcs = \
	$(STDLIB)/hash/crc32/crc32.ha

$(HARECACHE)/hash/crc32/hash_crc32-any.ssa: $(stdlib_hash_crc32_any_srcs) $(stdlib_rt) $(stdlib_endian_$(PLATFORM)) $(stdlib_hash_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/hash/crc32
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nhash::crc32 \
		-t$(HARECACHE)/hash/crc32/hash_crc32.td $(stdlib_hash_crc32_any_srcs)

# hash::crc64 (+any)
stdlib_hash_crc64_any_srcs = \
	$(STDLIB)/hash/crc64/crc64.ha

$(HARECACHE)/hash/crc64/hash_crc64-any.ssa: $(stdlib_hash_crc64_any_srcs) $(stdlib_rt) $(stdlib_endian_$(PLATFORM)) $(stdlib_hash_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/hash/crc64
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nhash::crc64 \
		-t$(HARECACHE)/hash/crc64/hash_crc64.td $(stdlib_hash_crc64_any_srcs)

# hash::fnv (+any)
stdlib_hash_fnv_any_srcs = \
	$(STDLIB)/hash/fnv/fnv.ha

$(HARECACHE)/hash/fnv/hash_fnv-any.ssa: $(stdlib_hash_fnv_any_srcs) $(stdlib_rt) $(stdlib_hash_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/hash/fnv
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nhash::fnv \
		-t$(HARECACHE)/hash/fnv/hash_fnv.td $(stdlib_hash_fnv_any_srcs)

# io (+linux)
stdlib_io_linux_srcs = \
	$(STDLIB)/io/arch+$(ARCH).ha \
	$(STDLIB)/io/+linux/file.ha \
	$(STDLIB)/io/+linux/mmap.ha \
	$(STDLIB)/io/+linux/vector.ha \
	$(STDLIB)/io/copy.ha \
	$(STDLIB)/io/drain.ha \
	$(STDLIB)/io/empty.ha \
	$(STDLIB)/io/handle.ha \
	$(STDLIB)/io/limit.ha \
	$(STDLIB)/io/stream.ha \
	$(STDLIB)/io/tee.ha \
	$(STDLIB)/io/types.ha \
	$(STDLIB)/io/util.ha

# io (+freebsd)
stdlib_io_freebsd_srcs = \
	$(STDLIB)/io/arch+$(ARCH).ha \
	$(STDLIB)/io/+freebsd/file.ha \
	$(STDLIB)/io/+freebsd/mmap.ha \
	$(STDLIB)/io/+freebsd/vector.ha \
	$(STDLIB)/io/copy.ha \
	$(STDLIB)/io/drain.ha \
	$(STDLIB)/io/empty.ha \
	$(STDLIB)/io/handle.ha \
	$(STDLIB)/io/limit.ha \
	$(STDLIB)/io/stream.ha \
	$(STDLIB)/io/tee.ha \
	$(STDLIB)/io/types.ha \
	$(STDLIB)/io/util.ha

# io (+openbsd)
stdlib_io_openbsd_srcs = \
	$(STDLIB)/io/arch+$(ARCH).ha \
	$(STDLIB)/io/+openbsd/file.ha \
	$(STDLIB)/io/+openbsd/mmap.ha \
	$(STDLIB)/io/+openbsd/vector.ha \
	$(STDLIB)/io/copy.ha \
	$(STDLIB)/io/drain.ha \
	$(STDLIB)/io/empty.ha \
	$(STDLIB)/io/handle.ha \
	$(STDLIB)/io/limit.ha \
	$(STDLIB)/io/stream.ha \
	$(STDLIB)/io/tee.ha \
	$(STDLIB)/io/types.ha \
	$(STDLIB)/io/util.ha

$(HARECACHE)/io/io-linux.ssa: $(stdlib_io_linux_srcs) $(stdlib_rt) $(stdlib_strings_$(PLATFORM)) $(stdlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/io
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nio \
		-t$(HARECACHE)/io/io.td $(stdlib_io_linux_srcs)

$(HARECACHE)/io/io-freebsd.ssa: $(stdlib_io_freebsd_srcs) $(stdlib_rt) $(stdlib_strings_$(PLATFORM)) $(stdlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/io
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nio \
		-t$(HARECACHE)/io/io.td $(stdlib_io_freebsd_srcs)

$(HARECACHE)/io/io-openbsd.ssa: $(stdlib_io_openbsd_srcs) $(stdlib_rt) $(stdlib_strings_$(PLATFORM)) $(stdlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/io
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nio \
		-t$(HARECACHE)/io/io.td $(stdlib_io_openbsd_srcs)

# linux (+linux)
stdlib_linux_linux_srcs = \
	$(STDLIB)/linux/start.ha \
	$(STDLIB)/linux/env.ha

$(HARECACHE)/linux/linux-linux.ssa: $(stdlib_linux_linux_srcs) $(stdlib_rt) $(stdlib_format_elf_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/linux
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nlinux \
		-t$(HARECACHE)/linux/linux.td $(stdlib_linux_linux_srcs)

# linux::keyctl (+linux)
stdlib_linux_keyctl_linux_srcs = \
	$(STDLIB)/linux/keyctl/keyctl.ha \
	$(STDLIB)/linux/keyctl/types.ha

$(HARECACHE)/linux/keyctl/linux_keyctl-linux.ssa: $(stdlib_linux_keyctl_linux_srcs) $(stdlib_rt) $(stdlib_rt_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/linux/keyctl
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nlinux::keyctl \
		-t$(HARECACHE)/linux/keyctl/linux_keyctl.td $(stdlib_linux_keyctl_linux_srcs)

# linux::timerfd (+linux)
stdlib_linux_timerfd_linux_srcs = \
	$(STDLIB)/linux/timerfd/timerfd.ha

$(HARECACHE)/linux/timerfd/linux_timerfd-linux.ssa: $(stdlib_linux_timerfd_linux_srcs) $(stdlib_rt) $(stdlib_errors_$(PLATFORM)) $(stdlib_rt_$(PLATFORM)) $(stdlib_time_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_endian_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/linux/timerfd
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nlinux::timerfd \
		-t$(HARECACHE)/linux/timerfd/linux_timerfd.td $(stdlib_linux_timerfd_linux_srcs)

# linux::vdso (+linux)
stdlib_linux_vdso_linux_srcs = \
	$(STDLIB)/linux/vdso/vdso.ha

$(HARECACHE)/linux/vdso/linux_vdso-linux.ssa: $(stdlib_linux_vdso_linux_srcs) $(stdlib_rt) $(stdlib_linux_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_format_elf_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/linux/vdso
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nlinux::vdso \
		-t$(HARECACHE)/linux/vdso/linux_vdso.td $(stdlib_linux_vdso_linux_srcs)

# log (+linux)
stdlib_log_linux_srcs = \
	$(STDLIB)/log/logger.ha \
	$(STDLIB)/log/global.ha \
	$(STDLIB)/log/funcs.ha

$(HARECACHE)/log/log-linux.ssa: $(stdlib_log_linux_srcs) $(stdlib_rt) $(stdlib_datetime_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/log
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nlog \
		-t$(HARECACHE)/log/log.td $(stdlib_log_linux_srcs)

# log (+freebsd)
stdlib_log_freebsd_srcs = \
	$(STDLIB)/log/logger.ha \
	$(STDLIB)/log/global.ha \
	$(STDLIB)/log/funcs.ha

$(HARECACHE)/log/log-freebsd.ssa: $(stdlib_log_freebsd_srcs) $(stdlib_rt) $(stdlib_datetime_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/log
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nlog \
		-t$(HARECACHE)/log/log.td $(stdlib_log_freebsd_srcs)

# log (+openbsd)
stdlib_log_openbsd_srcs = \
	$(STDLIB)/log/logger.ha \
	$(STDLIB)/log/global.ha \
	$(STDLIB)/log/funcs.ha

$(HARECACHE)/log/log-openbsd.ssa: $(stdlib_log_openbsd_srcs) $(stdlib_rt) $(stdlib_datetime_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/log
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nlog \
		-t$(HARECACHE)/log/log.td $(stdlib_log_openbsd_srcs)

# math (+any)
stdlib_math_any_srcs = \
	$(STDLIB)/math/math.ha \
	$(STDLIB)/math/fenv_func.ha \
	$(STDLIB)/math/fenv+$(ARCH).ha \
	$(STDLIB)/math/floats.ha \
	$(STDLIB)/math/ints.ha \
	$(STDLIB)/math/uints.ha \
	$(STDLIB)/math/trig.ha

$(HARECACHE)/math/math-any.ssa: $(stdlib_math_any_srcs) $(stdlib_rt) $(stdlib_types_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/math
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nmath \
		-t$(HARECACHE)/math/math.td $(stdlib_math_any_srcs)

# math::random (+any)
stdlib_math_random_any_srcs = \
	$(STDLIB)/math/random/random.ha

$(HARECACHE)/math/random/math_random-any.ssa: $(stdlib_math_random_any_srcs) $(stdlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/math/random
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nmath::random \
		-t$(HARECACHE)/math/random/math_random.td $(stdlib_math_random_any_srcs)

# net (+linux)
stdlib_net_linux_srcs = \
	$(STDLIB)/net/+linux.ha \
	$(STDLIB)/net/errors.ha \
	$(STDLIB)/net/msg.ha

$(HARECACHE)/net/net-linux.ssa: $(stdlib_net_linux_srcs) $(stdlib_rt) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_net_ip_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_rt_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/net
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nnet \
		-t$(HARECACHE)/net/net.td $(stdlib_net_linux_srcs)

# net (+freebsd)
stdlib_net_freebsd_srcs = \
	$(STDLIB)/net/+freebsd.ha \
	$(STDLIB)/net/errors.ha \
	$(STDLIB)/net/msg.ha

$(HARECACHE)/net/net-freebsd.ssa: $(stdlib_net_freebsd_srcs) $(stdlib_rt) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_net_ip_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_rt_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/net
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nnet \
		-t$(HARECACHE)/net/net.td $(stdlib_net_freebsd_srcs)

# net (+openbsd)
stdlib_net_openbsd_srcs = \
	$(STDLIB)/net/+openbsd.ha \
	$(STDLIB)/net/errors.ha \
	$(STDLIB)/net/msg.ha

$(HARECACHE)/net/net-openbsd.ssa: $(stdlib_net_openbsd_srcs) $(stdlib_rt) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_net_ip_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_rt_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/net
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nnet \
		-t$(HARECACHE)/net/net.td $(stdlib_net_openbsd_srcs)

# net::dial (+any)
stdlib_net_dial_any_srcs = \
	$(STDLIB)/net/dial/registry.ha \
	$(STDLIB)/net/dial/dial.ha \
	$(STDLIB)/net/dial/ip.ha \
	$(STDLIB)/net/dial/resolve.ha

$(HARECACHE)/net/dial/net_dial-any.ssa: $(stdlib_net_dial_any_srcs) $(stdlib_rt) $(stdlib_io_$(PLATFORM)) $(stdlib_net_$(PLATFORM)) $(stdlib_net_ip_$(PLATFORM)) $(stdlib_net_tcp_$(PLATFORM)) $(stdlib_net_udp_$(PLATFORM)) $(stdlib_net_dns_$(PLATFORM)) $(stdlib_crypto_random_$(PLATFORM)) $(stdlib_strconv_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_unix_hosts_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/net/dial
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nnet::dial \
		-t$(HARECACHE)/net/dial/net_dial.td $(stdlib_net_dial_any_srcs)

# net::dns (+any)
stdlib_net_dns_any_srcs = \
	$(STDLIB)/net/dns/decode.ha \
	$(STDLIB)/net/dns/error.ha \
	$(STDLIB)/net/dns/encode.ha \
	$(STDLIB)/net/dns/query.ha \
	$(STDLIB)/net/dns/types.ha

$(HARECACHE)/net/dns/net_dns-any.ssa: $(stdlib_net_dns_any_srcs) $(stdlib_rt) $(stdlib_ascii_$(PLATFORM)) $(stdlib_endian_$(PLATFORM)) $(stdlib_net_$(PLATFORM)) $(stdlib_net_udp_$(PLATFORM)) $(stdlib_net_ip_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_unix_resolvconf_$(PLATFORM)) $(stdlib_unix_poll_$(PLATFORM)) $(stdlib_rt_$(PLATFORM)) $(stdlib_time_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/net/dns
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nnet::dns \
		-t$(HARECACHE)/net/dns/net_dns.td $(stdlib_net_dns_any_srcs)

# net::ip (+linux)
stdlib_net_ip_linux_srcs = \
	$(STDLIB)/net/ip/+linux.ha \
	$(STDLIB)/net/ip/ip.ha

# net::ip (+freebsd)
stdlib_net_ip_freebsd_srcs = \
	$(STDLIB)/net/ip/+freebsd.ha \
	$(STDLIB)/net/ip/ip.ha

# net::ip (+openbsd)
stdlib_net_ip_openbsd_srcs = \
	$(STDLIB)/net/ip/+openbsd.ha \
	$(STDLIB)/net/ip/ip.ha

$(HARECACHE)/net/ip/net_ip-linux.ssa: $(stdlib_net_ip_linux_srcs) $(stdlib_rt) $(stdlib_bytes_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strconv_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_strio_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/net/ip
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nnet::ip \
		-t$(HARECACHE)/net/ip/net_ip.td $(stdlib_net_ip_linux_srcs)

$(HARECACHE)/net/ip/net_ip-freebsd.ssa: $(stdlib_net_ip_freebsd_srcs) $(stdlib_rt) $(stdlib_bytes_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strconv_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_strio_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/net/ip
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nnet::ip \
		-t$(HARECACHE)/net/ip/net_ip.td $(stdlib_net_ip_freebsd_srcs)

$(HARECACHE)/net/ip/net_ip-openbsd.ssa: $(stdlib_net_ip_openbsd_srcs) $(stdlib_rt) $(stdlib_bytes_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strconv_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_strio_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/net/ip
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nnet::ip \
		-t$(HARECACHE)/net/ip/net_ip.td $(stdlib_net_ip_openbsd_srcs)

# net::tcp (+linux)
stdlib_net_tcp_linux_srcs = \
	$(STDLIB)/net/tcp/+linux.ha \
	$(STDLIB)/net/tcp/listener.ha \
	$(STDLIB)/net/tcp/options.ha

$(HARECACHE)/net/tcp/net_tcp-linux.ssa: $(stdlib_net_tcp_linux_srcs) $(stdlib_rt) $(stdlib_io_$(PLATFORM)) $(stdlib_net_$(PLATFORM)) $(stdlib_net_ip_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_rt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/net/tcp
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nnet::tcp \
		-t$(HARECACHE)/net/tcp/net_tcp.td $(stdlib_net_tcp_linux_srcs)

# net::tcp (+freebsd)
stdlib_net_tcp_freebsd_srcs = \
	$(STDLIB)/net/tcp/+freebsd.ha \
	$(STDLIB)/net/tcp/listener.ha \
	$(STDLIB)/net/tcp/options.ha

$(HARECACHE)/net/tcp/net_tcp-freebsd.ssa: $(stdlib_net_tcp_freebsd_srcs) $(stdlib_rt) $(stdlib_io_$(PLATFORM)) $(stdlib_net_$(PLATFORM)) $(stdlib_net_ip_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_rt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/net/tcp
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nnet::tcp \
		-t$(HARECACHE)/net/tcp/net_tcp.td $(stdlib_net_tcp_freebsd_srcs)

# net::tcp (+openbsd)
stdlib_net_tcp_openbsd_srcs = \
	$(STDLIB)/net/tcp/+openbsd.ha \
	$(STDLIB)/net/tcp/listener.ha \
	$(STDLIB)/net/tcp/options.ha

$(HARECACHE)/net/tcp/net_tcp-openbsd.ssa: $(stdlib_net_tcp_openbsd_srcs) $(stdlib_rt) $(stdlib_io_$(PLATFORM)) $(stdlib_net_$(PLATFORM)) $(stdlib_net_ip_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_rt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/net/tcp
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nnet::tcp \
		-t$(HARECACHE)/net/tcp/net_tcp.td $(stdlib_net_tcp_openbsd_srcs)

# net::udp (+linux)
stdlib_net_udp_linux_srcs = \
	$(STDLIB)/net/udp/+linux.ha \
	$(STDLIB)/net/udp/options.ha

$(HARECACHE)/net/udp/net_udp-linux.ssa: $(stdlib_net_udp_linux_srcs) $(stdlib_rt) $(stdlib_net_$(PLATFORM)) $(stdlib_net_ip_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_rt_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/net/udp
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nnet::udp \
		-t$(HARECACHE)/net/udp/net_udp.td $(stdlib_net_udp_linux_srcs)

# net::udp (+freebsd)
stdlib_net_udp_freebsd_srcs = \
	$(STDLIB)/net/udp/+freebsd.ha \
	$(STDLIB)/net/udp/options.ha

$(HARECACHE)/net/udp/net_udp-freebsd.ssa: $(stdlib_net_udp_freebsd_srcs) $(stdlib_rt) $(stdlib_net_$(PLATFORM)) $(stdlib_net_ip_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_rt_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/net/udp
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nnet::udp \
		-t$(HARECACHE)/net/udp/net_udp.td $(stdlib_net_udp_freebsd_srcs)

# net::udp (+openbsd)
stdlib_net_udp_openbsd_srcs = \
	$(STDLIB)/net/udp/+openbsd.ha \
	$(STDLIB)/net/udp/options.ha

$(HARECACHE)/net/udp/net_udp-openbsd.ssa: $(stdlib_net_udp_openbsd_srcs) $(stdlib_rt) $(stdlib_net_$(PLATFORM)) $(stdlib_net_ip_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_rt_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/net/udp
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nnet::udp \
		-t$(HARECACHE)/net/udp/net_udp.td $(stdlib_net_udp_openbsd_srcs)

# net::unix (+linux)
stdlib_net_unix_linux_srcs = \
	$(STDLIB)/net/unix/+linux.ha \
	$(STDLIB)/net/unix/addr.ha \
	$(STDLIB)/net/unix/cmsg.ha \
	$(STDLIB)/net/unix/dial.ha \
	$(STDLIB)/net/unix/listener.ha \
	$(STDLIB)/net/unix/options.ha \
	$(STDLIB)/net/unix/socketpair.ha

$(HARECACHE)/net/unix/net_unix-linux.ssa: $(stdlib_net_unix_linux_srcs) $(stdlib_rt) $(stdlib_net_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_types_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_net_dial_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/net/unix
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nnet::unix \
		-t$(HARECACHE)/net/unix/net_unix.td $(stdlib_net_unix_linux_srcs)

# net::unix (+freebsd)
stdlib_net_unix_freebsd_srcs = \
	$(STDLIB)/net/unix/+freebsd.ha \
	$(STDLIB)/net/unix/addr.ha \
	$(STDLIB)/net/unix/cmsg.ha \
	$(STDLIB)/net/unix/dial.ha \
	$(STDLIB)/net/unix/listener.ha \
	$(STDLIB)/net/unix/options.ha \
	$(STDLIB)/net/unix/socketpair.ha

$(HARECACHE)/net/unix/net_unix-freebsd.ssa: $(stdlib_net_unix_freebsd_srcs) $(stdlib_rt) $(stdlib_net_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_types_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_net_dial_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/net/unix
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nnet::unix \
		-t$(HARECACHE)/net/unix/net_unix.td $(stdlib_net_unix_freebsd_srcs)

# net::unix (+openbsd)
stdlib_net_unix_openbsd_srcs = \
	$(STDLIB)/net/unix/+openbsd.ha \
	$(STDLIB)/net/unix/addr.ha \
	$(STDLIB)/net/unix/cmsg.ha \
	$(STDLIB)/net/unix/dial.ha \
	$(STDLIB)/net/unix/listener.ha \
	$(STDLIB)/net/unix/options.ha \
	$(STDLIB)/net/unix/socketpair.ha

$(HARECACHE)/net/unix/net_unix-openbsd.ssa: $(stdlib_net_unix_openbsd_srcs) $(stdlib_rt) $(stdlib_net_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_types_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_net_dial_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/net/unix
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nnet::unix \
		-t$(HARECACHE)/net/unix/net_unix.td $(stdlib_net_unix_openbsd_srcs)

# net::uri (+any)
stdlib_net_uri_any_srcs = \
	$(STDLIB)/net/uri/fmt.ha \
	$(STDLIB)/net/uri/parse.ha \
	$(STDLIB)/net/uri/query.ha \
	$(STDLIB)/net/uri/uri.ha

$(HARECACHE)/net/uri/net_uri-any.ssa: $(stdlib_net_uri_any_srcs) $(stdlib_rt) $(stdlib_ascii_$(PLATFORM)) $(stdlib_ip_$(PLATFORM)) $(stdlib_net_ip_$(PLATFORM)) $(stdlib_strconv_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_strio_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/net/uri
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nnet::uri \
		-t$(HARECACHE)/net/uri/net_uri.td $(stdlib_net_uri_any_srcs)

# os (+linux)
stdlib_os_linux_srcs = \
	$(STDLIB)/os/+linux/dirfdfs.ha \
	$(STDLIB)/os/+linux/environ.ha \
	$(STDLIB)/os/+linux/exit.ha \
	$(STDLIB)/os/+linux/fs.ha \
	$(STDLIB)/os/+linux/memory.ha \
	$(STDLIB)/os/+linux/stdfd.ha \
	$(STDLIB)/os/fs.ha

$(HARECACHE)/os/os-linux.ssa: $(stdlib_os_linux_srcs) $(stdlib_rt) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_types_$(PLATFORM)) $(stdlib_fs_$(PLATFORM)) $(stdlib_encoding_utf8_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM)) $(stdlib_bufio_$(PLATFORM)) $(stdlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/os
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nos \
		-t$(HARECACHE)/os/os.td $(stdlib_os_linux_srcs)

# os (+freebsd)
stdlib_os_freebsd_srcs = \
	$(STDLIB)/os/+freebsd/environ.ha \
	$(STDLIB)/os/+freebsd/exit.ha \
	$(STDLIB)/os/+freebsd/dirfdfs.ha \
	$(STDLIB)/os/+freebsd/stdfd.ha \
	$(STDLIB)/os/+freebsd/fs.ha \
	$(STDLIB)/os/fs.ha

$(HARECACHE)/os/os-freebsd.ssa: $(stdlib_os_freebsd_srcs) $(stdlib_rt) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_types_$(PLATFORM)) $(stdlib_fs_$(PLATFORM)) $(stdlib_encoding_utf8_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM)) $(stdlib_bufio_$(PLATFORM)) $(stdlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/os
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nos \
		-t$(HARECACHE)/os/os.td $(stdlib_os_freebsd_srcs)

# os (+openbsd)
stdlib_os_openbsd_srcs = \
	$(STDLIB)/os/+openbsd/environ.ha \
	$(STDLIB)/os/+openbsd/exit.ha \
	$(STDLIB)/os/+openbsd/dirfdfs.ha \
	$(STDLIB)/os/+openbsd/stdfd.ha \
	$(STDLIB)/os/+openbsd/fs.ha \
	$(STDLIB)/os/fs.ha

$(HARECACHE)/os/os-openbsd.ssa: $(stdlib_os_openbsd_srcs) $(stdlib_rt) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_types_$(PLATFORM)) $(stdlib_fs_$(PLATFORM)) $(stdlib_encoding_utf8_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM)) $(stdlib_bufio_$(PLATFORM)) $(stdlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/os
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nos \
		-t$(HARECACHE)/os/os.td $(stdlib_os_openbsd_srcs)

# os::exec (+linux)
stdlib_os_exec_linux_srcs = \
	$(STDLIB)/os/exec/exec+linux.ha \
	$(STDLIB)/os/exec/process+linux.ha \
	$(STDLIB)/os/exec/types.ha \
	$(STDLIB)/os/exec/cmd.ha

$(HARECACHE)/os/exec/os_exec-linux.ssa: $(stdlib_os_exec_linux_srcs) $(stdlib_rt) $(stdlib_os_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM)) $(stdlib_path_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_unix_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/os/exec
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nos::exec \
		-t$(HARECACHE)/os/exec/os_exec.td $(stdlib_os_exec_linux_srcs)

# os::exec (+freebsd)
stdlib_os_exec_freebsd_srcs = \
	$(STDLIB)/os/exec/exec+freebsd.ha \
	$(STDLIB)/os/exec/process+freebsd.ha \
	$(STDLIB)/os/exec/types.ha \
	$(STDLIB)/os/exec/cmd.ha

$(HARECACHE)/os/exec/os_exec-freebsd.ssa: $(stdlib_os_exec_freebsd_srcs) $(stdlib_rt) $(stdlib_os_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM)) $(stdlib_path_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_unix_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/os/exec
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nos::exec \
		-t$(HARECACHE)/os/exec/os_exec.td $(stdlib_os_exec_freebsd_srcs)

# os::exec (+openbsd)
stdlib_os_exec_openbsd_srcs = \
	$(STDLIB)/os/exec/exec+openbsd.ha \
	$(STDLIB)/os/exec/process+openbsd.ha \
	$(STDLIB)/os/exec/types.ha \
	$(STDLIB)/os/exec/cmd.ha

$(HARECACHE)/os/exec/os_exec-openbsd.ssa: $(stdlib_os_exec_openbsd_srcs) $(stdlib_rt) $(stdlib_os_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM)) $(stdlib_path_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_unix_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/os/exec
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nos::exec \
		-t$(HARECACHE)/os/exec/os_exec.td $(stdlib_os_exec_openbsd_srcs)

# path (+any)
stdlib_path_any_srcs = \
	$(STDLIB)/path/+$(PLATFORM).ha \
	$(STDLIB)/path/buffer.ha \
	$(STDLIB)/path/util.ha \
	$(STDLIB)/path/join.ha \
	$(STDLIB)/path/names.ha \
	$(STDLIB)/path/iter.ha

$(HARECACHE)/path/path-any.ssa: $(stdlib_path_any_srcs) $(stdlib_rt) $(stdlib_strings_$(PLATFORM)) $(stdlib_bufio_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM)) $(stdlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/path
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Npath \
		-t$(HARECACHE)/path/path.td $(stdlib_path_any_srcs)

# regex (+any)
stdlib_regex_any_srcs = \
	$(STDLIB)/regex/regex.ha

$(HARECACHE)/regex/regex-any.ssa: $(stdlib_regex_any_srcs) $(stdlib_rt) $(stdlib_encoding_utf8_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_strconv_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/regex
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nregex \
		-t$(HARECACHE)/regex/regex.td $(stdlib_regex_any_srcs)

# shlex (+any)
stdlib_shlex_any_srcs = \
	$(STDLIB)/shlex/escape.ha \
	$(STDLIB)/shlex/split.ha

$(HARECACHE)/shlex/shlex-any.ssa: $(stdlib_shlex_any_srcs) $(stdlib_rt) $(stdlib_ascii_$(PLATFORM)) $(stdlib_bufio_$(PLATFORM)) $(stdlib_encoding_utf8_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_strio_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/shlex
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nshlex \
		-t$(HARECACHE)/shlex/shlex.td $(stdlib_shlex_any_srcs)

# slices (+any)
stdlib_slices_any_srcs = \
	$(STDLIB)/slices/cap.ha \
	$(STDLIB)/slices/reverse.ha \
	$(STDLIB)/slices/trunc.ha \
	$(STDLIB)/slices/void.ha

$(HARECACHE)/slices/slices-any.ssa: $(stdlib_slices_any_srcs) $(stdlib_rt) $(stdlib_types_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/slices
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nslices \
		-t$(HARECACHE)/slices/slices.td $(stdlib_slices_any_srcs)

# sort (+any)
stdlib_sort_any_srcs = \
	$(STDLIB)/sort/bisect.ha \
	$(STDLIB)/sort/search.ha \
	$(STDLIB)/sort/sort.ha \
	$(STDLIB)/sort/types.ha

$(HARECACHE)/sort/sort-any.ssa: $(stdlib_sort_any_srcs) $(stdlib_rt) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/sort
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nsort \
		-t$(HARECACHE)/sort/sort.td $(stdlib_sort_any_srcs)

# strconv (+any)
stdlib_strconv_any_srcs = \
	$(STDLIB)/strconv/types.ha \
	$(STDLIB)/strconv/itos.ha \
	$(STDLIB)/strconv/utos.ha \
	$(STDLIB)/strconv/stou.ha \
	$(STDLIB)/strconv/stoi.ha \
	$(STDLIB)/strconv/numeric.ha \
	$(STDLIB)/strconv/ftos.ha \
	$(STDLIB)/strconv/stof.ha \
	$(STDLIB)/strconv/stof_data.ha

$(HARECACHE)/strconv/strconv-any.ssa: $(stdlib_strconv_any_srcs) $(stdlib_rt) $(stdlib_types_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_ascii_$(PLATFORM)) $(stdlib_math_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/strconv
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nstrconv \
		-t$(HARECACHE)/strconv/strconv.td $(stdlib_strconv_any_srcs)

# strings (+any)
stdlib_strings_any_srcs = \
	$(STDLIB)/strings/cap.ha \
	$(STDLIB)/strings/concat.ha \
	$(STDLIB)/strings/contains.ha \
	$(STDLIB)/strings/cstrings.ha \
	$(STDLIB)/strings/dup.ha \
	$(STDLIB)/strings/iter.ha \
	$(STDLIB)/strings/sub.ha \
	$(STDLIB)/strings/suffix.ha \
	$(STDLIB)/strings/tokenize.ha \
	$(STDLIB)/strings/utf8.ha \
	$(STDLIB)/strings/index.ha \
	$(STDLIB)/strings/trim.ha \
	$(STDLIB)/strings/compare.ha \
	$(STDLIB)/strings/pad.ha \
	$(STDLIB)/strings/replace.ha

$(HARECACHE)/strings/strings-any.ssa: $(stdlib_strings_any_srcs) $(stdlib_rt) $(stdlib_bytes_$(PLATFORM)) $(stdlib_encoding_utf8_$(PLATFORM)) $(stdlib_types_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/strings
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nstrings \
		-t$(HARECACHE)/strings/strings.td $(stdlib_strings_any_srcs)

# strio (+any)
stdlib_strio_any_srcs = \
	$(STDLIB)/strio/stream.ha \
	$(STDLIB)/strio/ops.ha

$(HARECACHE)/strio/strio-any.ssa: $(stdlib_strio_any_srcs) $(stdlib_rt) $(stdlib_io_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_slices_$(PLATFORM)) $(stdlib_encoding_utf8_$(PLATFORM)) $(stdlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/strio
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nstrio \
		-t$(HARECACHE)/strio/strio.td $(stdlib_strio_any_srcs)

# temp (+linux)
stdlib_temp_linux_srcs = \
	$(STDLIB)/temp/+linux.ha

$(HARECACHE)/temp/temp-linux.ssa: $(stdlib_temp_linux_srcs) $(stdlib_rt) $(stdlib_crypto_random_$(PLATFORM)) $(stdlib_encoding_hex_$(PLATFORM)) $(stdlib_fs_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_path_$(PLATFORM)) $(stdlib_strio_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/temp
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ntemp \
		-t$(HARECACHE)/temp/temp.td $(stdlib_temp_linux_srcs)

# temp (+freebsd)
stdlib_temp_freebsd_srcs = \
	$(STDLIB)/temp/+freebsd.ha

$(HARECACHE)/temp/temp-freebsd.ssa: $(stdlib_temp_freebsd_srcs) $(stdlib_rt) $(stdlib_crypto_random_$(PLATFORM)) $(stdlib_encoding_hex_$(PLATFORM)) $(stdlib_fs_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_path_$(PLATFORM)) $(stdlib_strio_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/temp
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ntemp \
		-t$(HARECACHE)/temp/temp.td $(stdlib_temp_freebsd_srcs)

# temp (+openbsd)
stdlib_temp_openbsd_srcs = \
	$(STDLIB)/temp/+openbsd.ha

$(HARECACHE)/temp/temp-openbsd.ssa: $(stdlib_temp_openbsd_srcs) $(stdlib_rt) $(stdlib_crypto_random_$(PLATFORM)) $(stdlib_encoding_hex_$(PLATFORM)) $(stdlib_fs_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_path_$(PLATFORM)) $(stdlib_strio_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/temp
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ntemp \
		-t$(HARECACHE)/temp/temp.td $(stdlib_temp_openbsd_srcs)

# time (+linux)
stdlib_time_linux_srcs = \
	$(STDLIB)/time/+linux/functions.ha \
	$(STDLIB)/time/+linux/+$(ARCH).ha \
	$(STDLIB)/time/arithm.ha \
	$(STDLIB)/time/conv.ha \
	$(STDLIB)/time/types.ha

$(HARECACHE)/time/time-linux.ssa: $(stdlib_time_linux_srcs) $(stdlib_rt) $(stdlib_linux_vdso_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/time
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ntime \
		-t$(HARECACHE)/time/time.td $(stdlib_time_linux_srcs)

# time (+freebsd)
stdlib_time_freebsd_srcs = \
	$(STDLIB)/time/+freebsd/functions.ha \
	$(STDLIB)/time/arithm.ha \
	$(STDLIB)/time/conv.ha \
	$(STDLIB)/time/types.ha

$(HARECACHE)/time/time-freebsd.ssa: $(stdlib_time_freebsd_srcs) $(stdlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/time
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ntime \
		-t$(HARECACHE)/time/time.td $(stdlib_time_freebsd_srcs)

# time (+openbsd)
stdlib_time_openbsd_srcs = \
	$(STDLIB)/time/+openbsd/functions.ha \
	$(STDLIB)/time/arithm.ha \
	$(STDLIB)/time/conv.ha \
	$(STDLIB)/time/types.ha

$(HARECACHE)/time/time-openbsd.ssa: $(stdlib_time_openbsd_srcs) $(stdlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/time
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ntime \
		-t$(HARECACHE)/time/time.td $(stdlib_time_openbsd_srcs)

# time::chrono (+linux)
stdlib_time_chrono_linux_srcs = \
	$(STDLIB)/time/chrono/+linux.ha \
	$(STDLIB)/time/chrono/chronology.ha \
	$(STDLIB)/time/chrono/leapsec.ha \
	$(STDLIB)/time/chrono/timescale.ha \
	$(STDLIB)/time/chrono/timezone.ha \
	$(STDLIB)/time/chrono/tzdb.ha

$(HARECACHE)/time/chrono/time_chrono-linux.ssa: $(stdlib_time_chrono_linux_srcs) $(stdlib_rt) $(stdlib_bufio_$(PLATFORM)) $(stdlib_endian_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_fs_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_strconv_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_time_$(PLATFORM)) $(stdlib_path_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/time/chrono
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ntime::chrono \
		-t$(HARECACHE)/time/chrono/time_chrono.td $(stdlib_time_chrono_linux_srcs)

# time::chrono (+freebsd)
stdlib_time_chrono_freebsd_srcs = \
	$(STDLIB)/time/chrono/+freebsd.ha \
	$(STDLIB)/time/chrono/chronology.ha \
	$(STDLIB)/time/chrono/leapsec.ha \
	$(STDLIB)/time/chrono/timescale.ha \
	$(STDLIB)/time/chrono/timezone.ha \
	$(STDLIB)/time/chrono/tzdb.ha

$(HARECACHE)/time/chrono/time_chrono-freebsd.ssa: $(stdlib_time_chrono_freebsd_srcs) $(stdlib_rt) $(stdlib_bufio_$(PLATFORM)) $(stdlib_endian_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_fs_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_strconv_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_time_$(PLATFORM)) $(stdlib_path_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/time/chrono
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ntime::chrono \
		-t$(HARECACHE)/time/chrono/time_chrono.td $(stdlib_time_chrono_freebsd_srcs)

# time::chrono (+openbsd)
stdlib_time_chrono_openbsd_srcs = \
	$(STDLIB)/time/chrono/+openbsd.ha \
	$(STDLIB)/time/chrono/chronology.ha \
	$(STDLIB)/time/chrono/leapsec.ha \
	$(STDLIB)/time/chrono/timescale.ha \
	$(STDLIB)/time/chrono/timezone.ha \
	$(STDLIB)/time/chrono/tzdb.ha

$(HARECACHE)/time/chrono/time_chrono-openbsd.ssa: $(stdlib_time_chrono_openbsd_srcs) $(stdlib_rt) $(stdlib_bufio_$(PLATFORM)) $(stdlib_endian_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_fs_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_strconv_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_time_$(PLATFORM)) $(stdlib_path_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/time/chrono
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ntime::chrono \
		-t$(HARECACHE)/time/chrono/time_chrono.td $(stdlib_time_chrono_openbsd_srcs)

# types (+any)
stdlib_types_any_srcs = \
	$(STDLIB)/types/limits.ha \
	$(STDLIB)/types/classes.ha \
	$(STDLIB)/types/arch+$(ARCH).ha

$(HARECACHE)/types/types-any.ssa: $(stdlib_types_any_srcs) $(stdlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/types
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Ntypes \
		-t$(HARECACHE)/types/types.td $(stdlib_types_any_srcs)

# unix (+linux)
stdlib_unix_linux_srcs = \
	$(STDLIB)/unix/+linux/nice.ha \
	$(STDLIB)/unix/+linux/pipe.ha \
	$(STDLIB)/unix/+linux/umask.ha \
	$(STDLIB)/unix/getuid.ha \
	$(STDLIB)/unix/setuid.ha

$(HARECACHE)/unix/unix-linux.ssa: $(stdlib_unix_linux_srcs) $(stdlib_rt) $(stdlib_errors_$(PLATFORM)) $(stdlib_fs_$(PLATFORM)) $(stdlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/unix
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nunix \
		-t$(HARECACHE)/unix/unix.td $(stdlib_unix_linux_srcs)

# unix (+freebsd)
stdlib_unix_freebsd_srcs = \
	$(STDLIB)/unix/+freebsd/nice.ha \
	$(STDLIB)/unix/+freebsd/pipe.ha \
	$(STDLIB)/unix/+freebsd/umask.ha \
	$(STDLIB)/unix/getuid.ha \
	$(STDLIB)/unix/setuid.ha

$(HARECACHE)/unix/unix-freebsd.ssa: $(stdlib_unix_freebsd_srcs) $(stdlib_rt) $(stdlib_errors_$(PLATFORM)) $(stdlib_fs_$(PLATFORM)) $(stdlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/unix
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nunix \
		-t$(HARECACHE)/unix/unix.td $(stdlib_unix_freebsd_srcs)

# unix (+openbsd)
stdlib_unix_openbsd_srcs = \
	$(STDLIB)/unix/+openbsd/nice.ha \
	$(STDLIB)/unix/+openbsd/pipe.ha \
	$(STDLIB)/unix/+openbsd/umask.ha \
	$(STDLIB)/unix/getuid.ha \
	$(STDLIB)/unix/setuid.ha

$(HARECACHE)/unix/unix-openbsd.ssa: $(stdlib_unix_openbsd_srcs) $(stdlib_rt) $(stdlib_errors_$(PLATFORM)) $(stdlib_fs_$(PLATFORM)) $(stdlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/unix
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nunix \
		-t$(HARECACHE)/unix/unix.td $(stdlib_unix_openbsd_srcs)

# unix::hosts (+linux)
stdlib_unix_hosts_linux_srcs = \
	$(STDLIB)/unix/hosts/+linux.ha \
	$(STDLIB)/unix/hosts/lookup.ha

$(HARECACHE)/unix/hosts/unix_hosts-linux.ssa: $(stdlib_unix_hosts_linux_srcs) $(stdlib_rt) $(stdlib_os_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_bufio_$(PLATFORM)) $(stdlib_net_ip_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/unix/hosts
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nunix::hosts \
		-t$(HARECACHE)/unix/hosts/unix_hosts.td $(stdlib_unix_hosts_linux_srcs)

# unix::hosts (+freebsd)
stdlib_unix_hosts_freebsd_srcs = \
	$(STDLIB)/unix/hosts/+freebsd.ha \
	$(STDLIB)/unix/hosts/lookup.ha

$(HARECACHE)/unix/hosts/unix_hosts-freebsd.ssa: $(stdlib_unix_hosts_freebsd_srcs) $(stdlib_rt) $(stdlib_os_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_bufio_$(PLATFORM)) $(stdlib_net_ip_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/unix/hosts
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nunix::hosts \
		-t$(HARECACHE)/unix/hosts/unix_hosts.td $(stdlib_unix_hosts_freebsd_srcs)

# unix::hosts (+openbsd)
stdlib_unix_hosts_openbsd_srcs = \
	$(STDLIB)/unix/hosts/+openbsd.ha \
	$(STDLIB)/unix/hosts/lookup.ha

$(HARECACHE)/unix/hosts/unix_hosts-openbsd.ssa: $(stdlib_unix_hosts_openbsd_srcs) $(stdlib_rt) $(stdlib_os_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_bufio_$(PLATFORM)) $(stdlib_net_ip_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/unix/hosts
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nunix::hosts \
		-t$(HARECACHE)/unix/hosts/unix_hosts.td $(stdlib_unix_hosts_openbsd_srcs)

# unix::passwd (+any)
stdlib_unix_passwd_any_srcs = \
	$(STDLIB)/unix/passwd/group.ha \
	$(STDLIB)/unix/passwd/passwd.ha \
	$(STDLIB)/unix/passwd/types.ha

$(HARECACHE)/unix/passwd/unix_passwd-any.ssa: $(stdlib_unix_passwd_any_srcs) $(stdlib_rt) $(stdlib_bufio_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM)) $(stdlib_strconv_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/unix/passwd
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nunix::passwd \
		-t$(HARECACHE)/unix/passwd/unix_passwd.td $(stdlib_unix_passwd_any_srcs)

# unix::poll (+linux)
stdlib_unix_poll_linux_srcs = \
	$(STDLIB)/unix/poll/+linux.ha

$(HARECACHE)/unix/poll/unix_poll-linux.ssa: $(stdlib_unix_poll_linux_srcs) $(stdlib_rt) $(stdlib_rt_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_time_$(PLATFORM)) $(stdlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/unix/poll
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nunix::poll \
		-t$(HARECACHE)/unix/poll/unix_poll.td $(stdlib_unix_poll_linux_srcs)

# unix::poll (+freebsd)
stdlib_unix_poll_freebsd_srcs = \
	$(STDLIB)/unix/poll/+freebsd.ha

$(HARECACHE)/unix/poll/unix_poll-freebsd.ssa: $(stdlib_unix_poll_freebsd_srcs) $(stdlib_rt) $(stdlib_rt_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_time_$(PLATFORM)) $(stdlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/unix/poll
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nunix::poll \
		-t$(HARECACHE)/unix/poll/unix_poll.td $(stdlib_unix_poll_freebsd_srcs)

# unix::poll (+openbsd)
stdlib_unix_poll_openbsd_srcs = \
	$(STDLIB)/unix/poll/+openbsd.ha

$(HARECACHE)/unix/poll/unix_poll-openbsd.ssa: $(stdlib_unix_poll_openbsd_srcs) $(stdlib_rt) $(stdlib_rt_$(PLATFORM)) $(stdlib_errors_$(PLATFORM)) $(stdlib_time_$(PLATFORM)) $(stdlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/unix/poll
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nunix::poll \
		-t$(HARECACHE)/unix/poll/unix_poll.td $(stdlib_unix_poll_openbsd_srcs)

# unix::resolvconf (+linux)
stdlib_unix_resolvconf_linux_srcs = \
	$(STDLIB)/unix/resolvconf/+linux.ha \
	$(STDLIB)/unix/resolvconf/load.ha

$(HARECACHE)/unix/resolvconf/unix_resolvconf-linux.ssa: $(stdlib_unix_resolvconf_linux_srcs) $(stdlib_rt) $(stdlib_os_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_bufio_$(PLATFORM)) $(stdlib_net_ip_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/unix/resolvconf
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nunix::resolvconf \
		-t$(HARECACHE)/unix/resolvconf/unix_resolvconf.td $(stdlib_unix_resolvconf_linux_srcs)

# unix::resolvconf (+freebsd)
stdlib_unix_resolvconf_freebsd_srcs = \
	$(STDLIB)/unix/resolvconf/+freebsd.ha \
	$(STDLIB)/unix/resolvconf/load.ha

$(HARECACHE)/unix/resolvconf/unix_resolvconf-freebsd.ssa: $(stdlib_unix_resolvconf_freebsd_srcs) $(stdlib_rt) $(stdlib_os_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_bufio_$(PLATFORM)) $(stdlib_net_ip_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/unix/resolvconf
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nunix::resolvconf \
		-t$(HARECACHE)/unix/resolvconf/unix_resolvconf.td $(stdlib_unix_resolvconf_freebsd_srcs)

# unix::resolvconf (+openbsd)
stdlib_unix_resolvconf_openbsd_srcs = \
	$(STDLIB)/unix/resolvconf/+openbsd.ha \
	$(STDLIB)/unix/resolvconf/load.ha

$(HARECACHE)/unix/resolvconf/unix_resolvconf-openbsd.ssa: $(stdlib_unix_resolvconf_openbsd_srcs) $(stdlib_rt) $(stdlib_os_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_bufio_$(PLATFORM)) $(stdlib_net_ip_$(PLATFORM)) $(stdlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/unix/resolvconf
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nunix::resolvconf \
		-t$(HARECACHE)/unix/resolvconf/unix_resolvconf.td $(stdlib_unix_resolvconf_openbsd_srcs)

# unix::signal (+linux)
stdlib_unix_signal_linux_srcs = \
	$(STDLIB)/unix/signal/types.ha \
	$(STDLIB)/unix/signal/+linux.ha

$(HARECACHE)/unix/signal/unix_signal-linux.ssa: $(stdlib_unix_signal_linux_srcs) $(stdlib_rt) $(stdlib_io_$(PLATFORM)) $(stdlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/unix/signal
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nunix::signal \
		-t$(HARECACHE)/unix/signal/unix_signal.td $(stdlib_unix_signal_linux_srcs)

# unix::tty (+linux)
stdlib_unix_tty_linux_srcs = \
	$(STDLIB)/unix/tty/types.ha \
	$(STDLIB)/unix/tty/+linux/isatty.ha \
	$(STDLIB)/unix/tty/+linux/open.ha \
	$(STDLIB)/unix/tty/+linux/termios.ha \
	$(STDLIB)/unix/tty/+linux/winsize.ha

$(HARECACHE)/unix/tty/unix_tty-linux.ssa: $(stdlib_unix_tty_linux_srcs) $(stdlib_rt) $(stdlib_rt_$(PLATFORM)) $(stdlib_fs_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/unix/tty
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nunix::tty \
		-t$(HARECACHE)/unix/tty/unix_tty.td $(stdlib_unix_tty_linux_srcs)

# unix::tty (+freebsd)
stdlib_unix_tty_freebsd_srcs = \
	$(STDLIB)/unix/tty/types.ha \
	$(STDLIB)/unix/tty/+freebsd/isatty.ha \
	$(STDLIB)/unix/tty/+freebsd/open.ha \
	$(STDLIB)/unix/tty/+freebsd/winsize.ha

$(HARECACHE)/unix/tty/unix_tty-freebsd.ssa: $(stdlib_unix_tty_freebsd_srcs) $(stdlib_rt) $(stdlib_rt_$(PLATFORM)) $(stdlib_fs_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/unix/tty
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nunix::tty \
		-t$(HARECACHE)/unix/tty/unix_tty.td $(stdlib_unix_tty_freebsd_srcs)

# unix::tty (+openbsd)
stdlib_unix_tty_openbsd_srcs = \
	$(STDLIB)/unix/tty/types.ha \
	$(STDLIB)/unix/tty/+openbsd/isatty.ha \
	$(STDLIB)/unix/tty/+openbsd/open.ha \
	$(STDLIB)/unix/tty/+openbsd/winsize.ha

$(HARECACHE)/unix/tty/unix_tty-openbsd.ssa: $(stdlib_unix_tty_openbsd_srcs) $(stdlib_rt) $(stdlib_rt_$(PLATFORM)) $(stdlib_fs_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_os_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/unix/tty
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nunix::tty \
		-t$(HARECACHE)/unix/tty/unix_tty.td $(stdlib_unix_tty_openbsd_srcs)

# uuid (+any)
stdlib_uuid_any_srcs = \
	$(STDLIB)/uuid/uuid.ha

$(HARECACHE)/uuid/uuid-any.ssa: $(stdlib_uuid_any_srcs) $(stdlib_rt) $(stdlib_crypto_random_$(PLATFORM)) $(stdlib_strio_$(PLATFORM)) $(stdlib_fmt_$(PLATFORM)) $(stdlib_endian_$(PLATFORM)) $(stdlib_io_$(PLATFORM)) $(stdlib_bytes_$(PLATFORM)) $(stdlib_bufio_$(PLATFORM)) $(stdlib_strings_$(PLATFORM)) $(stdlib_strconv_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(HARECACHE)/uuid
	@HARECACHE=$(HARECACHE) $(HAREC) $(HAREFLAGS) -o $@ -Nuuid \
		-t$(HARECACHE)/uuid/uuid.td $(stdlib_uuid_any_srcs)

# rt (+linux)
testlib_rt_linux_srcs = \
	$(STDLIB)/rt/+linux/abort.ha \
	$(STDLIB)/rt/+linux/env.ha \
	$(STDLIB)/rt/+linux/errno.ha \
	$(STDLIB)/rt/+linux/types.ha \
	$(STDLIB)/rt/+linux/segmalloc.ha \
	$(STDLIB)/rt/+linux/platformstart.ha \
	$(STDLIB)/rt/+linux/prctl.ha \
	$(STDLIB)/rt/+linux/+$(ARCH).ha \
	$(STDLIB)/rt/+linux/syscallno+$(ARCH).ha \
	$(STDLIB)/rt/+linux/syscalls.ha \
	$(STDLIB)/rt/+linux/signal.ha \
	$(STDLIB)/rt/+linux/stat.ha \
	$(STDLIB)/rt/+linux/socket.ha \
	$(STDLIB)/rt/+$(ARCH)/jmp.ha \
	$(STDLIB)/rt/+$(ARCH)/backtrace.ha \
	$(STDLIB)/rt/fenv_defs.ha \
	$(STDLIB)/rt/+$(ARCH)/cpuid.ha \
	$(STDLIB)/rt/ensure.ha \
	$(STDLIB)/rt/jmp.ha \
	$(STDLIB)/rt/malloc.ha \
	$(STDLIB)/rt/memcpy.ha \
	$(STDLIB)/rt/memmove.ha \
	$(STDLIB)/rt/memset.ha \
	$(STDLIB)/rt/strcmp.ha \
	$(STDLIB)/rt/start+test.ha \
	$(STDLIB)/rt/abort+test.ha \
	$(STDLIB)/rt/+test/+$(PLATFORM).ha \
	$(STDLIB)/rt/+test/cstring.ha \
	$(STDLIB)/rt/+test/run.ha \
	$(STDLIB)/rt/+test/ztos.ha

# rt (+freebsd)
testlib_rt_freebsd_srcs = \
	$(STDLIB)/rt/+freebsd/abort.ha \
	$(STDLIB)/rt/+freebsd/env.ha \
	$(STDLIB)/rt/+freebsd/errno.ha \
	$(STDLIB)/rt/+freebsd/platformstart.ha \
	$(STDLIB)/rt/+freebsd/segmalloc.ha \
	$(STDLIB)/rt/+freebsd/signal.ha \
	$(STDLIB)/rt/+freebsd/socket.ha \
	$(STDLIB)/rt/+freebsd/syscallno.ha \
	$(STDLIB)/rt/+freebsd/syscalls.ha \
	$(STDLIB)/rt/+freebsd/types.ha \
	$(STDLIB)/rt/+$(ARCH)/jmp.ha \
	$(STDLIB)/rt/+$(ARCH)/backtrace.ha \
	$(STDLIB)/rt/fenv_defs.ha \
	$(STDLIB)/rt/+$(ARCH)/cpuid.ha \
	$(STDLIB)/rt/ensure.ha \
	$(STDLIB)/rt/jmp.ha \
	$(STDLIB)/rt/malloc.ha \
	$(STDLIB)/rt/memcpy.ha \
	$(STDLIB)/rt/memmove.ha \
	$(STDLIB)/rt/memset.ha \
	$(STDLIB)/rt/strcmp.ha \
	$(STDLIB)/rt/start+test.ha \
	$(STDLIB)/rt/abort+test.ha \
	$(STDLIB)/rt/+test/+$(PLATFORM).ha \
	$(STDLIB)/rt/+test/cstring.ha \
	$(STDLIB)/rt/+test/run.ha \
	$(STDLIB)/rt/+test/ztos.ha

# rt (+openbsd)
testlib_rt_openbsd_srcs = \
	$(STDLIB)/rt/+openbsd/abort.ha \
	$(STDLIB)/rt/+openbsd/env.ha \
	$(STDLIB)/rt/+openbsd/errno.ha \
	$(STDLIB)/rt/+openbsd/platformstart.ha \
	$(STDLIB)/rt/+openbsd/segmalloc.ha \
	$(STDLIB)/rt/+openbsd/signal.ha \
	$(STDLIB)/rt/+openbsd/socket.ha \
	$(STDLIB)/rt/+openbsd/syscallno.ha \
	$(STDLIB)/rt/+openbsd/syscalls.ha \
	$(STDLIB)/rt/+openbsd/types.ha \
	$(STDLIB)/rt/+$(ARCH)/jmp.ha \
	$(STDLIB)/rt/+$(ARCH)/backtrace.ha \
	$(STDLIB)/rt/fenv_defs.ha \
	$(STDLIB)/rt/+$(ARCH)/cpuid.ha \
	$(STDLIB)/rt/ensure.ha \
	$(STDLIB)/rt/jmp.ha \
	$(STDLIB)/rt/malloc.ha \
	$(STDLIB)/rt/memcpy.ha \
	$(STDLIB)/rt/memmove.ha \
	$(STDLIB)/rt/memset.ha \
	$(STDLIB)/rt/strcmp.ha \
	$(STDLIB)/rt/start+test.ha \
	$(STDLIB)/rt/abort+test.ha \
	$(STDLIB)/rt/+test/+$(PLATFORM).ha \
	$(STDLIB)/rt/+test/cstring.ha \
	$(STDLIB)/rt/+test/run.ha \
	$(STDLIB)/rt/+test/ztos.ha

$(TESTCACHE)/rt/rt-linux.ssa: $(testlib_rt_linux_srcs) $(testlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/rt
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nrt \
		-t$(TESTCACHE)/rt/rt.td $(testlib_rt_linux_srcs)

$(TESTCACHE)/rt/rt-freebsd.ssa: $(testlib_rt_freebsd_srcs) $(testlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/rt
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nrt \
		-t$(TESTCACHE)/rt/rt.td $(testlib_rt_freebsd_srcs)

$(TESTCACHE)/rt/rt-openbsd.ssa: $(testlib_rt_openbsd_srcs) $(testlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/rt
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nrt \
		-t$(TESTCACHE)/rt/rt.td $(testlib_rt_openbsd_srcs)

$(TESTCACHE)/rt/start.o: $(STDLIB)/rt/+$(PLATFORM)/start+$(ARCH)-libc.s
	@printf 'AS \t$@\n'
	@mkdir -p $(TESTCACHE)/rt
	@$(AS) -o $@ $(STDLIB)/rt/+$(PLATFORM)/start+$(ARCH)-libc.s

testlib_asm = $(TESTCACHE)/rt/syscall.o \
	$(TESTCACHE)/rt/setjmp.o \
	$(TESTCACHE)/rt/longjmp.o \
	$(TESTCACHE)/rt/restore.o \
	$(TESTCACHE)/rt/getfp.o \
	$(TESTCACHE)/rt/fenv.o \
	$(TESTCACHE)/rt/start.o \
	$(TESTCACHE)/rt/cpuid_native.o

$(TESTCACHE)/rt/syscall.o: $(STDLIB)/rt/+$(PLATFORM)/syscall+$(ARCH).s
	@printf 'AS \t$@\n'
	@mkdir -p $(TESTCACHE)/rt
	@$(AS) -o $@ $(STDLIB)/rt/+$(PLATFORM)/syscall+$(ARCH).s

$(TESTCACHE)/rt/setjmp.o: $(STDLIB)/rt/+$(ARCH)/setjmp.s
	@printf 'AS \t$@\n'
	@mkdir -p $(TESTCACHE)/rt
	@$(AS) -o $@ $(STDLIB)/rt/+$(ARCH)/setjmp.s

$(TESTCACHE)/rt/longjmp.o: $(STDLIB)/rt/+$(ARCH)/longjmp.s
	@printf 'AS \t$@\n'
	@mkdir -p $(TESTCACHE)/rt
	@$(AS) -o $@ $(STDLIB)/rt/+$(ARCH)/longjmp.s

$(TESTCACHE)/rt/restore.o: $(STDLIB)/rt/+$(ARCH)/restore.s
	@printf 'AS \t$@\n'
	@mkdir -p $(TESTCACHE)/rt
	@$(AS) -o $@ $(STDLIB)/rt/+$(ARCH)/restore.s

$(TESTCACHE)/rt/fenv.o: $(STDLIB)/rt/+$(ARCH)/fenv.s
	@printf 'AS \t$@\n'
	@mkdir -p $(TESTCACHE)/rt
	@$(AS) -o $@ $(STDLIB)/rt/+$(ARCH)/fenv.s

$(TESTCACHE)/rt/getfp.o: $(STDLIB)/rt/+$(ARCH)/getfp.s
	@printf 'AS \t$@\n'
	@mkdir -p $(TESTCACHE)/rt
	@$(AS) -o $@ $(STDLIB)/rt/+$(ARCH)/getfp.s

$(TESTCACHE)/rt/cpuid_native.o: $(STDLIB)/rt/+$(ARCH)/cpuid_native.s
	@printf 'AS \t$@\n'
	@mkdir -p $(TESTCACHE)/rt
	@$(AS) -o $@ $(STDLIB)/rt/+$(ARCH)/cpuid_native.s

$(TESTCACHE)/rt/rt-linux.a: $(TESTCACHE)/rt/rt-linux.o $(testlib_asm)
	@printf 'AR\t$@\n'
	@$(AR) -csr $@ $(TESTCACHE)/rt/rt-linux.o $(testlib_asm)

$(TESTCACHE)/rt/rt-freebsd.a: $(TESTCACHE)/rt/rt-freebsd.o $(testlib_asm)
	@printf 'AR\t$@\n'
	@$(AR) -csr $@ $(TESTCACHE)/rt/rt-freebsd.o $(testlib_asm)

$(TESTCACHE)/rt/rt-openbsd.a: $(TESTCACHE)/rt/rt-openbsd.o $(testlib_asm)
	@printf 'AR\t$@\n'
	@$(AR) -csr $@ $(TESTCACHE)/rt/rt-openbsd.o $(testlib_asm)

testlib_rt = $(TESTCACHE)/rt/rt-$(PLATFORM).a
testlib_deps_linux += $(testlib_rt)
testlib_deps_freebsd += $(testlib_rt)
testlib_deps_openbsd += $(testlib_rt)
testlib_deps_any += $(testlib_rt)

# gen_lib ascii (any)
testlib_ascii_any = $(TESTCACHE)/ascii/ascii-any.o
testlib_deps_any += $(testlib_ascii_any)
testlib_ascii_linux = $(testlib_ascii_any)
testlib_ascii_freebsd = $(testlib_ascii_any)
testlib_ascii_openbsd = $(testlib_ascii_any)

# gen_lib bufio (any)
testlib_bufio_any = $(TESTCACHE)/bufio/bufio-any.o
testlib_deps_any += $(testlib_bufio_any)
testlib_bufio_linux = $(testlib_bufio_any)
testlib_bufio_freebsd = $(testlib_bufio_any)
testlib_bufio_openbsd = $(testlib_bufio_any)

# gen_lib bytes (any)
testlib_bytes_any = $(TESTCACHE)/bytes/bytes-any.o
testlib_deps_any += $(testlib_bytes_any)
testlib_bytes_linux = $(testlib_bytes_any)
testlib_bytes_freebsd = $(testlib_bytes_any)
testlib_bytes_openbsd = $(testlib_bytes_any)

# gen_lib crypto (any)
testlib_crypto_any = $(TESTCACHE)/crypto/crypto-any.o
testlib_deps_any += $(testlib_crypto_any)
testlib_crypto_linux = $(testlib_crypto_any)
testlib_crypto_freebsd = $(testlib_crypto_any)
testlib_crypto_openbsd = $(testlib_crypto_any)

# gen_lib crypto::aes (any)
testlib_crypto_aes_any = $(TESTCACHE)/crypto/aes/crypto_aes-any.o
testlib_deps_any += $(testlib_crypto_aes_any)
testlib_crypto_aes_linux = $(testlib_crypto_aes_any)
testlib_crypto_aes_freebsd = $(testlib_crypto_aes_any)
testlib_crypto_aes_openbsd = $(testlib_crypto_aes_any)

# gen_lib crypto::aes::xts (any)
testlib_crypto_aes_xts_any = $(TESTCACHE)/crypto/aes/xts/crypto_aes_xts-any.o
testlib_deps_any += $(testlib_crypto_aes_xts_any)
testlib_crypto_aes_xts_linux = $(testlib_crypto_aes_xts_any)
testlib_crypto_aes_xts_freebsd = $(testlib_crypto_aes_xts_any)
testlib_crypto_aes_xts_openbsd = $(testlib_crypto_aes_xts_any)

# gen_lib crypto::argon2 (any)
testlib_crypto_argon2_any = $(TESTCACHE)/crypto/argon2/crypto_argon2-any.o
testlib_deps_any += $(testlib_crypto_argon2_any)
testlib_crypto_argon2_linux = $(testlib_crypto_argon2_any)
testlib_crypto_argon2_freebsd = $(testlib_crypto_argon2_any)
testlib_crypto_argon2_openbsd = $(testlib_crypto_argon2_any)

# gen_lib crypto::bcrypt (any)
testlib_crypto_bcrypt_any = $(TESTCACHE)/crypto/bcrypt/crypto_bcrypt-any.o
testlib_deps_any += $(testlib_crypto_bcrypt_any)
testlib_crypto_bcrypt_linux = $(testlib_crypto_bcrypt_any)
testlib_crypto_bcrypt_freebsd = $(testlib_crypto_bcrypt_any)
testlib_crypto_bcrypt_openbsd = $(testlib_crypto_bcrypt_any)

# gen_lib crypto::blake2b (any)
testlib_crypto_blake2b_any = $(TESTCACHE)/crypto/blake2b/crypto_blake2b-any.o
testlib_deps_any += $(testlib_crypto_blake2b_any)
testlib_crypto_blake2b_linux = $(testlib_crypto_blake2b_any)
testlib_crypto_blake2b_freebsd = $(testlib_crypto_blake2b_any)
testlib_crypto_blake2b_openbsd = $(testlib_crypto_blake2b_any)

# gen_lib crypto::blowfish (any)
testlib_crypto_blowfish_any = $(TESTCACHE)/crypto/blowfish/crypto_blowfish-any.o
testlib_deps_any += $(testlib_crypto_blowfish_any)
testlib_crypto_blowfish_linux = $(testlib_crypto_blowfish_any)
testlib_crypto_blowfish_freebsd = $(testlib_crypto_blowfish_any)
testlib_crypto_blowfish_openbsd = $(testlib_crypto_blowfish_any)

# gen_lib crypto::chacha (any)
testlib_crypto_chacha_any = $(TESTCACHE)/crypto/chacha/crypto_chacha-any.o
testlib_deps_any += $(testlib_crypto_chacha_any)
testlib_crypto_chacha_linux = $(testlib_crypto_chacha_any)
testlib_crypto_chacha_freebsd = $(testlib_crypto_chacha_any)
testlib_crypto_chacha_openbsd = $(testlib_crypto_chacha_any)

# gen_lib crypto::cipher (any)
testlib_crypto_cipher_any = $(TESTCACHE)/crypto/cipher/crypto_cipher-any.o
testlib_deps_any += $(testlib_crypto_cipher_any)
testlib_crypto_cipher_linux = $(testlib_crypto_cipher_any)
testlib_crypto_cipher_freebsd = $(testlib_crypto_cipher_any)
testlib_crypto_cipher_openbsd = $(testlib_crypto_cipher_any)

# gen_lib crypto::hmac (any)
testlib_crypto_hmac_any = $(TESTCACHE)/crypto/hmac/crypto_hmac-any.o
testlib_deps_any += $(testlib_crypto_hmac_any)
testlib_crypto_hmac_linux = $(testlib_crypto_hmac_any)
testlib_crypto_hmac_freebsd = $(testlib_crypto_hmac_any)
testlib_crypto_hmac_openbsd = $(testlib_crypto_hmac_any)

# gen_lib crypto::mac (any)
testlib_crypto_mac_any = $(TESTCACHE)/crypto/mac/crypto_mac-any.o
testlib_deps_any += $(testlib_crypto_mac_any)
testlib_crypto_mac_linux = $(testlib_crypto_mac_any)
testlib_crypto_mac_freebsd = $(testlib_crypto_mac_any)
testlib_crypto_mac_openbsd = $(testlib_crypto_mac_any)

# gen_lib crypto::math (any)
testlib_crypto_math_any = $(TESTCACHE)/crypto/math/crypto_math-any.o
testlib_deps_any += $(testlib_crypto_math_any)
testlib_crypto_math_linux = $(testlib_crypto_math_any)
testlib_crypto_math_freebsd = $(testlib_crypto_math_any)
testlib_crypto_math_openbsd = $(testlib_crypto_math_any)

# gen_lib crypto::random (linux)
testlib_crypto_random_linux = $(TESTCACHE)/crypto/random/crypto_random-linux.o
testlib_deps_linux += $(testlib_crypto_random_linux)

# gen_lib crypto::random (freebsd)
testlib_crypto_random_freebsd = $(TESTCACHE)/crypto/random/crypto_random-freebsd.o
testlib_deps_freebsd += $(testlib_crypto_random_freebsd)

# gen_lib crypto::random (openbsd)
testlib_crypto_random_openbsd = $(TESTCACHE)/crypto/random/crypto_random-openbsd.o
testlib_deps_openbsd += $(testlib_crypto_random_openbsd)

# gen_lib crypto::poly1305 (any)
testlib_crypto_poly1305_any = $(TESTCACHE)/crypto/poly1305/crypto_poly1305-any.o
testlib_deps_any += $(testlib_crypto_poly1305_any)
testlib_crypto_poly1305_linux = $(testlib_crypto_poly1305_any)
testlib_crypto_poly1305_freebsd = $(testlib_crypto_poly1305_any)
testlib_crypto_poly1305_openbsd = $(testlib_crypto_poly1305_any)

# gen_lib crypto::salsa (any)
testlib_crypto_salsa_any = $(TESTCACHE)/crypto/salsa/crypto_salsa-any.o
testlib_deps_any += $(testlib_crypto_salsa_any)
testlib_crypto_salsa_linux = $(testlib_crypto_salsa_any)
testlib_crypto_salsa_freebsd = $(testlib_crypto_salsa_any)
testlib_crypto_salsa_openbsd = $(testlib_crypto_salsa_any)

# gen_lib crypto::sha1 (any)
testlib_crypto_sha1_any = $(TESTCACHE)/crypto/sha1/crypto_sha1-any.o
testlib_deps_any += $(testlib_crypto_sha1_any)
testlib_crypto_sha1_linux = $(testlib_crypto_sha1_any)
testlib_crypto_sha1_freebsd = $(testlib_crypto_sha1_any)
testlib_crypto_sha1_openbsd = $(testlib_crypto_sha1_any)

# gen_lib crypto::sha256 (any)
testlib_crypto_sha256_any = $(TESTCACHE)/crypto/sha256/crypto_sha256-any.o
testlib_deps_any += $(testlib_crypto_sha256_any)
testlib_crypto_sha256_linux = $(testlib_crypto_sha256_any)
testlib_crypto_sha256_freebsd = $(testlib_crypto_sha256_any)
testlib_crypto_sha256_openbsd = $(testlib_crypto_sha256_any)

# gen_lib crypto::sha512 (any)
testlib_crypto_sha512_any = $(TESTCACHE)/crypto/sha512/crypto_sha512-any.o
testlib_deps_any += $(testlib_crypto_sha512_any)
testlib_crypto_sha512_linux = $(testlib_crypto_sha512_any)
testlib_crypto_sha512_freebsd = $(testlib_crypto_sha512_any)
testlib_crypto_sha512_openbsd = $(testlib_crypto_sha512_any)

# gen_lib crypto::curve25519 (any)
testlib_crypto_curve25519_any = $(TESTCACHE)/crypto/curve25519/crypto_curve25519-any.o
testlib_deps_any += $(testlib_crypto_curve25519_any)
testlib_crypto_curve25519_linux = $(testlib_crypto_curve25519_any)
testlib_crypto_curve25519_freebsd = $(testlib_crypto_curve25519_any)
testlib_crypto_curve25519_openbsd = $(testlib_crypto_curve25519_any)

# gen_lib crypto::ed25519 (any)
testlib_crypto_ed25519_any = $(TESTCACHE)/crypto/ed25519/crypto_ed25519-any.o
testlib_deps_any += $(testlib_crypto_ed25519_any)
testlib_crypto_ed25519_linux = $(testlib_crypto_ed25519_any)
testlib_crypto_ed25519_freebsd = $(testlib_crypto_ed25519_any)
testlib_crypto_ed25519_openbsd = $(testlib_crypto_ed25519_any)

# gen_lib datetime (linux)
testlib_datetime_linux = $(TESTCACHE)/datetime/datetime-linux.o
testlib_deps_linux += $(testlib_datetime_linux)

# gen_lib datetime (freebsd)
testlib_datetime_freebsd = $(TESTCACHE)/datetime/datetime-freebsd.o
testlib_deps_freebsd += $(testlib_datetime_freebsd)

# gen_lib datetime (openbsd)
testlib_datetime_openbsd = $(TESTCACHE)/datetime/datetime-openbsd.o
testlib_deps_openbsd += $(testlib_datetime_openbsd)

# gen_lib dirs (any)
testlib_dirs_any = $(TESTCACHE)/dirs/dirs-any.o
testlib_deps_any += $(testlib_dirs_any)
testlib_dirs_linux = $(testlib_dirs_any)
testlib_dirs_freebsd = $(testlib_dirs_any)
testlib_dirs_openbsd = $(testlib_dirs_any)

# gen_lib encoding::base64 (any)
testlib_encoding_base64_any = $(TESTCACHE)/encoding/base64/encoding_base64-any.o
testlib_deps_any += $(testlib_encoding_base64_any)
testlib_encoding_base64_linux = $(testlib_encoding_base64_any)
testlib_encoding_base64_freebsd = $(testlib_encoding_base64_any)
testlib_encoding_base64_openbsd = $(testlib_encoding_base64_any)

# gen_lib encoding::base32 (any)
testlib_encoding_base32_any = $(TESTCACHE)/encoding/base32/encoding_base32-any.o
testlib_deps_any += $(testlib_encoding_base32_any)
testlib_encoding_base32_linux = $(testlib_encoding_base32_any)
testlib_encoding_base32_freebsd = $(testlib_encoding_base32_any)
testlib_encoding_base32_openbsd = $(testlib_encoding_base32_any)

# gen_lib encoding::hex (any)
testlib_encoding_hex_any = $(TESTCACHE)/encoding/hex/encoding_hex-any.o
testlib_deps_any += $(testlib_encoding_hex_any)
testlib_encoding_hex_linux = $(testlib_encoding_hex_any)
testlib_encoding_hex_freebsd = $(testlib_encoding_hex_any)
testlib_encoding_hex_openbsd = $(testlib_encoding_hex_any)

# gen_lib encoding::utf8 (any)
testlib_encoding_utf8_any = $(TESTCACHE)/encoding/utf8/encoding_utf8-any.o
testlib_deps_any += $(testlib_encoding_utf8_any)
testlib_encoding_utf8_linux = $(testlib_encoding_utf8_any)
testlib_encoding_utf8_freebsd = $(testlib_encoding_utf8_any)
testlib_encoding_utf8_openbsd = $(testlib_encoding_utf8_any)

# gen_lib endian (any)
testlib_endian_any = $(TESTCACHE)/endian/endian-any.o
testlib_deps_any += $(testlib_endian_any)
testlib_endian_linux = $(testlib_endian_any)
testlib_endian_freebsd = $(testlib_endian_any)
testlib_endian_openbsd = $(testlib_endian_any)

# gen_lib errors (any)
testlib_errors_any = $(TESTCACHE)/errors/errors-any.o
testlib_deps_any += $(testlib_errors_any)
testlib_errors_linux = $(testlib_errors_any)
testlib_errors_freebsd = $(testlib_errors_any)
testlib_errors_openbsd = $(testlib_errors_any)

# gen_lib fmt (any)
testlib_fmt_any = $(TESTCACHE)/fmt/fmt-any.o
testlib_deps_any += $(testlib_fmt_any)
testlib_fmt_linux = $(testlib_fmt_any)
testlib_fmt_freebsd = $(testlib_fmt_any)
testlib_fmt_openbsd = $(testlib_fmt_any)

# gen_lib fnmatch (any)
testlib_fnmatch_any = $(TESTCACHE)/fnmatch/fnmatch-any.o
testlib_deps_any += $(testlib_fnmatch_any)
testlib_fnmatch_linux = $(testlib_fnmatch_any)
testlib_fnmatch_freebsd = $(testlib_fnmatch_any)
testlib_fnmatch_openbsd = $(testlib_fnmatch_any)

# gen_lib format::elf (any)
testlib_format_elf_any = $(TESTCACHE)/format/elf/format_elf-any.o
testlib_deps_any += $(testlib_format_elf_any)
testlib_format_elf_linux = $(testlib_format_elf_any)
testlib_format_elf_freebsd = $(testlib_format_elf_any)
testlib_format_elf_openbsd = $(testlib_format_elf_any)

# gen_lib format::ini (any)
testlib_format_ini_any = $(TESTCACHE)/format/ini/format_ini-any.o
testlib_deps_any += $(testlib_format_ini_any)
testlib_format_ini_linux = $(testlib_format_ini_any)
testlib_format_ini_freebsd = $(testlib_format_ini_any)
testlib_format_ini_openbsd = $(testlib_format_ini_any)

# gen_lib fs (any)
testlib_fs_any = $(TESTCACHE)/fs/fs-any.o
testlib_deps_any += $(testlib_fs_any)
testlib_fs_linux = $(testlib_fs_any)
testlib_fs_freebsd = $(testlib_fs_any)
testlib_fs_openbsd = $(testlib_fs_any)

# gen_lib getopt (any)
testlib_getopt_any = $(TESTCACHE)/getopt/getopt-any.o
testlib_deps_any += $(testlib_getopt_any)
testlib_getopt_linux = $(testlib_getopt_any)
testlib_getopt_freebsd = $(testlib_getopt_any)
testlib_getopt_openbsd = $(testlib_getopt_any)

# gen_lib glob (any)
testlib_glob_any = $(TESTCACHE)/glob/glob-any.o
testlib_deps_any += $(testlib_glob_any)
testlib_glob_linux = $(testlib_glob_any)
testlib_glob_freebsd = $(testlib_glob_any)
testlib_glob_openbsd = $(testlib_glob_any)

# gen_lib hare::ast (any)
testlib_hare_ast_any = $(TESTCACHE)/hare/ast/hare_ast-any.o
testlib_deps_any += $(testlib_hare_ast_any)
testlib_hare_ast_linux = $(testlib_hare_ast_any)
testlib_hare_ast_freebsd = $(testlib_hare_ast_any)
testlib_hare_ast_openbsd = $(testlib_hare_ast_any)

# gen_lib hare::lex (any)
testlib_hare_lex_any = $(TESTCACHE)/hare/lex/hare_lex-any.o
testlib_deps_any += $(testlib_hare_lex_any)
testlib_hare_lex_linux = $(testlib_hare_lex_any)
testlib_hare_lex_freebsd = $(testlib_hare_lex_any)
testlib_hare_lex_openbsd = $(testlib_hare_lex_any)

# gen_lib hare::module (any)
testlib_hare_module_any = $(TESTCACHE)/hare/module/hare_module-any.o
testlib_deps_any += $(testlib_hare_module_any)
testlib_hare_module_linux = $(testlib_hare_module_any)
testlib_hare_module_freebsd = $(testlib_hare_module_any)
testlib_hare_module_openbsd = $(testlib_hare_module_any)

# gen_lib hare::parse (any)
testlib_hare_parse_any = $(TESTCACHE)/hare/parse/hare_parse-any.o
testlib_deps_any += $(testlib_hare_parse_any)
testlib_hare_parse_linux = $(testlib_hare_parse_any)
testlib_hare_parse_freebsd = $(testlib_hare_parse_any)
testlib_hare_parse_openbsd = $(testlib_hare_parse_any)

# gen_lib hare::types (any)
testlib_hare_types_any = $(TESTCACHE)/hare/types/hare_types-any.o
testlib_deps_any += $(testlib_hare_types_any)
testlib_hare_types_linux = $(testlib_hare_types_any)
testlib_hare_types_freebsd = $(testlib_hare_types_any)
testlib_hare_types_openbsd = $(testlib_hare_types_any)

# gen_lib hare::unit (any)
testlib_hare_unit_any = $(TESTCACHE)/hare/unit/hare_unit-any.o
testlib_deps_any += $(testlib_hare_unit_any)
testlib_hare_unit_linux = $(testlib_hare_unit_any)
testlib_hare_unit_freebsd = $(testlib_hare_unit_any)
testlib_hare_unit_openbsd = $(testlib_hare_unit_any)

# gen_lib hare::unparse (any)
testlib_hare_unparse_any = $(TESTCACHE)/hare/unparse/hare_unparse-any.o
testlib_deps_any += $(testlib_hare_unparse_any)
testlib_hare_unparse_linux = $(testlib_hare_unparse_any)
testlib_hare_unparse_freebsd = $(testlib_hare_unparse_any)
testlib_hare_unparse_openbsd = $(testlib_hare_unparse_any)

# gen_lib hash (any)
testlib_hash_any = $(TESTCACHE)/hash/hash-any.o
testlib_deps_any += $(testlib_hash_any)
testlib_hash_linux = $(testlib_hash_any)
testlib_hash_freebsd = $(testlib_hash_any)
testlib_hash_openbsd = $(testlib_hash_any)

# gen_lib hash::adler32 (any)
testlib_hash_adler32_any = $(TESTCACHE)/hash/adler32/hash_adler32-any.o
testlib_deps_any += $(testlib_hash_adler32_any)
testlib_hash_adler32_linux = $(testlib_hash_adler32_any)
testlib_hash_adler32_freebsd = $(testlib_hash_adler32_any)
testlib_hash_adler32_openbsd = $(testlib_hash_adler32_any)

# gen_lib hash::crc16 (any)
testlib_hash_crc16_any = $(TESTCACHE)/hash/crc16/hash_crc16-any.o
testlib_deps_any += $(testlib_hash_crc16_any)
testlib_hash_crc16_linux = $(testlib_hash_crc16_any)
testlib_hash_crc16_freebsd = $(testlib_hash_crc16_any)
testlib_hash_crc16_openbsd = $(testlib_hash_crc16_any)

# gen_lib hash::crc32 (any)
testlib_hash_crc32_any = $(TESTCACHE)/hash/crc32/hash_crc32-any.o
testlib_deps_any += $(testlib_hash_crc32_any)
testlib_hash_crc32_linux = $(testlib_hash_crc32_any)
testlib_hash_crc32_freebsd = $(testlib_hash_crc32_any)
testlib_hash_crc32_openbsd = $(testlib_hash_crc32_any)

# gen_lib hash::crc64 (any)
testlib_hash_crc64_any = $(TESTCACHE)/hash/crc64/hash_crc64-any.o
testlib_deps_any += $(testlib_hash_crc64_any)
testlib_hash_crc64_linux = $(testlib_hash_crc64_any)
testlib_hash_crc64_freebsd = $(testlib_hash_crc64_any)
testlib_hash_crc64_openbsd = $(testlib_hash_crc64_any)

# gen_lib hash::fnv (any)
testlib_hash_fnv_any = $(TESTCACHE)/hash/fnv/hash_fnv-any.o
testlib_deps_any += $(testlib_hash_fnv_any)
testlib_hash_fnv_linux = $(testlib_hash_fnv_any)
testlib_hash_fnv_freebsd = $(testlib_hash_fnv_any)
testlib_hash_fnv_openbsd = $(testlib_hash_fnv_any)

# gen_lib io (linux)
testlib_io_linux = $(TESTCACHE)/io/io-linux.o
testlib_deps_linux += $(testlib_io_linux)

# gen_lib io (freebsd)
testlib_io_freebsd = $(TESTCACHE)/io/io-freebsd.o
testlib_deps_freebsd += $(testlib_io_freebsd)

# gen_lib io (openbsd)
testlib_io_openbsd = $(TESTCACHE)/io/io-openbsd.o
testlib_deps_openbsd += $(testlib_io_openbsd)

# gen_lib linux (linux)
testlib_linux_linux = $(TESTCACHE)/linux/linux-linux.o
testlib_deps_linux += $(testlib_linux_linux)

# gen_lib linux::keyctl (linux)
testlib_linux_keyctl_linux = $(TESTCACHE)/linux/keyctl/linux_keyctl-linux.o
testlib_deps_linux += $(testlib_linux_keyctl_linux)

# gen_lib linux::timerfd (linux)
testlib_linux_timerfd_linux = $(TESTCACHE)/linux/timerfd/linux_timerfd-linux.o
testlib_deps_linux += $(testlib_linux_timerfd_linux)

# gen_lib linux::vdso (linux)
testlib_linux_vdso_linux = $(TESTCACHE)/linux/vdso/linux_vdso-linux.o
testlib_deps_linux += $(testlib_linux_vdso_linux)

# gen_lib log (linux)
testlib_log_linux = $(TESTCACHE)/log/log-linux.o
testlib_deps_linux += $(testlib_log_linux)

# gen_lib log (freebsd)
testlib_log_freebsd = $(TESTCACHE)/log/log-freebsd.o
testlib_deps_freebsd += $(testlib_log_freebsd)

# gen_lib log (openbsd)
testlib_log_openbsd = $(TESTCACHE)/log/log-openbsd.o
testlib_deps_openbsd += $(testlib_log_openbsd)

# gen_lib math (any)
testlib_math_any = $(TESTCACHE)/math/math-any.o
testlib_deps_any += $(testlib_math_any)
testlib_math_linux = $(testlib_math_any)
testlib_math_freebsd = $(testlib_math_any)
testlib_math_openbsd = $(testlib_math_any)

# gen_lib math::random (any)
testlib_math_random_any = $(TESTCACHE)/math/random/math_random-any.o
testlib_deps_any += $(testlib_math_random_any)
testlib_math_random_linux = $(testlib_math_random_any)
testlib_math_random_freebsd = $(testlib_math_random_any)
testlib_math_random_openbsd = $(testlib_math_random_any)

# gen_lib net (linux)
testlib_net_linux = $(TESTCACHE)/net/net-linux.o
testlib_deps_linux += $(testlib_net_linux)

# gen_lib net (freebsd)
testlib_net_freebsd = $(TESTCACHE)/net/net-freebsd.o
testlib_deps_freebsd += $(testlib_net_freebsd)

# gen_lib net (openbsd)
testlib_net_openbsd = $(TESTCACHE)/net/net-openbsd.o
testlib_deps_openbsd += $(testlib_net_openbsd)

# gen_lib net::dial (any)
testlib_net_dial_any = $(TESTCACHE)/net/dial/net_dial-any.o
testlib_deps_any += $(testlib_net_dial_any)
testlib_net_dial_linux = $(testlib_net_dial_any)
testlib_net_dial_freebsd = $(testlib_net_dial_any)
testlib_net_dial_openbsd = $(testlib_net_dial_any)

# gen_lib net::dns (any)
testlib_net_dns_any = $(TESTCACHE)/net/dns/net_dns-any.o
testlib_deps_any += $(testlib_net_dns_any)
testlib_net_dns_linux = $(testlib_net_dns_any)
testlib_net_dns_freebsd = $(testlib_net_dns_any)
testlib_net_dns_openbsd = $(testlib_net_dns_any)

# gen_lib net::ip (linux)
testlib_net_ip_linux = $(TESTCACHE)/net/ip/net_ip-linux.o
testlib_deps_linux += $(testlib_net_ip_linux)

# gen_lib net::ip (freebsd)
testlib_net_ip_freebsd = $(TESTCACHE)/net/ip/net_ip-freebsd.o
testlib_deps_freebsd += $(testlib_net_ip_freebsd)

# gen_lib net::ip (openbsd)
testlib_net_ip_openbsd = $(TESTCACHE)/net/ip/net_ip-openbsd.o
testlib_deps_openbsd += $(testlib_net_ip_openbsd)

# gen_lib net::tcp (linux)
testlib_net_tcp_linux = $(TESTCACHE)/net/tcp/net_tcp-linux.o
testlib_deps_linux += $(testlib_net_tcp_linux)

# gen_lib net::tcp (freebsd)
testlib_net_tcp_freebsd = $(TESTCACHE)/net/tcp/net_tcp-freebsd.o
testlib_deps_freebsd += $(testlib_net_tcp_freebsd)

# gen_lib net::tcp (openbsd)
testlib_net_tcp_openbsd = $(TESTCACHE)/net/tcp/net_tcp-openbsd.o
testlib_deps_openbsd += $(testlib_net_tcp_openbsd)

# gen_lib net::udp (linux)
testlib_net_udp_linux = $(TESTCACHE)/net/udp/net_udp-linux.o
testlib_deps_linux += $(testlib_net_udp_linux)

# gen_lib net::udp (freebsd)
testlib_net_udp_freebsd = $(TESTCACHE)/net/udp/net_udp-freebsd.o
testlib_deps_freebsd += $(testlib_net_udp_freebsd)

# gen_lib net::udp (openbsd)
testlib_net_udp_openbsd = $(TESTCACHE)/net/udp/net_udp-openbsd.o
testlib_deps_openbsd += $(testlib_net_udp_openbsd)

# gen_lib net::unix (linux)
testlib_net_unix_linux = $(TESTCACHE)/net/unix/net_unix-linux.o
testlib_deps_linux += $(testlib_net_unix_linux)

# gen_lib net::unix (freebsd)
testlib_net_unix_freebsd = $(TESTCACHE)/net/unix/net_unix-freebsd.o
testlib_deps_freebsd += $(testlib_net_unix_freebsd)

# gen_lib net::unix (openbsd)
testlib_net_unix_openbsd = $(TESTCACHE)/net/unix/net_unix-openbsd.o
testlib_deps_openbsd += $(testlib_net_unix_openbsd)

# gen_lib net::uri (any)
testlib_net_uri_any = $(TESTCACHE)/net/uri/net_uri-any.o
testlib_deps_any += $(testlib_net_uri_any)
testlib_net_uri_linux = $(testlib_net_uri_any)
testlib_net_uri_freebsd = $(testlib_net_uri_any)
testlib_net_uri_openbsd = $(testlib_net_uri_any)

# gen_lib os (linux)
testlib_os_linux = $(TESTCACHE)/os/os-linux.o
testlib_deps_linux += $(testlib_os_linux)

# gen_lib os (freebsd)
testlib_os_freebsd = $(TESTCACHE)/os/os-freebsd.o
testlib_deps_freebsd += $(testlib_os_freebsd)

# gen_lib os (openbsd)
testlib_os_openbsd = $(TESTCACHE)/os/os-openbsd.o
testlib_deps_openbsd += $(testlib_os_openbsd)

# gen_lib os::exec (linux)
testlib_os_exec_linux = $(TESTCACHE)/os/exec/os_exec-linux.o
testlib_deps_linux += $(testlib_os_exec_linux)

# gen_lib os::exec (freebsd)
testlib_os_exec_freebsd = $(TESTCACHE)/os/exec/os_exec-freebsd.o
testlib_deps_freebsd += $(testlib_os_exec_freebsd)

# gen_lib os::exec (openbsd)
testlib_os_exec_openbsd = $(TESTCACHE)/os/exec/os_exec-openbsd.o
testlib_deps_openbsd += $(testlib_os_exec_openbsd)

# gen_lib path (any)
testlib_path_any = $(TESTCACHE)/path/path-any.o
testlib_deps_any += $(testlib_path_any)
testlib_path_linux = $(testlib_path_any)
testlib_path_freebsd = $(testlib_path_any)
testlib_path_openbsd = $(testlib_path_any)

# gen_lib regex (any)
testlib_regex_any = $(TESTCACHE)/regex/regex-any.o
testlib_deps_any += $(testlib_regex_any)
testlib_regex_linux = $(testlib_regex_any)
testlib_regex_freebsd = $(testlib_regex_any)
testlib_regex_openbsd = $(testlib_regex_any)

# gen_lib shlex (any)
testlib_shlex_any = $(TESTCACHE)/shlex/shlex-any.o
testlib_deps_any += $(testlib_shlex_any)
testlib_shlex_linux = $(testlib_shlex_any)
testlib_shlex_freebsd = $(testlib_shlex_any)
testlib_shlex_openbsd = $(testlib_shlex_any)

# gen_lib slices (any)
testlib_slices_any = $(TESTCACHE)/slices/slices-any.o
testlib_deps_any += $(testlib_slices_any)
testlib_slices_linux = $(testlib_slices_any)
testlib_slices_freebsd = $(testlib_slices_any)
testlib_slices_openbsd = $(testlib_slices_any)

# gen_lib sort (any)
testlib_sort_any = $(TESTCACHE)/sort/sort-any.o
testlib_deps_any += $(testlib_sort_any)
testlib_sort_linux = $(testlib_sort_any)
testlib_sort_freebsd = $(testlib_sort_any)
testlib_sort_openbsd = $(testlib_sort_any)

# gen_lib strconv (any)
testlib_strconv_any = $(TESTCACHE)/strconv/strconv-any.o
testlib_deps_any += $(testlib_strconv_any)
testlib_strconv_linux = $(testlib_strconv_any)
testlib_strconv_freebsd = $(testlib_strconv_any)
testlib_strconv_openbsd = $(testlib_strconv_any)

# gen_lib strings (any)
testlib_strings_any = $(TESTCACHE)/strings/strings-any.o
testlib_deps_any += $(testlib_strings_any)
testlib_strings_linux = $(testlib_strings_any)
testlib_strings_freebsd = $(testlib_strings_any)
testlib_strings_openbsd = $(testlib_strings_any)

# gen_lib strio (any)
testlib_strio_any = $(TESTCACHE)/strio/strio-any.o
testlib_deps_any += $(testlib_strio_any)
testlib_strio_linux = $(testlib_strio_any)
testlib_strio_freebsd = $(testlib_strio_any)
testlib_strio_openbsd = $(testlib_strio_any)

# gen_lib temp (linux)
testlib_temp_linux = $(TESTCACHE)/temp/temp-linux.o
testlib_deps_linux += $(testlib_temp_linux)

# gen_lib temp (freebsd)
testlib_temp_freebsd = $(TESTCACHE)/temp/temp-freebsd.o
testlib_deps_freebsd += $(testlib_temp_freebsd)

# gen_lib temp (openbsd)
testlib_temp_openbsd = $(TESTCACHE)/temp/temp-openbsd.o
testlib_deps_openbsd += $(testlib_temp_openbsd)

# gen_lib time (linux)
testlib_time_linux = $(TESTCACHE)/time/time-linux.o
testlib_deps_linux += $(testlib_time_linux)

# gen_lib time (freebsd)
testlib_time_freebsd = $(TESTCACHE)/time/time-freebsd.o
testlib_deps_freebsd += $(testlib_time_freebsd)

# gen_lib time (openbsd)
testlib_time_openbsd = $(TESTCACHE)/time/time-openbsd.o
testlib_deps_openbsd += $(testlib_time_openbsd)

# gen_lib time::chrono (linux)
testlib_time_chrono_linux = $(TESTCACHE)/time/chrono/time_chrono-linux.o
testlib_deps_linux += $(testlib_time_chrono_linux)

# gen_lib time::chrono (freebsd)
testlib_time_chrono_freebsd = $(TESTCACHE)/time/chrono/time_chrono-freebsd.o
testlib_deps_freebsd += $(testlib_time_chrono_freebsd)

# gen_lib time::chrono (openbsd)
testlib_time_chrono_openbsd = $(TESTCACHE)/time/chrono/time_chrono-openbsd.o
testlib_deps_openbsd += $(testlib_time_chrono_openbsd)

# gen_lib types (any)
testlib_types_any = $(TESTCACHE)/types/types-any.o
testlib_deps_any += $(testlib_types_any)
testlib_types_linux = $(testlib_types_any)
testlib_types_freebsd = $(testlib_types_any)
testlib_types_openbsd = $(testlib_types_any)

# gen_lib unix (linux)
testlib_unix_linux = $(TESTCACHE)/unix/unix-linux.o
testlib_deps_linux += $(testlib_unix_linux)

# gen_lib unix (freebsd)
testlib_unix_freebsd = $(TESTCACHE)/unix/unix-freebsd.o
testlib_deps_freebsd += $(testlib_unix_freebsd)

# gen_lib unix (openbsd)
testlib_unix_openbsd = $(TESTCACHE)/unix/unix-openbsd.o
testlib_deps_openbsd += $(testlib_unix_openbsd)

# gen_lib unix::hosts (linux)
testlib_unix_hosts_linux = $(TESTCACHE)/unix/hosts/unix_hosts-linux.o
testlib_deps_linux += $(testlib_unix_hosts_linux)

# gen_lib unix::hosts (freebsd)
testlib_unix_hosts_freebsd = $(TESTCACHE)/unix/hosts/unix_hosts-freebsd.o
testlib_deps_freebsd += $(testlib_unix_hosts_freebsd)

# gen_lib unix::hosts (openbsd)
testlib_unix_hosts_openbsd = $(TESTCACHE)/unix/hosts/unix_hosts-openbsd.o
testlib_deps_openbsd += $(testlib_unix_hosts_openbsd)

# gen_lib unix::passwd (any)
testlib_unix_passwd_any = $(TESTCACHE)/unix/passwd/unix_passwd-any.o
testlib_deps_any += $(testlib_unix_passwd_any)
testlib_unix_passwd_linux = $(testlib_unix_passwd_any)
testlib_unix_passwd_freebsd = $(testlib_unix_passwd_any)
testlib_unix_passwd_openbsd = $(testlib_unix_passwd_any)

# gen_lib unix::poll (linux)
testlib_unix_poll_linux = $(TESTCACHE)/unix/poll/unix_poll-linux.o
testlib_deps_linux += $(testlib_unix_poll_linux)

# gen_lib unix::poll (freebsd)
testlib_unix_poll_freebsd = $(TESTCACHE)/unix/poll/unix_poll-freebsd.o
testlib_deps_freebsd += $(testlib_unix_poll_freebsd)

# gen_lib unix::poll (openbsd)
testlib_unix_poll_openbsd = $(TESTCACHE)/unix/poll/unix_poll-openbsd.o
testlib_deps_openbsd += $(testlib_unix_poll_openbsd)

# gen_lib unix::resolvconf (linux)
testlib_unix_resolvconf_linux = $(TESTCACHE)/unix/resolvconf/unix_resolvconf-linux.o
testlib_deps_linux += $(testlib_unix_resolvconf_linux)

# gen_lib unix::resolvconf (freebsd)
testlib_unix_resolvconf_freebsd = $(TESTCACHE)/unix/resolvconf/unix_resolvconf-freebsd.o
testlib_deps_freebsd += $(testlib_unix_resolvconf_freebsd)

# gen_lib unix::resolvconf (openbsd)
testlib_unix_resolvconf_openbsd = $(TESTCACHE)/unix/resolvconf/unix_resolvconf-openbsd.o
testlib_deps_openbsd += $(testlib_unix_resolvconf_openbsd)

# gen_lib unix::signal (linux)
testlib_unix_signal_linux = $(TESTCACHE)/unix/signal/unix_signal-linux.o
testlib_deps_linux += $(testlib_unix_signal_linux)

# gen_lib unix::tty (linux)
testlib_unix_tty_linux = $(TESTCACHE)/unix/tty/unix_tty-linux.o
testlib_deps_linux += $(testlib_unix_tty_linux)

# gen_lib unix::tty (freebsd)
testlib_unix_tty_freebsd = $(TESTCACHE)/unix/tty/unix_tty-freebsd.o
testlib_deps_freebsd += $(testlib_unix_tty_freebsd)

# gen_lib unix::tty (openbsd)
testlib_unix_tty_openbsd = $(TESTCACHE)/unix/tty/unix_tty-openbsd.o
testlib_deps_openbsd += $(testlib_unix_tty_openbsd)

# gen_lib uuid (any)
testlib_uuid_any = $(TESTCACHE)/uuid/uuid-any.o
testlib_deps_any += $(testlib_uuid_any)
testlib_uuid_linux = $(testlib_uuid_any)
testlib_uuid_freebsd = $(testlib_uuid_any)
testlib_uuid_openbsd = $(testlib_uuid_any)

# ascii (+any)
testlib_ascii_any_srcs = \
	$(STDLIB)/ascii/ctype.ha \
	$(STDLIB)/ascii/strcmp.ha \
	$(STDLIB)/ascii/valid.ha

$(TESTCACHE)/ascii/ascii-any.ssa: $(testlib_ascii_any_srcs) $(testlib_rt) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/ascii
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nascii \
		-t$(TESTCACHE)/ascii/ascii.td $(testlib_ascii_any_srcs)

# bufio (+any)
testlib_bufio_any_srcs = \
	$(STDLIB)/bufio/buffered.ha \
	$(STDLIB)/bufio/memstream.ha \
	$(STDLIB)/bufio/scanner.ha

$(TESTCACHE)/bufio/bufio-any.ssa: $(testlib_bufio_any_srcs) $(testlib_rt) $(testlib_io_$(PLATFORM)) $(testlib_bytes_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_encoding_utf8_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_types_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/bufio
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nbufio \
		-t$(TESTCACHE)/bufio/bufio.td $(testlib_bufio_any_srcs)

# bytes (+any)
testlib_bytes_any_srcs = \
	$(STDLIB)/bytes/contains.ha \
	$(STDLIB)/bytes/equal.ha \
	$(STDLIB)/bytes/index.ha \
	$(STDLIB)/bytes/reverse.ha \
	$(STDLIB)/bytes/tokenize.ha \
	$(STDLIB)/bytes/trim.ha \
	$(STDLIB)/bytes/two_way.ha \
	$(STDLIB)/bytes/zero.ha

$(TESTCACHE)/bytes/bytes-any.ssa: $(testlib_bytes_any_srcs) $(testlib_rt) $(testlib_types_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/bytes
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nbytes \
		-t$(TESTCACHE)/bytes/bytes.td $(testlib_bytes_any_srcs)

# crypto (+any)
testlib_crypto_any_srcs = \
	$(STDLIB)/crypto/authenc.ha \
	$(STDLIB)/crypto/keyderiv.ha \
	$(STDLIB)/crypto/+test/authenc.ha

$(TESTCACHE)/crypto/crypto-any.ssa: $(testlib_crypto_any_srcs) $(testlib_rt) $(testlib_bytes_$(PLATFORM)) $(testlib_crypto_argon2_$(PLATFORM)) $(testlib_crypto_chacha_$(PLATFORM)) $(testlib_crypto_cihper_$(PLATFORM)) $(testlib_crypto_poly1305_$(PLATFORM)) $(testlib_crypto_mac_$(PLATFORM)) $(testlib_crypto_math_$(PLATFORM)) $(testlib_endian_$(PLATFORM)) $(testlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto \
		-t$(TESTCACHE)/crypto/crypto.td $(testlib_crypto_any_srcs)

# crypto::aes (+any)
testlib_crypto_aes_any_srcs = \
	$(STDLIB)/crypto/aes/aes_ct64.ha \
	$(STDLIB)/crypto/aes/ct64+test.ha \
	$(STDLIB)/crypto/aes/cbc+test.ha \
	$(STDLIB)/crypto/aes/ctr+test.ha

$(TESTCACHE)/crypto/aes/crypto_aes-any.ssa: $(testlib_crypto_aes_any_srcs) $(testlib_rt) $(testlib_bytes_$(PLATFORM)) $(testlib_crypto_cipher_$(PLATFORM)) $(testlib_crypto_math_$(PLATFORM)) $(testlib_endian_$(PLATFORM)) $(testlib_rt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/aes
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::aes \
		-t$(TESTCACHE)/crypto/aes/crypto_aes.td $(testlib_crypto_aes_any_srcs)

# crypto::aes::xts (+any)
testlib_crypto_aes_xts_any_srcs = \
	$(STDLIB)/crypto/aes/xts/xts.ha \
	$(STDLIB)/crypto/aes/xts/+test.ha

$(TESTCACHE)/crypto/aes/xts/crypto_aes_xts-any.ssa: $(testlib_crypto_aes_xts_any_srcs) $(testlib_rt) $(testlib_crypto_aes_$(PLATFORM)) $(testlib_crypto_cipher_$(PLATFORM)) $(testlib_bytes_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/aes/xts
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::aes::xts \
		-t$(TESTCACHE)/crypto/aes/xts/crypto_aes_xts.td $(testlib_crypto_aes_xts_any_srcs)

# crypto::argon2 (+any)
testlib_crypto_argon2_any_srcs = \
	$(STDLIB)/crypto/argon2/argon2.ha \
	$(STDLIB)/crypto/argon2/+test.ha

$(TESTCACHE)/crypto/argon2/crypto_argon2-any.ssa: $(testlib_crypto_argon2_any_srcs) $(testlib_rt) $(testlib_bufio_$(PLATFORM)) $(testlib_bytes_$(PLATFORM)) $(testlib_crypto_blake2b_$(PLATFORM)) $(testlib_crypto_math_$(PLATFORM)) $(testlib_endian_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_hash_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_rt_$(PLATFORM)) $(testlib_types_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/argon2
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::argon2 \
		-t$(TESTCACHE)/crypto/argon2/crypto_argon2.td $(testlib_crypto_argon2_any_srcs)

# crypto::bcrypt (+any)
testlib_crypto_bcrypt_any_srcs = \
	$(STDLIB)/crypto/bcrypt/bcrypt.ha \
	$(STDLIB)/crypto/bcrypt/base64.ha \
	$(STDLIB)/crypto/bcrypt/+test.ha

$(TESTCACHE)/crypto/bcrypt/crypto_bcrypt-any.ssa: $(testlib_crypto_bcrypt_any_srcs) $(testlib_rt) $(testlib_crypto_blowfish_$(PLATFORM)) $(testlib_encoding_base64_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_crypto_$(PLATFORM)) $(testlib_crypto_random_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_crypto_cipher_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_bytes_$(PLATFORM)) $(testlib_strconv_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/bcrypt
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::bcrypt \
		-t$(TESTCACHE)/crypto/bcrypt/crypto_bcrypt.td $(testlib_crypto_bcrypt_any_srcs)

# crypto::blake2b (+any)
testlib_crypto_blake2b_any_srcs = \
	$(STDLIB)/crypto/blake2b/blake2b.ha \
	$(STDLIB)/crypto/blake2b/+test.ha \
	$(STDLIB)/crypto/blake2b/vectors+test.ha

$(TESTCACHE)/crypto/blake2b/crypto_blake2b-any.ssa: $(testlib_crypto_blake2b_any_srcs) $(testlib_rt) $(testlib_encoding_hex_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_hash_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_strio_$(PLATFORM)) $(testlib_crypto_math_$(PLATFORM)) $(testlib_endian_$(PLATFORM)) $(testlib_bytes_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/blake2b
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::blake2b \
		-t$(TESTCACHE)/crypto/blake2b/crypto_blake2b.td $(testlib_crypto_blake2b_any_srcs)

# crypto::blowfish (+any)
testlib_crypto_blowfish_any_srcs = \
	$(STDLIB)/crypto/blowfish/blowfish.ha \
	$(STDLIB)/crypto/blowfish/const.ha \
	$(STDLIB)/crypto/blowfish/+test.ha

$(TESTCACHE)/crypto/blowfish/crypto_blowfish-any.ssa: $(testlib_crypto_blowfish_any_srcs) $(testlib_rt) $(testlib_bytes_$(PLATFORM)) $(testlib_crypto_cipher_$(PLATFORM)) $(testlib_endian_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/blowfish
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::blowfish \
		-t$(TESTCACHE)/crypto/blowfish/crypto_blowfish.td $(testlib_crypto_blowfish_any_srcs)

# crypto::chacha (+any)
testlib_crypto_chacha_any_srcs = \
	$(STDLIB)/crypto/chacha/chacha20.ha \
	$(STDLIB)/crypto/chacha/+test.ha

$(TESTCACHE)/crypto/chacha/crypto_chacha-any.ssa: $(testlib_crypto_chacha_any_srcs) $(testlib_rt) $(testlib_bytes_$(PLATFORM)) $(testlib_crypto_cipher_$(PLATFORM)) $(testlib_crypto_math_$(PLATFORM)) $(testlib_endian_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/chacha
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::chacha \
		-t$(TESTCACHE)/crypto/chacha/crypto_chacha.td $(testlib_crypto_chacha_any_srcs)

# crypto::cipher (+any)
testlib_crypto_cipher_any_srcs = \
	$(STDLIB)/crypto/cipher/cipher.ha \
	$(STDLIB)/crypto/cipher/block.ha \
	$(STDLIB)/crypto/cipher/cbc.ha \
	$(STDLIB)/crypto/cipher/ctr.ha \
	$(STDLIB)/crypto/cipher/stream.ha

$(TESTCACHE)/crypto/cipher/crypto_cipher-any.ssa: $(testlib_crypto_cipher_any_srcs) $(testlib_rt) $(testlib_crypto_math_$(PLATFORM)) $(testlib_bytes_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/cipher
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::cipher \
		-t$(TESTCACHE)/crypto/cipher/crypto_cipher.td $(testlib_crypto_cipher_any_srcs)

# crypto::hmac (+any)
testlib_crypto_hmac_any_srcs = \
	$(STDLIB)/crypto/hmac/hmac.ha \
	$(STDLIB)/crypto/hmac/sha1.ha \
	$(STDLIB)/crypto/hmac/sha256.ha \
	$(STDLIB)/crypto/hmac/+test.ha

$(TESTCACHE)/crypto/hmac/crypto_hmac-any.ssa: $(testlib_crypto_hmac_any_srcs) $(testlib_rt) $(testlib_bytes_$(PLATFORM)) $(testlib_crypto_mac_$(PLATFORM)) $(testlib_hash_$(PLATFORM)) $(testlib_crypto_sha1_$(PLATFORM)) $(testlib_crypto_sha256_$(PLATFORM)) $(testlib_encoding_hex_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/hmac
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::hmac \
		-t$(TESTCACHE)/crypto/hmac/crypto_hmac.td $(testlib_crypto_hmac_any_srcs)

# crypto::mac (+any)
testlib_crypto_mac_any_srcs = \
	$(STDLIB)/crypto/mac/mac.ha

$(TESTCACHE)/crypto/mac/crypto_mac-any.ssa: $(testlib_crypto_mac_any_srcs) $(testlib_rt) $(testlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/mac
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::mac \
		-t$(TESTCACHE)/crypto/mac/crypto_mac.td $(testlib_crypto_mac_any_srcs)

# crypto::math (+any)
testlib_crypto_math_any_srcs = \
	$(STDLIB)/crypto/math/bits.ha

$(TESTCACHE)/crypto/math/crypto_math-any.ssa: $(testlib_crypto_math_any_srcs) $(testlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/math
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::math \
		-t$(TESTCACHE)/crypto/math/crypto_math.td $(testlib_crypto_math_any_srcs)

# crypto::random (+linux)
testlib_crypto_random_linux_srcs = \
	$(STDLIB)/crypto/random/+linux.ha \
	$(STDLIB)/crypto/random/random.ha

$(TESTCACHE)/crypto/random/crypto_random-linux.ssa: $(testlib_crypto_random_linux_srcs) $(testlib_rt) $(testlib_rt_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/random
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::random \
		-t$(TESTCACHE)/crypto/random/crypto_random.td $(testlib_crypto_random_linux_srcs)

# crypto::random (+freebsd)
testlib_crypto_random_freebsd_srcs = \
	$(STDLIB)/crypto/random/+freebsd.ha \
	$(STDLIB)/crypto/random/random.ha

$(TESTCACHE)/crypto/random/crypto_random-freebsd.ssa: $(testlib_crypto_random_freebsd_srcs) $(testlib_rt) $(testlib_rt_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/random
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::random \
		-t$(TESTCACHE)/crypto/random/crypto_random.td $(testlib_crypto_random_freebsd_srcs)

# crypto::random (+openbsd)
testlib_crypto_random_openbsd_srcs = \
	$(STDLIB)/crypto/random/+openbsd.ha \
	$(STDLIB)/crypto/random/random.ha

$(TESTCACHE)/crypto/random/crypto_random-openbsd.ssa: $(testlib_crypto_random_openbsd_srcs) $(testlib_rt) $(testlib_rt_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/random
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::random \
		-t$(TESTCACHE)/crypto/random/crypto_random.td $(testlib_crypto_random_openbsd_srcs)

# crypto::poly1305 (+any)
testlib_crypto_poly1305_any_srcs = \
	$(STDLIB)/crypto/poly1305/poly1305.ha \
	$(STDLIB)/crypto/poly1305/+test.ha

$(TESTCACHE)/crypto/poly1305/crypto_poly1305-any.ssa: $(testlib_crypto_poly1305_any_srcs) $(testlib_rt) $(testlib_bytes_$(PLATFORM)) $(testlib_crypto_mac_$(PLATFORM)) $(testlib_endian_$(PLATFORM)) $(testlib_encoding_hex_$(PLATFORM)) $(testlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/poly1305
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::poly1305 \
		-t$(TESTCACHE)/crypto/poly1305/crypto_poly1305.td $(testlib_crypto_poly1305_any_srcs)

# crypto::salsa (+any)
testlib_crypto_salsa_any_srcs = \
	$(STDLIB)/crypto/salsa/salsa20.ha \
	$(STDLIB)/crypto/salsa/+test.ha

$(TESTCACHE)/crypto/salsa/crypto_salsa-any.ssa: $(testlib_crypto_salsa_any_srcs) $(testlib_rt) $(testlib_bytes_$(PLATFORM)) $(testlib_crypto_cipher_$(PLATFORM)) $(testlib_crypto_math_$(PLATFORM)) $(testlib_endian_$(PLATFORM)) $(testlib_types_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/salsa
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::salsa \
		-t$(TESTCACHE)/crypto/salsa/crypto_salsa.td $(testlib_crypto_salsa_any_srcs)

# crypto::sha1 (+any)
testlib_crypto_sha1_any_srcs = \
	$(STDLIB)/crypto/sha1/sha1.ha \
	$(STDLIB)/crypto/sha1/+test.ha

$(TESTCACHE)/crypto/sha1/crypto_sha1-any.ssa: $(testlib_crypto_sha1_any_srcs) $(testlib_rt) $(testlib_bytes_$(PLATFORM)) $(testlib_hash_$(PLATFORM)) $(testlib_endian_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_encoding_hex_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/sha1
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::sha1 \
		-t$(TESTCACHE)/crypto/sha1/crypto_sha1.td $(testlib_crypto_sha1_any_srcs)

# crypto::sha256 (+any)
testlib_crypto_sha256_any_srcs = \
	$(STDLIB)/crypto/sha256/sha256.ha \
	$(STDLIB)/crypto/sha256/+test.ha

$(TESTCACHE)/crypto/sha256/crypto_sha256-any.ssa: $(testlib_crypto_sha256_any_srcs) $(testlib_rt) $(testlib_bytes_$(PLATFORM)) $(testlib_hash_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_endian_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_encoding_hex_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/sha256
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::sha256 \
		-t$(TESTCACHE)/crypto/sha256/crypto_sha256.td $(testlib_crypto_sha256_any_srcs)

# crypto::sha512 (+any)
testlib_crypto_sha512_any_srcs = \
	$(STDLIB)/crypto/sha512/sha512.ha \
	$(STDLIB)/crypto/sha512/+test.ha

$(TESTCACHE)/crypto/sha512/crypto_sha512-any.ssa: $(testlib_crypto_sha512_any_srcs) $(testlib_rt) $(testlib_bytes_$(PLATFORM)) $(testlib_hash_$(PLATFORM)) $(testlib_endian_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_encoding_hex_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/sha512
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::sha512 \
		-t$(TESTCACHE)/crypto/sha512/crypto_sha512.td $(testlib_crypto_sha512_any_srcs)

# crypto::curve25519 (+any)
testlib_crypto_curve25519_any_srcs = \
	$(STDLIB)/crypto/curve25519/curve25519.ha \
	$(STDLIB)/crypto/curve25519/+test.ha

$(TESTCACHE)/crypto/curve25519/crypto_curve25519-any.ssa: $(testlib_crypto_curve25519_any_srcs) $(testlib_rt) $(testlib_bytes_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_encoding_hex_$(PLATFORM)) $(testlib_crypto_random_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/curve25519
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::curve25519 \
		-t$(TESTCACHE)/crypto/curve25519/crypto_curve25519.td $(testlib_crypto_curve25519_any_srcs)

# crypto::ed25519 (+any)
testlib_crypto_ed25519_any_srcs = \
	$(STDLIB)/crypto/ed25519/ed25519.ha \
	$(STDLIB)/crypto/ed25519/edwards25519.ha \
	$(STDLIB)/crypto/ed25519/+test.ha

$(TESTCACHE)/crypto/ed25519/crypto_ed25519-any.ssa: $(testlib_crypto_ed25519_any_srcs) $(testlib_rt) $(testlib_bytes_$(PLATFORM)) $(testlib_crypto_sha512_$(PLATFORM)) $(testlib_hash_$(PLATFORM)) $(testlib_encoding_hex_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/crypto/ed25519
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ncrypto::ed25519 \
		-t$(TESTCACHE)/crypto/ed25519/crypto_ed25519.td $(testlib_crypto_ed25519_any_srcs)

# datetime (+linux)
testlib_datetime_linux_srcs = \
	$(STDLIB)/datetime/arithmetic.ha \
	$(STDLIB)/datetime/chronology.ha \
	$(STDLIB)/datetime/date.ha \
	$(STDLIB)/datetime/datetime.ha \
	$(STDLIB)/datetime/format.ha \
	$(STDLIB)/datetime/parse.ha \
	$(STDLIB)/datetime/time.ha \
	$(STDLIB)/datetime/timezone.ha

$(TESTCACHE)/datetime/datetime-linux.ssa: $(testlib_datetime_linux_srcs) $(testlib_rt) $(testlib_errors_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_strio_$(PLATFORM)) $(testlib_time_$(PLATFORM)) $(testlib_time_chrono_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/datetime
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ndatetime \
		-t$(TESTCACHE)/datetime/datetime.td $(testlib_datetime_linux_srcs)

# datetime (+freebsd)
testlib_datetime_freebsd_srcs = \
	$(STDLIB)/datetime/arithmetic.ha \
	$(STDLIB)/datetime/chronology.ha \
	$(STDLIB)/datetime/date.ha \
	$(STDLIB)/datetime/datetime.ha \
	$(STDLIB)/datetime/format.ha \
	$(STDLIB)/datetime/parse.ha \
	$(STDLIB)/datetime/time.ha \
	$(STDLIB)/datetime/timezone.ha

$(TESTCACHE)/datetime/datetime-freebsd.ssa: $(testlib_datetime_freebsd_srcs) $(testlib_rt) $(testlib_errors_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_strio_$(PLATFORM)) $(testlib_time_$(PLATFORM)) $(testlib_time_chrono_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/datetime
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ndatetime \
		-t$(TESTCACHE)/datetime/datetime.td $(testlib_datetime_freebsd_srcs)

# datetime (+openbsd)
testlib_datetime_openbsd_srcs = \
	$(STDLIB)/datetime/arithmetic.ha \
	$(STDLIB)/datetime/chronology.ha \
	$(STDLIB)/datetime/date.ha \
	$(STDLIB)/datetime/datetime.ha \
	$(STDLIB)/datetime/format.ha \
	$(STDLIB)/datetime/parse.ha \
	$(STDLIB)/datetime/time.ha \
	$(STDLIB)/datetime/timezone.ha

$(TESTCACHE)/datetime/datetime-openbsd.ssa: $(testlib_datetime_openbsd_srcs) $(testlib_rt) $(testlib_errors_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_strio_$(PLATFORM)) $(testlib_time_$(PLATFORM)) $(testlib_time_chrono_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/datetime
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ndatetime \
		-t$(TESTCACHE)/datetime/datetime.td $(testlib_datetime_openbsd_srcs)

# dirs (+any)
testlib_dirs_any_srcs = \
	$(STDLIB)/dirs/xdg.ha

$(TESTCACHE)/dirs/dirs-any.ssa: $(testlib_dirs_any_srcs) $(testlib_rt) $(testlib_fs_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_path_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/dirs
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ndirs \
		-t$(TESTCACHE)/dirs/dirs.td $(testlib_dirs_any_srcs)

# encoding::base64 (+any)
testlib_encoding_base64_any_srcs = \
	$(STDLIB)/encoding/base64/base64.ha

$(TESTCACHE)/encoding/base64/encoding_base64-any.ssa: $(testlib_encoding_base64_any_srcs) $(testlib_rt) $(testlib_ascii_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_bytes_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/encoding/base64
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nencoding::base64 \
		-t$(TESTCACHE)/encoding/base64/encoding_base64.td $(testlib_encoding_base64_any_srcs)

# encoding::base32 (+any)
testlib_encoding_base32_any_srcs = \
	$(STDLIB)/encoding/base32/base32.ha

$(TESTCACHE)/encoding/base32/encoding_base32-any.ssa: $(testlib_encoding_base32_any_srcs) $(testlib_rt) $(testlib_ascii_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_bytes_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_os_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/encoding/base32
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nencoding::base32 \
		-t$(TESTCACHE)/encoding/base32/encoding_base32.td $(testlib_encoding_base32_any_srcs)

# encoding::hex (+any)
testlib_encoding_hex_any_srcs = \
	$(STDLIB)/encoding/hex/hex.ha

$(TESTCACHE)/encoding/hex/encoding_hex-any.ssa: $(testlib_encoding_hex_any_srcs) $(testlib_rt) $(testlib_ascii_$(PLATFORM)) $(testlib_bytes_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strconv_$(PLATFORM)) $(testlib_strio_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/encoding/hex
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nencoding::hex \
		-t$(TESTCACHE)/encoding/hex/encoding_hex.td $(testlib_encoding_hex_any_srcs)

# encoding::utf8 (+any)
testlib_encoding_utf8_any_srcs = \
	$(STDLIB)/encoding/utf8/decode.ha \
	$(STDLIB)/encoding/utf8/encode.ha \
	$(STDLIB)/encoding/utf8/rune.ha

$(TESTCACHE)/encoding/utf8/encoding_utf8-any.ssa: $(testlib_encoding_utf8_any_srcs) $(testlib_rt) $(testlib_types_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/encoding/utf8
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nencoding::utf8 \
		-t$(TESTCACHE)/encoding/utf8/encoding_utf8.td $(testlib_encoding_utf8_any_srcs)

# endian (+any)
testlib_endian_any_srcs = \
	$(STDLIB)/endian/big.ha \
	$(STDLIB)/endian/network.ha \
	$(STDLIB)/endian/little.ha \
	$(STDLIB)/endian/endian.ha \
	$(STDLIB)/endian/host+$(ARCH).ha

$(TESTCACHE)/endian/endian-any.ssa: $(testlib_endian_any_srcs) $(testlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/endian
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nendian \
		-t$(TESTCACHE)/endian/endian.td $(testlib_endian_any_srcs)

# errors (+any)
testlib_errors_any_srcs = \
	$(STDLIB)/errors/common.ha \
	$(STDLIB)/errors/opaque.ha \
	$(STDLIB)/errors/string.ha \
	$(STDLIB)/errors/rt.ha

$(TESTCACHE)/errors/errors-any.ssa: $(testlib_errors_any_srcs) $(testlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/errors
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nerrors \
		-t$(TESTCACHE)/errors/errors.td $(testlib_errors_any_srcs)

# fmt (+any)
testlib_fmt_any_srcs = \
	$(STDLIB)/fmt/fmt.ha

$(TESTCACHE)/fmt/fmt-any.ssa: $(testlib_fmt_any_srcs) $(testlib_rt) $(testlib_bufio_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_strconv_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_types_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/fmt
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nfmt \
		-t$(TESTCACHE)/fmt/fmt.td $(testlib_fmt_any_srcs)

# fnmatch (+any)
testlib_fnmatch_any_srcs = \
	$(STDLIB)/fnmatch/fnmatch.ha \
	$(STDLIB)/fnmatch/+test.ha

$(TESTCACHE)/fnmatch/fnmatch-any.ssa: $(testlib_fnmatch_any_srcs) $(testlib_rt) $(testlib_strings_$(PLATFORM)) $(testlib_bytes_$(PLATFORM)) $(testlib_sort_$(PLATFORM)) $(testlib_ascii_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_fmt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/fnmatch
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nfnmatch \
		-t$(TESTCACHE)/fnmatch/fnmatch.td $(testlib_fnmatch_any_srcs)

# format::elf (+any)
testlib_format_elf_any_srcs = \
	$(STDLIB)/format/elf/+$(ARCH).ha \
	$(STDLIB)/format/elf/+$(PLATFORM).ha \
	$(STDLIB)/format/elf/types.ha

$(TESTCACHE)/format/elf/format_elf-any.ssa: $(testlib_format_elf_any_srcs) $(testlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/format/elf
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nformat::elf \
		-t$(TESTCACHE)/format/elf/format_elf.td $(testlib_format_elf_any_srcs)

# format::ini (+any)
testlib_format_ini_any_srcs = \
	$(STDLIB)/format/ini/scan.ha \
	$(STDLIB)/format/ini/types.ha \
	$(STDLIB)/format/ini/+test.ha

$(TESTCACHE)/format/ini/format_ini-any.ssa: $(testlib_format_ini_any_srcs) $(testlib_rt) $(testlib_bufio_$(PLATFORM)) $(testlib_encoding_utf8_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/format/ini
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nformat::ini \
		-t$(TESTCACHE)/format/ini/format_ini.td $(testlib_format_ini_any_srcs)

# fs (+any)
testlib_fs_any_srcs = \
	$(STDLIB)/fs/types.ha \
	$(STDLIB)/fs/fs.ha \
	$(STDLIB)/fs/util.ha

$(TESTCACHE)/fs/fs-any.ssa: $(testlib_fs_any_srcs) $(testlib_rt) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_path_$(PLATFORM)) $(testlib_time_$(PLATFORM)) $(testlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/fs
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nfs \
		-t$(TESTCACHE)/fs/fs.td $(testlib_fs_any_srcs)

# getopt (+any)
testlib_getopt_any_srcs = \
	$(STDLIB)/getopt/getopts.ha

$(TESTCACHE)/getopt/getopt-any.ssa: $(testlib_getopt_any_srcs) $(testlib_rt) $(testlib_encoding_utf8_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/getopt
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ngetopt \
		-t$(TESTCACHE)/getopt/getopt.td $(testlib_getopt_any_srcs)

# glob (+any)
testlib_glob_any_srcs = \
	$(STDLIB)/glob/glob.ha \
	$(STDLIB)/glob/+test.ha

$(TESTCACHE)/glob/glob-any.ssa: $(testlib_glob_any_srcs) $(testlib_rt) $(testlib_fnmatch_$(PLATFORM)) $(testlib_fs_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_sort_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_strio_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/glob
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nglob \
		-t$(TESTCACHE)/glob/glob.td $(testlib_glob_any_srcs)

# hare::ast (+any)
testlib_hare_ast_any_srcs = \
	$(STDLIB)/hare/ast/decl.ha \
	$(STDLIB)/hare/ast/expr.ha \
	$(STDLIB)/hare/ast/ident.ha \
	$(STDLIB)/hare/ast/import.ha \
	$(STDLIB)/hare/ast/type.ha \
	$(STDLIB)/hare/ast/unit.ha

$(TESTCACHE)/hare/ast/hare_ast-any.ssa: $(testlib_hare_ast_any_srcs) $(testlib_rt) $(testlib_hare_lex_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/hare/ast
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nhare::ast \
		-t$(TESTCACHE)/hare/ast/hare_ast.td $(testlib_hare_ast_any_srcs)

# hare::lex (+any)
testlib_hare_lex_any_srcs = \
	$(STDLIB)/hare/lex/token.ha \
	$(STDLIB)/hare/lex/lex.ha \
	$(STDLIB)/hare/lex/+test.ha

$(TESTCACHE)/hare/lex/hare_lex-any.ssa: $(testlib_hare_lex_any_srcs) $(testlib_rt) $(testlib_io_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_types_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_sort_$(PLATFORM)) $(testlib_strio_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/hare/lex
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nhare::lex \
		-t$(TESTCACHE)/hare/lex/hare_lex.td $(testlib_hare_lex_any_srcs)

# hare::module (+any)
testlib_hare_module_any_srcs = \
	$(STDLIB)/hare/module/types.ha \
	$(STDLIB)/hare/module/context.ha \
	$(STDLIB)/hare/module/scan.ha \
	$(STDLIB)/hare/module/manifest.ha \
	$(STDLIB)/hare/module/walk.ha

$(TESTCACHE)/hare/module/hare_module-any.ssa: $(testlib_hare_module_any_srcs) $(testlib_rt) $(testlib_hare_ast_$(PLATFORM)) $(testlib_hare_lex_$(PLATFORM)) $(testlib_hare_parse_$(PLATFORM)) $(testlib_hare_unparse_$(PLATFORM)) $(testlib_strio_$(PLATFORM)) $(testlib_fs_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_hash_$(PLATFORM)) $(testlib_crypto_sha256_$(PLATFORM)) $(testlib_dirs_$(PLATFORM)) $(testlib_bytes_$(PLATFORM)) $(testlib_encoding_utf8_$(PLATFORM)) $(testlib_ascii_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_time_$(PLATFORM)) $(testlib_slices_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_strconv_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_encoding_hex_$(PLATFORM)) $(testlib_sort_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_temp_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/hare/module
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nhare::module \
		-t$(TESTCACHE)/hare/module/hare_module.td $(testlib_hare_module_any_srcs)

# hare::parse (+any)
testlib_hare_parse_any_srcs = \
	$(STDLIB)/hare/parse/decl.ha \
	$(STDLIB)/hare/parse/expr.ha \
	$(STDLIB)/hare/parse/ident.ha \
	$(STDLIB)/hare/parse/import.ha \
	$(STDLIB)/hare/parse/parse.ha \
	$(STDLIB)/hare/parse/type.ha \
	$(STDLIB)/hare/parse/unit.ha \
	$(STDLIB)/hare/parse/+test/expr.ha \
	$(STDLIB)/hare/parse/+test/ident.ha \
	$(STDLIB)/hare/parse/+test/loc.ha \
	$(STDLIB)/hare/parse/+test/roundtrip.ha \
	$(STDLIB)/hare/parse/+test/types.ha \
	$(STDLIB)/hare/parse/+test/unit.ha

$(TESTCACHE)/hare/parse/hare_parse-any.ssa: $(testlib_hare_parse_any_srcs) $(testlib_rt) $(testlib_ascii_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_hare_ast_$(PLATFORM)) $(testlib_hare_lex_$(PLATFORM)) $(testlib_hare_unparse_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strio_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/hare/parse
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nhare::parse \
		-t$(TESTCACHE)/hare/parse/hare_parse.td $(testlib_hare_parse_any_srcs)

# hare::types (+any)
testlib_hare_types_any_srcs = \
	$(STDLIB)/hare/types/arch.ha \
	$(STDLIB)/hare/types/builtins.ha \
	$(STDLIB)/hare/types/class.ha \
	$(STDLIB)/hare/types/hash.ha \
	$(STDLIB)/hare/types/lookup.ha \
	$(STDLIB)/hare/types/store.ha \
	$(STDLIB)/hare/types/types.ha \
	$(STDLIB)/hare/types/+test.ha

$(TESTCACHE)/hare/types/hare_types-any.ssa: $(testlib_hare_types_any_srcs) $(testlib_rt) $(testlib_hare_ast_$(PLATFORM)) $(testlib_hare_parse_$(PLATFORM)) $(testlib_hash_$(PLATFORM)) $(testlib_hash_fnv_$(PLATFORM)) $(testlib_endian_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/hare/types
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nhare::types \
		-t$(TESTCACHE)/hare/types/hare_types.td $(testlib_hare_types_any_srcs)

# hare::unit (+any)
testlib_hare_unit_any_srcs = \
	$(STDLIB)/hare/unit/check.ha \
	$(STDLIB)/hare/unit/context.ha \
	$(STDLIB)/hare/unit/errors.ha \
	$(STDLIB)/hare/unit/expr.ha \
	$(STDLIB)/hare/unit/process.ha \
	$(STDLIB)/hare/unit/scan.ha \
	$(STDLIB)/hare/unit/scope.ha \
	$(STDLIB)/hare/unit/unit.ha \
	$(STDLIB)/hare/unit/+test.ha

$(TESTCACHE)/hare/unit/hare_unit-any.ssa: $(testlib_hare_unit_any_srcs) $(testlib_rt) $(testlib_hare_ast_$(PLATFORM)) $(testlib_hare_types_$(PLATFORM)) $(testlib_hash_$(PLATFORM)) $(testlib_hash_fnv_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_hare_lex_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_hare_parse_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/hare/unit
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nhare::unit \
		-t$(TESTCACHE)/hare/unit/hare_unit.td $(testlib_hare_unit_any_srcs)

# hare::unparse (+any)
testlib_hare_unparse_any_srcs = \
	$(STDLIB)/hare/unparse/expr.ha \
	$(STDLIB)/hare/unparse/decl.ha \
	$(STDLIB)/hare/unparse/ident.ha \
	$(STDLIB)/hare/unparse/import.ha \
	$(STDLIB)/hare/unparse/type.ha \
	$(STDLIB)/hare/unparse/unit.ha \
	$(STDLIB)/hare/unparse/util.ha

$(TESTCACHE)/hare/unparse/hare_unparse-any.ssa: $(testlib_hare_unparse_any_srcs) $(testlib_rt) $(testlib_fmt_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_strio_$(PLATFORM)) $(testlib_hare_ast_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/hare/unparse
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nhare::unparse \
		-t$(TESTCACHE)/hare/unparse/hare_unparse.td $(testlib_hare_unparse_any_srcs)

# hash (+any)
testlib_hash_any_srcs = \
	$(STDLIB)/hash/hash.ha

$(TESTCACHE)/hash/hash-any.ssa: $(testlib_hash_any_srcs) $(testlib_rt) $(testlib_io_$(PLATFORM)) $(testlib_fmt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/hash
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nhash \
		-t$(TESTCACHE)/hash/hash.td $(testlib_hash_any_srcs)

# hash::adler32 (+any)
testlib_hash_adler32_any_srcs = \
	$(STDLIB)/hash/adler32/adler32.ha

$(TESTCACHE)/hash/adler32/hash_adler32-any.ssa: $(testlib_hash_adler32_any_srcs) $(testlib_rt) $(testlib_endian_$(PLATFORM)) $(testlib_hash_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/hash/adler32
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nhash::adler32 \
		-t$(TESTCACHE)/hash/adler32/hash_adler32.td $(testlib_hash_adler32_any_srcs)

# hash::crc16 (+any)
testlib_hash_crc16_any_srcs = \
	$(STDLIB)/hash/crc16/crc16.ha

$(TESTCACHE)/hash/crc16/hash_crc16-any.ssa: $(testlib_hash_crc16_any_srcs) $(testlib_rt) $(testlib_endian_$(PLATFORM)) $(testlib_hash_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/hash/crc16
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nhash::crc16 \
		-t$(TESTCACHE)/hash/crc16/hash_crc16.td $(testlib_hash_crc16_any_srcs)

# hash::crc32 (+any)
testlib_hash_crc32_any_srcs = \
	$(STDLIB)/hash/crc32/crc32.ha

$(TESTCACHE)/hash/crc32/hash_crc32-any.ssa: $(testlib_hash_crc32_any_srcs) $(testlib_rt) $(testlib_endian_$(PLATFORM)) $(testlib_hash_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/hash/crc32
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nhash::crc32 \
		-t$(TESTCACHE)/hash/crc32/hash_crc32.td $(testlib_hash_crc32_any_srcs)

# hash::crc64 (+any)
testlib_hash_crc64_any_srcs = \
	$(STDLIB)/hash/crc64/crc64.ha

$(TESTCACHE)/hash/crc64/hash_crc64-any.ssa: $(testlib_hash_crc64_any_srcs) $(testlib_rt) $(testlib_endian_$(PLATFORM)) $(testlib_hash_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/hash/crc64
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nhash::crc64 \
		-t$(TESTCACHE)/hash/crc64/hash_crc64.td $(testlib_hash_crc64_any_srcs)

# hash::fnv (+any)
testlib_hash_fnv_any_srcs = \
	$(STDLIB)/hash/fnv/fnv.ha

$(TESTCACHE)/hash/fnv/hash_fnv-any.ssa: $(testlib_hash_fnv_any_srcs) $(testlib_rt) $(testlib_hash_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/hash/fnv
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nhash::fnv \
		-t$(TESTCACHE)/hash/fnv/hash_fnv.td $(testlib_hash_fnv_any_srcs)

# io (+linux)
testlib_io_linux_srcs = \
	$(STDLIB)/io/arch+$(ARCH).ha \
	$(STDLIB)/io/+linux/file.ha \
	$(STDLIB)/io/+linux/mmap.ha \
	$(STDLIB)/io/+linux/vector.ha \
	$(STDLIB)/io/copy.ha \
	$(STDLIB)/io/drain.ha \
	$(STDLIB)/io/empty.ha \
	$(STDLIB)/io/handle.ha \
	$(STDLIB)/io/limit.ha \
	$(STDLIB)/io/stream.ha \
	$(STDLIB)/io/tee.ha \
	$(STDLIB)/io/types.ha \
	$(STDLIB)/io/util.ha \
	$(STDLIB)/io/+test/limit.ha \
	$(STDLIB)/io/+test/stream.ha

# io (+freebsd)
testlib_io_freebsd_srcs = \
	$(STDLIB)/io/arch+$(ARCH).ha \
	$(STDLIB)/io/+freebsd/file.ha \
	$(STDLIB)/io/+freebsd/mmap.ha \
	$(STDLIB)/io/+freebsd/vector.ha \
	$(STDLIB)/io/copy.ha \
	$(STDLIB)/io/drain.ha \
	$(STDLIB)/io/empty.ha \
	$(STDLIB)/io/handle.ha \
	$(STDLIB)/io/limit.ha \
	$(STDLIB)/io/stream.ha \
	$(STDLIB)/io/tee.ha \
	$(STDLIB)/io/types.ha \
	$(STDLIB)/io/util.ha \
	$(STDLIB)/io/+test/limit.ha \
	$(STDLIB)/io/+test/stream.ha

# io (+openbsd)
testlib_io_openbsd_srcs = \
	$(STDLIB)/io/arch+$(ARCH).ha \
	$(STDLIB)/io/+openbsd/file.ha \
	$(STDLIB)/io/+openbsd/mmap.ha \
	$(STDLIB)/io/+openbsd/vector.ha \
	$(STDLIB)/io/copy.ha \
	$(STDLIB)/io/drain.ha \
	$(STDLIB)/io/empty.ha \
	$(STDLIB)/io/handle.ha \
	$(STDLIB)/io/limit.ha \
	$(STDLIB)/io/stream.ha \
	$(STDLIB)/io/tee.ha \
	$(STDLIB)/io/types.ha \
	$(STDLIB)/io/util.ha \
	$(STDLIB)/io/+test/limit.ha \
	$(STDLIB)/io/+test/stream.ha

$(TESTCACHE)/io/io-linux.ssa: $(testlib_io_linux_srcs) $(testlib_rt) $(testlib_strings_$(PLATFORM)) $(testlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/io
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nio \
		-t$(TESTCACHE)/io/io.td $(testlib_io_linux_srcs)

$(TESTCACHE)/io/io-freebsd.ssa: $(testlib_io_freebsd_srcs) $(testlib_rt) $(testlib_strings_$(PLATFORM)) $(testlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/io
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nio \
		-t$(TESTCACHE)/io/io.td $(testlib_io_freebsd_srcs)

$(TESTCACHE)/io/io-openbsd.ssa: $(testlib_io_openbsd_srcs) $(testlib_rt) $(testlib_strings_$(PLATFORM)) $(testlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/io
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nio \
		-t$(TESTCACHE)/io/io.td $(testlib_io_openbsd_srcs)

# linux (+linux)
testlib_linux_linux_srcs = \
	$(STDLIB)/linux/start.ha \
	$(STDLIB)/linux/env.ha

$(TESTCACHE)/linux/linux-linux.ssa: $(testlib_linux_linux_srcs) $(testlib_rt) $(testlib_format_elf_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/linux
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nlinux \
		-t$(TESTCACHE)/linux/linux.td $(testlib_linux_linux_srcs)

# linux::keyctl (+linux)
testlib_linux_keyctl_linux_srcs = \
	$(STDLIB)/linux/keyctl/keyctl.ha \
	$(STDLIB)/linux/keyctl/types.ha

$(TESTCACHE)/linux/keyctl/linux_keyctl-linux.ssa: $(testlib_linux_keyctl_linux_srcs) $(testlib_rt) $(testlib_rt_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_bytes_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/linux/keyctl
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nlinux::keyctl \
		-t$(TESTCACHE)/linux/keyctl/linux_keyctl.td $(testlib_linux_keyctl_linux_srcs)

# linux::timerfd (+linux)
testlib_linux_timerfd_linux_srcs = \
	$(STDLIB)/linux/timerfd/timerfd.ha

$(TESTCACHE)/linux/timerfd/linux_timerfd-linux.ssa: $(testlib_linux_timerfd_linux_srcs) $(testlib_rt) $(testlib_errors_$(PLATFORM)) $(testlib_rt_$(PLATFORM)) $(testlib_time_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_endian_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/linux/timerfd
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nlinux::timerfd \
		-t$(TESTCACHE)/linux/timerfd/linux_timerfd.td $(testlib_linux_timerfd_linux_srcs)

# linux::vdso (+linux)
testlib_linux_vdso_linux_srcs = \
	$(STDLIB)/linux/vdso/vdso.ha

$(TESTCACHE)/linux/vdso/linux_vdso-linux.ssa: $(testlib_linux_vdso_linux_srcs) $(testlib_rt) $(testlib_linux_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_format_elf_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/linux/vdso
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nlinux::vdso \
		-t$(TESTCACHE)/linux/vdso/linux_vdso.td $(testlib_linux_vdso_linux_srcs)

# log (+linux)
testlib_log_linux_srcs = \
	$(STDLIB)/log/logger.ha \
	$(STDLIB)/log/global.ha \
	$(STDLIB)/log/funcs.ha

$(TESTCACHE)/log/log-linux.ssa: $(testlib_log_linux_srcs) $(testlib_rt) $(testlib_datetime_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/log
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nlog \
		-t$(TESTCACHE)/log/log.td $(testlib_log_linux_srcs)

# log (+freebsd)
testlib_log_freebsd_srcs = \
	$(STDLIB)/log/logger.ha \
	$(STDLIB)/log/global.ha \
	$(STDLIB)/log/funcs.ha

$(TESTCACHE)/log/log-freebsd.ssa: $(testlib_log_freebsd_srcs) $(testlib_rt) $(testlib_datetime_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/log
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nlog \
		-t$(TESTCACHE)/log/log.td $(testlib_log_freebsd_srcs)

# log (+openbsd)
testlib_log_openbsd_srcs = \
	$(STDLIB)/log/logger.ha \
	$(STDLIB)/log/global.ha \
	$(STDLIB)/log/funcs.ha

$(TESTCACHE)/log/log-openbsd.ssa: $(testlib_log_openbsd_srcs) $(testlib_rt) $(testlib_datetime_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/log
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nlog \
		-t$(TESTCACHE)/log/log.td $(testlib_log_openbsd_srcs)

# math (+any)
testlib_math_any_srcs = \
	$(STDLIB)/math/math.ha \
	$(STDLIB)/math/fenv_func.ha \
	$(STDLIB)/math/fenv+$(ARCH).ha \
	$(STDLIB)/math/floats.ha \
	$(STDLIB)/math/ints.ha \
	$(STDLIB)/math/uints.ha \
	$(STDLIB)/math/trig.ha \
	$(STDLIB)/math/data+test.ha

$(TESTCACHE)/math/math-any.ssa: $(testlib_math_any_srcs) $(testlib_rt) $(testlib_types_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/math
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nmath \
		-t$(TESTCACHE)/math/math.td $(testlib_math_any_srcs)

# math::random (+any)
testlib_math_random_any_srcs = \
	$(STDLIB)/math/random/random.ha

$(TESTCACHE)/math/random/math_random-any.ssa: $(testlib_math_random_any_srcs) $(testlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/math/random
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nmath::random \
		-t$(TESTCACHE)/math/random/math_random.td $(testlib_math_random_any_srcs)

# net (+linux)
testlib_net_linux_srcs = \
	$(STDLIB)/net/+linux.ha \
	$(STDLIB)/net/errors.ha \
	$(STDLIB)/net/msg.ha

$(TESTCACHE)/net/net-linux.ssa: $(testlib_net_linux_srcs) $(testlib_rt) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_net_ip_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_rt_$(PLATFORM)) $(testlib_fmt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/net
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nnet \
		-t$(TESTCACHE)/net/net.td $(testlib_net_linux_srcs)

# net (+freebsd)
testlib_net_freebsd_srcs = \
	$(STDLIB)/net/+freebsd.ha \
	$(STDLIB)/net/errors.ha \
	$(STDLIB)/net/msg.ha

$(TESTCACHE)/net/net-freebsd.ssa: $(testlib_net_freebsd_srcs) $(testlib_rt) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_net_ip_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_rt_$(PLATFORM)) $(testlib_fmt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/net
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nnet \
		-t$(TESTCACHE)/net/net.td $(testlib_net_freebsd_srcs)

# net (+openbsd)
testlib_net_openbsd_srcs = \
	$(STDLIB)/net/+openbsd.ha \
	$(STDLIB)/net/errors.ha \
	$(STDLIB)/net/msg.ha

$(TESTCACHE)/net/net-openbsd.ssa: $(testlib_net_openbsd_srcs) $(testlib_rt) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_net_ip_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_rt_$(PLATFORM)) $(testlib_fmt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/net
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nnet \
		-t$(TESTCACHE)/net/net.td $(testlib_net_openbsd_srcs)

# net::dial (+any)
testlib_net_dial_any_srcs = \
	$(STDLIB)/net/dial/registry.ha \
	$(STDLIB)/net/dial/dial.ha \
	$(STDLIB)/net/dial/ip.ha \
	$(STDLIB)/net/dial/resolve.ha

$(TESTCACHE)/net/dial/net_dial-any.ssa: $(testlib_net_dial_any_srcs) $(testlib_rt) $(testlib_io_$(PLATFORM)) $(testlib_net_$(PLATFORM)) $(testlib_net_ip_$(PLATFORM)) $(testlib_net_tcp_$(PLATFORM)) $(testlib_net_udp_$(PLATFORM)) $(testlib_net_dns_$(PLATFORM)) $(testlib_crypto_random_$(PLATFORM)) $(testlib_strconv_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_unix_hosts_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/net/dial
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nnet::dial \
		-t$(TESTCACHE)/net/dial/net_dial.td $(testlib_net_dial_any_srcs)

# net::dns (+any)
testlib_net_dns_any_srcs = \
	$(STDLIB)/net/dns/decode.ha \
	$(STDLIB)/net/dns/error.ha \
	$(STDLIB)/net/dns/encode.ha \
	$(STDLIB)/net/dns/query.ha \
	$(STDLIB)/net/dns/types.ha

$(TESTCACHE)/net/dns/net_dns-any.ssa: $(testlib_net_dns_any_srcs) $(testlib_rt) $(testlib_ascii_$(PLATFORM)) $(testlib_endian_$(PLATFORM)) $(testlib_net_$(PLATFORM)) $(testlib_net_udp_$(PLATFORM)) $(testlib_net_ip_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_unix_resolvconf_$(PLATFORM)) $(testlib_unix_poll_$(PLATFORM)) $(testlib_rt_$(PLATFORM)) $(testlib_time_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/net/dns
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nnet::dns \
		-t$(TESTCACHE)/net/dns/net_dns.td $(testlib_net_dns_any_srcs)

# net::ip (+linux)
testlib_net_ip_linux_srcs = \
	$(STDLIB)/net/ip/+linux.ha \
	$(STDLIB)/net/ip/ip.ha \
	$(STDLIB)/net/ip/+test.ha

# net::ip (+freebsd)
testlib_net_ip_freebsd_srcs = \
	$(STDLIB)/net/ip/+freebsd.ha \
	$(STDLIB)/net/ip/ip.ha \
	$(STDLIB)/net/ip/+test.ha

# net::ip (+openbsd)
testlib_net_ip_openbsd_srcs = \
	$(STDLIB)/net/ip/+openbsd.ha \
	$(STDLIB)/net/ip/ip.ha \
	$(STDLIB)/net/ip/+test.ha

$(TESTCACHE)/net/ip/net_ip-linux.ssa: $(testlib_net_ip_linux_srcs) $(testlib_rt) $(testlib_bytes_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strconv_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_strio_$(PLATFORM)) $(testlib_fmt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/net/ip
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nnet::ip \
		-t$(TESTCACHE)/net/ip/net_ip.td $(testlib_net_ip_linux_srcs)

$(TESTCACHE)/net/ip/net_ip-freebsd.ssa: $(testlib_net_ip_freebsd_srcs) $(testlib_rt) $(testlib_bytes_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strconv_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_strio_$(PLATFORM)) $(testlib_fmt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/net/ip
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nnet::ip \
		-t$(TESTCACHE)/net/ip/net_ip.td $(testlib_net_ip_freebsd_srcs)

$(TESTCACHE)/net/ip/net_ip-openbsd.ssa: $(testlib_net_ip_openbsd_srcs) $(testlib_rt) $(testlib_bytes_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strconv_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_strio_$(PLATFORM)) $(testlib_fmt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/net/ip
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nnet::ip \
		-t$(TESTCACHE)/net/ip/net_ip.td $(testlib_net_ip_openbsd_srcs)

# net::tcp (+linux)
testlib_net_tcp_linux_srcs = \
	$(STDLIB)/net/tcp/+linux.ha \
	$(STDLIB)/net/tcp/listener.ha \
	$(STDLIB)/net/tcp/options.ha

$(TESTCACHE)/net/tcp/net_tcp-linux.ssa: $(testlib_net_tcp_linux_srcs) $(testlib_rt) $(testlib_io_$(PLATFORM)) $(testlib_net_$(PLATFORM)) $(testlib_net_ip_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_rt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/net/tcp
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nnet::tcp \
		-t$(TESTCACHE)/net/tcp/net_tcp.td $(testlib_net_tcp_linux_srcs)

# net::tcp (+freebsd)
testlib_net_tcp_freebsd_srcs = \
	$(STDLIB)/net/tcp/+freebsd.ha \
	$(STDLIB)/net/tcp/listener.ha \
	$(STDLIB)/net/tcp/options.ha

$(TESTCACHE)/net/tcp/net_tcp-freebsd.ssa: $(testlib_net_tcp_freebsd_srcs) $(testlib_rt) $(testlib_io_$(PLATFORM)) $(testlib_net_$(PLATFORM)) $(testlib_net_ip_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_rt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/net/tcp
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nnet::tcp \
		-t$(TESTCACHE)/net/tcp/net_tcp.td $(testlib_net_tcp_freebsd_srcs)

# net::tcp (+openbsd)
testlib_net_tcp_openbsd_srcs = \
	$(STDLIB)/net/tcp/+openbsd.ha \
	$(STDLIB)/net/tcp/listener.ha \
	$(STDLIB)/net/tcp/options.ha

$(TESTCACHE)/net/tcp/net_tcp-openbsd.ssa: $(testlib_net_tcp_openbsd_srcs) $(testlib_rt) $(testlib_io_$(PLATFORM)) $(testlib_net_$(PLATFORM)) $(testlib_net_ip_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_rt_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/net/tcp
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nnet::tcp \
		-t$(TESTCACHE)/net/tcp/net_tcp.td $(testlib_net_tcp_openbsd_srcs)

# net::udp (+linux)
testlib_net_udp_linux_srcs = \
	$(STDLIB)/net/udp/+linux.ha \
	$(STDLIB)/net/udp/options.ha

$(TESTCACHE)/net/udp/net_udp-linux.ssa: $(testlib_net_udp_linux_srcs) $(testlib_rt) $(testlib_net_$(PLATFORM)) $(testlib_net_ip_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_rt_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/net/udp
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nnet::udp \
		-t$(TESTCACHE)/net/udp/net_udp.td $(testlib_net_udp_linux_srcs)

# net::udp (+freebsd)
testlib_net_udp_freebsd_srcs = \
	$(STDLIB)/net/udp/+freebsd.ha \
	$(STDLIB)/net/udp/options.ha

$(TESTCACHE)/net/udp/net_udp-freebsd.ssa: $(testlib_net_udp_freebsd_srcs) $(testlib_rt) $(testlib_net_$(PLATFORM)) $(testlib_net_ip_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_rt_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/net/udp
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nnet::udp \
		-t$(TESTCACHE)/net/udp/net_udp.td $(testlib_net_udp_freebsd_srcs)

# net::udp (+openbsd)
testlib_net_udp_openbsd_srcs = \
	$(STDLIB)/net/udp/+openbsd.ha \
	$(STDLIB)/net/udp/options.ha

$(TESTCACHE)/net/udp/net_udp-openbsd.ssa: $(testlib_net_udp_openbsd_srcs) $(testlib_rt) $(testlib_net_$(PLATFORM)) $(testlib_net_ip_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_rt_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/net/udp
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nnet::udp \
		-t$(TESTCACHE)/net/udp/net_udp.td $(testlib_net_udp_openbsd_srcs)

# net::unix (+linux)
testlib_net_unix_linux_srcs = \
	$(STDLIB)/net/unix/+linux.ha \
	$(STDLIB)/net/unix/addr.ha \
	$(STDLIB)/net/unix/cmsg.ha \
	$(STDLIB)/net/unix/dial.ha \
	$(STDLIB)/net/unix/listener.ha \
	$(STDLIB)/net/unix/options.ha \
	$(STDLIB)/net/unix/socketpair.ha

$(TESTCACHE)/net/unix/net_unix-linux.ssa: $(testlib_net_unix_linux_srcs) $(testlib_rt) $(testlib_net_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_types_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_net_dial_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/net/unix
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nnet::unix \
		-t$(TESTCACHE)/net/unix/net_unix.td $(testlib_net_unix_linux_srcs)

# net::unix (+freebsd)
testlib_net_unix_freebsd_srcs = \
	$(STDLIB)/net/unix/+freebsd.ha \
	$(STDLIB)/net/unix/addr.ha \
	$(STDLIB)/net/unix/cmsg.ha \
	$(STDLIB)/net/unix/dial.ha \
	$(STDLIB)/net/unix/listener.ha \
	$(STDLIB)/net/unix/options.ha \
	$(STDLIB)/net/unix/socketpair.ha

$(TESTCACHE)/net/unix/net_unix-freebsd.ssa: $(testlib_net_unix_freebsd_srcs) $(testlib_rt) $(testlib_net_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_types_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_net_dial_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/net/unix
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nnet::unix \
		-t$(TESTCACHE)/net/unix/net_unix.td $(testlib_net_unix_freebsd_srcs)

# net::unix (+openbsd)
testlib_net_unix_openbsd_srcs = \
	$(STDLIB)/net/unix/+openbsd.ha \
	$(STDLIB)/net/unix/addr.ha \
	$(STDLIB)/net/unix/cmsg.ha \
	$(STDLIB)/net/unix/dial.ha \
	$(STDLIB)/net/unix/listener.ha \
	$(STDLIB)/net/unix/options.ha \
	$(STDLIB)/net/unix/socketpair.ha

$(TESTCACHE)/net/unix/net_unix-openbsd.ssa: $(testlib_net_unix_openbsd_srcs) $(testlib_rt) $(testlib_net_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_types_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_net_dial_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/net/unix
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nnet::unix \
		-t$(TESTCACHE)/net/unix/net_unix.td $(testlib_net_unix_openbsd_srcs)

# net::uri (+any)
testlib_net_uri_any_srcs = \
	$(STDLIB)/net/uri/fmt.ha \
	$(STDLIB)/net/uri/parse.ha \
	$(STDLIB)/net/uri/query.ha \
	$(STDLIB)/net/uri/uri.ha \
	$(STDLIB)/net/uri/+test.ha

$(TESTCACHE)/net/uri/net_uri-any.ssa: $(testlib_net_uri_any_srcs) $(testlib_rt) $(testlib_ascii_$(PLATFORM)) $(testlib_ip_$(PLATFORM)) $(testlib_net_ip_$(PLATFORM)) $(testlib_strconv_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_strio_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/net/uri
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nnet::uri \
		-t$(TESTCACHE)/net/uri/net_uri.td $(testlib_net_uri_any_srcs)

# os (+linux)
testlib_os_linux_srcs = \
	$(STDLIB)/os/+linux/dirfdfs.ha \
	$(STDLIB)/os/+linux/environ.ha \
	$(STDLIB)/os/+linux/exit.ha \
	$(STDLIB)/os/+linux/fs.ha \
	$(STDLIB)/os/+linux/memory.ha \
	$(STDLIB)/os/+linux/stdfd.ha \
	$(STDLIB)/os/fs.ha

$(TESTCACHE)/os/os-linux.ssa: $(testlib_os_linux_srcs) $(testlib_rt) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_types_$(PLATFORM)) $(testlib_fs_$(PLATFORM)) $(testlib_encoding_utf8_$(PLATFORM)) $(testlib_bytes_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/os
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nos \
		-t$(TESTCACHE)/os/os.td $(testlib_os_linux_srcs)

# os (+freebsd)
testlib_os_freebsd_srcs = \
	$(STDLIB)/os/+freebsd/environ.ha \
	$(STDLIB)/os/+freebsd/exit.ha \
	$(STDLIB)/os/+freebsd/dirfdfs.ha \
	$(STDLIB)/os/+freebsd/stdfd.ha \
	$(STDLIB)/os/+freebsd/fs.ha \
	$(STDLIB)/os/fs.ha

$(TESTCACHE)/os/os-freebsd.ssa: $(testlib_os_freebsd_srcs) $(testlib_rt) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_types_$(PLATFORM)) $(testlib_fs_$(PLATFORM)) $(testlib_encoding_utf8_$(PLATFORM)) $(testlib_bytes_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/os
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nos \
		-t$(TESTCACHE)/os/os.td $(testlib_os_freebsd_srcs)

# os (+openbsd)
testlib_os_openbsd_srcs = \
	$(STDLIB)/os/+openbsd/environ.ha \
	$(STDLIB)/os/+openbsd/exit.ha \
	$(STDLIB)/os/+openbsd/dirfdfs.ha \
	$(STDLIB)/os/+openbsd/stdfd.ha \
	$(STDLIB)/os/+openbsd/fs.ha \
	$(STDLIB)/os/fs.ha

$(TESTCACHE)/os/os-openbsd.ssa: $(testlib_os_openbsd_srcs) $(testlib_rt) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_types_$(PLATFORM)) $(testlib_fs_$(PLATFORM)) $(testlib_encoding_utf8_$(PLATFORM)) $(testlib_bytes_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/os
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nos \
		-t$(TESTCACHE)/os/os.td $(testlib_os_openbsd_srcs)

# os::exec (+linux)
testlib_os_exec_linux_srcs = \
	$(STDLIB)/os/exec/exec+linux.ha \
	$(STDLIB)/os/exec/process+linux.ha \
	$(STDLIB)/os/exec/types.ha \
	$(STDLIB)/os/exec/cmd.ha

$(TESTCACHE)/os/exec/os_exec-linux.ssa: $(testlib_os_exec_linux_srcs) $(testlib_rt) $(testlib_os_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_bytes_$(PLATFORM)) $(testlib_path_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_unix_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/os/exec
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nos::exec \
		-t$(TESTCACHE)/os/exec/os_exec.td $(testlib_os_exec_linux_srcs)

# os::exec (+freebsd)
testlib_os_exec_freebsd_srcs = \
	$(STDLIB)/os/exec/exec+freebsd.ha \
	$(STDLIB)/os/exec/process+freebsd.ha \
	$(STDLIB)/os/exec/types.ha \
	$(STDLIB)/os/exec/cmd.ha

$(TESTCACHE)/os/exec/os_exec-freebsd.ssa: $(testlib_os_exec_freebsd_srcs) $(testlib_rt) $(testlib_os_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_bytes_$(PLATFORM)) $(testlib_path_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_unix_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/os/exec
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nos::exec \
		-t$(TESTCACHE)/os/exec/os_exec.td $(testlib_os_exec_freebsd_srcs)

# os::exec (+openbsd)
testlib_os_exec_openbsd_srcs = \
	$(STDLIB)/os/exec/exec+openbsd.ha \
	$(STDLIB)/os/exec/process+openbsd.ha \
	$(STDLIB)/os/exec/types.ha \
	$(STDLIB)/os/exec/cmd.ha

$(TESTCACHE)/os/exec/os_exec-openbsd.ssa: $(testlib_os_exec_openbsd_srcs) $(testlib_rt) $(testlib_os_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_bytes_$(PLATFORM)) $(testlib_path_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_unix_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/os/exec
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nos::exec \
		-t$(TESTCACHE)/os/exec/os_exec.td $(testlib_os_exec_openbsd_srcs)

# path (+any)
testlib_path_any_srcs = \
	$(STDLIB)/path/+$(PLATFORM).ha \
	$(STDLIB)/path/buffer.ha \
	$(STDLIB)/path/util.ha \
	$(STDLIB)/path/join.ha \
	$(STDLIB)/path/names.ha \
	$(STDLIB)/path/iter.ha

$(TESTCACHE)/path/path-any.ssa: $(testlib_path_any_srcs) $(testlib_rt) $(testlib_strings_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_bytes_$(PLATFORM)) $(testlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/path
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Npath \
		-t$(TESTCACHE)/path/path.td $(testlib_path_any_srcs)

# regex (+any)
testlib_regex_any_srcs = \
	$(STDLIB)/regex/regex.ha \
	$(STDLIB)/regex/+test.ha

$(TESTCACHE)/regex/regex-any.ssa: $(testlib_regex_any_srcs) $(testlib_rt) $(testlib_encoding_utf8_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_strconv_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/regex
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nregex \
		-t$(TESTCACHE)/regex/regex.td $(testlib_regex_any_srcs)

# shlex (+any)
testlib_shlex_any_srcs = \
	$(STDLIB)/shlex/escape.ha \
	$(STDLIB)/shlex/split.ha \
	$(STDLIB)/shlex/+test.ha

$(TESTCACHE)/shlex/shlex-any.ssa: $(testlib_shlex_any_srcs) $(testlib_rt) $(testlib_ascii_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_encoding_utf8_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_strio_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/shlex
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nshlex \
		-t$(TESTCACHE)/shlex/shlex.td $(testlib_shlex_any_srcs)

# slices (+any)
testlib_slices_any_srcs = \
	$(STDLIB)/slices/cap.ha \
	$(STDLIB)/slices/reverse.ha \
	$(STDLIB)/slices/trunc.ha \
	$(STDLIB)/slices/void.ha

$(TESTCACHE)/slices/slices-any.ssa: $(testlib_slices_any_srcs) $(testlib_rt) $(testlib_types_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/slices
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nslices \
		-t$(TESTCACHE)/slices/slices.td $(testlib_slices_any_srcs)

# sort (+any)
testlib_sort_any_srcs = \
	$(STDLIB)/sort/bisect.ha \
	$(STDLIB)/sort/search.ha \
	$(STDLIB)/sort/sort.ha \
	$(STDLIB)/sort/types.ha \
	$(STDLIB)/sort/+test.ha

$(TESTCACHE)/sort/sort-any.ssa: $(testlib_sort_any_srcs) $(testlib_rt) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/sort
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nsort \
		-t$(TESTCACHE)/sort/sort.td $(testlib_sort_any_srcs)

# strconv (+any)
testlib_strconv_any_srcs = \
	$(STDLIB)/strconv/types.ha \
	$(STDLIB)/strconv/itos.ha \
	$(STDLIB)/strconv/utos.ha \
	$(STDLIB)/strconv/stou.ha \
	$(STDLIB)/strconv/stoi.ha \
	$(STDLIB)/strconv/numeric.ha \
	$(STDLIB)/strconv/ftos.ha \
	$(STDLIB)/strconv/stof.ha \
	$(STDLIB)/strconv/stof_data.ha \
	$(STDLIB)/strconv/+test/stou.ha \
	$(STDLIB)/strconv/+test/stoi.ha

$(TESTCACHE)/strconv/strconv-any.ssa: $(testlib_strconv_any_srcs) $(testlib_rt) $(testlib_types_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_ascii_$(PLATFORM)) $(testlib_math_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/strconv
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nstrconv \
		-t$(TESTCACHE)/strconv/strconv.td $(testlib_strconv_any_srcs)

# strings (+any)
testlib_strings_any_srcs = \
	$(STDLIB)/strings/cap.ha \
	$(STDLIB)/strings/concat.ha \
	$(STDLIB)/strings/contains.ha \
	$(STDLIB)/strings/cstrings.ha \
	$(STDLIB)/strings/dup.ha \
	$(STDLIB)/strings/iter.ha \
	$(STDLIB)/strings/sub.ha \
	$(STDLIB)/strings/suffix.ha \
	$(STDLIB)/strings/tokenize.ha \
	$(STDLIB)/strings/utf8.ha \
	$(STDLIB)/strings/index.ha \
	$(STDLIB)/strings/trim.ha \
	$(STDLIB)/strings/compare.ha \
	$(STDLIB)/strings/pad.ha \
	$(STDLIB)/strings/replace.ha

$(TESTCACHE)/strings/strings-any.ssa: $(testlib_strings_any_srcs) $(testlib_rt) $(testlib_bytes_$(PLATFORM)) $(testlib_encoding_utf8_$(PLATFORM)) $(testlib_types_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/strings
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nstrings \
		-t$(TESTCACHE)/strings/strings.td $(testlib_strings_any_srcs)

# strio (+any)
testlib_strio_any_srcs = \
	$(STDLIB)/strio/stream.ha \
	$(STDLIB)/strio/ops.ha

$(TESTCACHE)/strio/strio-any.ssa: $(testlib_strio_any_srcs) $(testlib_rt) $(testlib_io_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_slices_$(PLATFORM)) $(testlib_encoding_utf8_$(PLATFORM)) $(testlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/strio
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nstrio \
		-t$(TESTCACHE)/strio/strio.td $(testlib_strio_any_srcs)

# temp (+linux)
testlib_temp_linux_srcs = \
	$(STDLIB)/temp/+linux.ha

$(TESTCACHE)/temp/temp-linux.ssa: $(testlib_temp_linux_srcs) $(testlib_rt) $(testlib_crypto_random_$(PLATFORM)) $(testlib_encoding_hex_$(PLATFORM)) $(testlib_fs_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_path_$(PLATFORM)) $(testlib_strio_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/temp
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ntemp \
		-t$(TESTCACHE)/temp/temp.td $(testlib_temp_linux_srcs)

# temp (+freebsd)
testlib_temp_freebsd_srcs = \
	$(STDLIB)/temp/+freebsd.ha

$(TESTCACHE)/temp/temp-freebsd.ssa: $(testlib_temp_freebsd_srcs) $(testlib_rt) $(testlib_crypto_random_$(PLATFORM)) $(testlib_encoding_hex_$(PLATFORM)) $(testlib_fs_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_path_$(PLATFORM)) $(testlib_strio_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/temp
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ntemp \
		-t$(TESTCACHE)/temp/temp.td $(testlib_temp_freebsd_srcs)

# temp (+openbsd)
testlib_temp_openbsd_srcs = \
	$(STDLIB)/temp/+openbsd.ha

$(TESTCACHE)/temp/temp-openbsd.ssa: $(testlib_temp_openbsd_srcs) $(testlib_rt) $(testlib_crypto_random_$(PLATFORM)) $(testlib_encoding_hex_$(PLATFORM)) $(testlib_fs_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_path_$(PLATFORM)) $(testlib_strio_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/temp
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ntemp \
		-t$(TESTCACHE)/temp/temp.td $(testlib_temp_openbsd_srcs)

# time (+linux)
testlib_time_linux_srcs = \
	$(STDLIB)/time/+linux/functions.ha \
	$(STDLIB)/time/+linux/+$(ARCH).ha \
	$(STDLIB)/time/arithm.ha \
	$(STDLIB)/time/conv.ha \
	$(STDLIB)/time/types.ha

$(TESTCACHE)/time/time-linux.ssa: $(testlib_time_linux_srcs) $(testlib_rt) $(testlib_linux_vdso_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/time
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ntime \
		-t$(TESTCACHE)/time/time.td $(testlib_time_linux_srcs)

# time (+freebsd)
testlib_time_freebsd_srcs = \
	$(STDLIB)/time/+freebsd/functions.ha \
	$(STDLIB)/time/arithm.ha \
	$(STDLIB)/time/conv.ha \
	$(STDLIB)/time/types.ha

$(TESTCACHE)/time/time-freebsd.ssa: $(testlib_time_freebsd_srcs) $(testlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/time
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ntime \
		-t$(TESTCACHE)/time/time.td $(testlib_time_freebsd_srcs)

# time (+openbsd)
testlib_time_openbsd_srcs = \
	$(STDLIB)/time/+openbsd/functions.ha \
	$(STDLIB)/time/arithm.ha \
	$(STDLIB)/time/conv.ha \
	$(STDLIB)/time/types.ha

$(TESTCACHE)/time/time-openbsd.ssa: $(testlib_time_openbsd_srcs) $(testlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/time
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ntime \
		-t$(TESTCACHE)/time/time.td $(testlib_time_openbsd_srcs)

# time::chrono (+linux)
testlib_time_chrono_linux_srcs = \
	$(STDLIB)/time/chrono/+linux.ha \
	$(STDLIB)/time/chrono/chronology.ha \
	$(STDLIB)/time/chrono/leapsec.ha \
	$(STDLIB)/time/chrono/timescale.ha \
	$(STDLIB)/time/chrono/timezone.ha \
	$(STDLIB)/time/chrono/tzdb.ha

$(TESTCACHE)/time/chrono/time_chrono-linux.ssa: $(testlib_time_chrono_linux_srcs) $(testlib_rt) $(testlib_bufio_$(PLATFORM)) $(testlib_endian_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_fs_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_strconv_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_time_$(PLATFORM)) $(testlib_path_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/time/chrono
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ntime::chrono \
		-t$(TESTCACHE)/time/chrono/time_chrono.td $(testlib_time_chrono_linux_srcs)

# time::chrono (+freebsd)
testlib_time_chrono_freebsd_srcs = \
	$(STDLIB)/time/chrono/+freebsd.ha \
	$(STDLIB)/time/chrono/chronology.ha \
	$(STDLIB)/time/chrono/leapsec.ha \
	$(STDLIB)/time/chrono/timescale.ha \
	$(STDLIB)/time/chrono/timezone.ha \
	$(STDLIB)/time/chrono/tzdb.ha

$(TESTCACHE)/time/chrono/time_chrono-freebsd.ssa: $(testlib_time_chrono_freebsd_srcs) $(testlib_rt) $(testlib_bufio_$(PLATFORM)) $(testlib_endian_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_fs_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_strconv_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_time_$(PLATFORM)) $(testlib_path_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/time/chrono
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ntime::chrono \
		-t$(TESTCACHE)/time/chrono/time_chrono.td $(testlib_time_chrono_freebsd_srcs)

# time::chrono (+openbsd)
testlib_time_chrono_openbsd_srcs = \
	$(STDLIB)/time/chrono/+openbsd.ha \
	$(STDLIB)/time/chrono/chronology.ha \
	$(STDLIB)/time/chrono/leapsec.ha \
	$(STDLIB)/time/chrono/timescale.ha \
	$(STDLIB)/time/chrono/timezone.ha \
	$(STDLIB)/time/chrono/tzdb.ha

$(TESTCACHE)/time/chrono/time_chrono-openbsd.ssa: $(testlib_time_chrono_openbsd_srcs) $(testlib_rt) $(testlib_bufio_$(PLATFORM)) $(testlib_endian_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_fs_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_strconv_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_time_$(PLATFORM)) $(testlib_path_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/time/chrono
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ntime::chrono \
		-t$(TESTCACHE)/time/chrono/time_chrono.td $(testlib_time_chrono_openbsd_srcs)

# types (+any)
testlib_types_any_srcs = \
	$(STDLIB)/types/limits.ha \
	$(STDLIB)/types/classes.ha \
	$(STDLIB)/types/arch+$(ARCH).ha

$(TESTCACHE)/types/types-any.ssa: $(testlib_types_any_srcs) $(testlib_rt)
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/types
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Ntypes \
		-t$(TESTCACHE)/types/types.td $(testlib_types_any_srcs)

# unix (+linux)
testlib_unix_linux_srcs = \
	$(STDLIB)/unix/+linux/nice.ha \
	$(STDLIB)/unix/+linux/pipe.ha \
	$(STDLIB)/unix/+linux/umask.ha \
	$(STDLIB)/unix/getuid.ha \
	$(STDLIB)/unix/setuid.ha

$(TESTCACHE)/unix/unix-linux.ssa: $(testlib_unix_linux_srcs) $(testlib_rt) $(testlib_errors_$(PLATFORM)) $(testlib_fs_$(PLATFORM)) $(testlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/unix
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nunix \
		-t$(TESTCACHE)/unix/unix.td $(testlib_unix_linux_srcs)

# unix (+freebsd)
testlib_unix_freebsd_srcs = \
	$(STDLIB)/unix/+freebsd/nice.ha \
	$(STDLIB)/unix/+freebsd/pipe.ha \
	$(STDLIB)/unix/+freebsd/umask.ha \
	$(STDLIB)/unix/getuid.ha \
	$(STDLIB)/unix/setuid.ha

$(TESTCACHE)/unix/unix-freebsd.ssa: $(testlib_unix_freebsd_srcs) $(testlib_rt) $(testlib_errors_$(PLATFORM)) $(testlib_fs_$(PLATFORM)) $(testlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/unix
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nunix \
		-t$(TESTCACHE)/unix/unix.td $(testlib_unix_freebsd_srcs)

# unix (+openbsd)
testlib_unix_openbsd_srcs = \
	$(STDLIB)/unix/+openbsd/nice.ha \
	$(STDLIB)/unix/+openbsd/pipe.ha \
	$(STDLIB)/unix/+openbsd/umask.ha \
	$(STDLIB)/unix/getuid.ha \
	$(STDLIB)/unix/setuid.ha

$(TESTCACHE)/unix/unix-openbsd.ssa: $(testlib_unix_openbsd_srcs) $(testlib_rt) $(testlib_errors_$(PLATFORM)) $(testlib_fs_$(PLATFORM)) $(testlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/unix
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nunix \
		-t$(TESTCACHE)/unix/unix.td $(testlib_unix_openbsd_srcs)

# unix::hosts (+linux)
testlib_unix_hosts_linux_srcs = \
	$(STDLIB)/unix/hosts/+linux.ha \
	$(STDLIB)/unix/hosts/lookup.ha

$(TESTCACHE)/unix/hosts/unix_hosts-linux.ssa: $(testlib_unix_hosts_linux_srcs) $(testlib_rt) $(testlib_os_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_net_ip_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/unix/hosts
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nunix::hosts \
		-t$(TESTCACHE)/unix/hosts/unix_hosts.td $(testlib_unix_hosts_linux_srcs)

# unix::hosts (+freebsd)
testlib_unix_hosts_freebsd_srcs = \
	$(STDLIB)/unix/hosts/+freebsd.ha \
	$(STDLIB)/unix/hosts/lookup.ha

$(TESTCACHE)/unix/hosts/unix_hosts-freebsd.ssa: $(testlib_unix_hosts_freebsd_srcs) $(testlib_rt) $(testlib_os_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_net_ip_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/unix/hosts
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nunix::hosts \
		-t$(TESTCACHE)/unix/hosts/unix_hosts.td $(testlib_unix_hosts_freebsd_srcs)

# unix::hosts (+openbsd)
testlib_unix_hosts_openbsd_srcs = \
	$(STDLIB)/unix/hosts/+openbsd.ha \
	$(STDLIB)/unix/hosts/lookup.ha

$(TESTCACHE)/unix/hosts/unix_hosts-openbsd.ssa: $(testlib_unix_hosts_openbsd_srcs) $(testlib_rt) $(testlib_os_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_net_ip_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/unix/hosts
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nunix::hosts \
		-t$(TESTCACHE)/unix/hosts/unix_hosts.td $(testlib_unix_hosts_openbsd_srcs)

# unix::passwd (+any)
testlib_unix_passwd_any_srcs = \
	$(STDLIB)/unix/passwd/group.ha \
	$(STDLIB)/unix/passwd/passwd.ha \
	$(STDLIB)/unix/passwd/types.ha

$(TESTCACHE)/unix/passwd/unix_passwd-any.ssa: $(testlib_unix_passwd_any_srcs) $(testlib_rt) $(testlib_bufio_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM)) $(testlib_strconv_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/unix/passwd
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nunix::passwd \
		-t$(TESTCACHE)/unix/passwd/unix_passwd.td $(testlib_unix_passwd_any_srcs)

# unix::poll (+linux)
testlib_unix_poll_linux_srcs = \
	$(STDLIB)/unix/poll/+linux.ha

$(TESTCACHE)/unix/poll/unix_poll-linux.ssa: $(testlib_unix_poll_linux_srcs) $(testlib_rt) $(testlib_rt_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_time_$(PLATFORM)) $(testlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/unix/poll
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nunix::poll \
		-t$(TESTCACHE)/unix/poll/unix_poll.td $(testlib_unix_poll_linux_srcs)

# unix::poll (+freebsd)
testlib_unix_poll_freebsd_srcs = \
	$(STDLIB)/unix/poll/+freebsd.ha

$(TESTCACHE)/unix/poll/unix_poll-freebsd.ssa: $(testlib_unix_poll_freebsd_srcs) $(testlib_rt) $(testlib_rt_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_time_$(PLATFORM)) $(testlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/unix/poll
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nunix::poll \
		-t$(TESTCACHE)/unix/poll/unix_poll.td $(testlib_unix_poll_freebsd_srcs)

# unix::poll (+openbsd)
testlib_unix_poll_openbsd_srcs = \
	$(STDLIB)/unix/poll/+openbsd.ha

$(TESTCACHE)/unix/poll/unix_poll-openbsd.ssa: $(testlib_unix_poll_openbsd_srcs) $(testlib_rt) $(testlib_rt_$(PLATFORM)) $(testlib_errors_$(PLATFORM)) $(testlib_time_$(PLATFORM)) $(testlib_io_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/unix/poll
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nunix::poll \
		-t$(TESTCACHE)/unix/poll/unix_poll.td $(testlib_unix_poll_openbsd_srcs)

# unix::resolvconf (+linux)
testlib_unix_resolvconf_linux_srcs = \
	$(STDLIB)/unix/resolvconf/+linux.ha \
	$(STDLIB)/unix/resolvconf/load.ha

$(TESTCACHE)/unix/resolvconf/unix_resolvconf-linux.ssa: $(testlib_unix_resolvconf_linux_srcs) $(testlib_rt) $(testlib_os_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_net_ip_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/unix/resolvconf
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nunix::resolvconf \
		-t$(TESTCACHE)/unix/resolvconf/unix_resolvconf.td $(testlib_unix_resolvconf_linux_srcs)

# unix::resolvconf (+freebsd)
testlib_unix_resolvconf_freebsd_srcs = \
	$(STDLIB)/unix/resolvconf/+freebsd.ha \
	$(STDLIB)/unix/resolvconf/load.ha

$(TESTCACHE)/unix/resolvconf/unix_resolvconf-freebsd.ssa: $(testlib_unix_resolvconf_freebsd_srcs) $(testlib_rt) $(testlib_os_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_net_ip_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/unix/resolvconf
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nunix::resolvconf \
		-t$(TESTCACHE)/unix/resolvconf/unix_resolvconf.td $(testlib_unix_resolvconf_freebsd_srcs)

# unix::resolvconf (+openbsd)
testlib_unix_resolvconf_openbsd_srcs = \
	$(STDLIB)/unix/resolvconf/+openbsd.ha \
	$(STDLIB)/unix/resolvconf/load.ha

$(TESTCACHE)/unix/resolvconf/unix_resolvconf-openbsd.ssa: $(testlib_unix_resolvconf_openbsd_srcs) $(testlib_rt) $(testlib_os_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_net_ip_$(PLATFORM)) $(testlib_strings_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/unix/resolvconf
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nunix::resolvconf \
		-t$(TESTCACHE)/unix/resolvconf/unix_resolvconf.td $(testlib_unix_resolvconf_openbsd_srcs)

# unix::signal (+linux)
testlib_unix_signal_linux_srcs = \
	$(STDLIB)/unix/signal/types.ha \
	$(STDLIB)/unix/signal/+linux.ha

$(TESTCACHE)/unix/signal/unix_signal-linux.ssa: $(testlib_unix_signal_linux_srcs) $(testlib_rt) $(testlib_io_$(PLATFORM)) $(testlib_errors_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/unix/signal
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nunix::signal \
		-t$(TESTCACHE)/unix/signal/unix_signal.td $(testlib_unix_signal_linux_srcs)

# unix::tty (+linux)
testlib_unix_tty_linux_srcs = \
	$(STDLIB)/unix/tty/types.ha \
	$(STDLIB)/unix/tty/+linux/isatty.ha \
	$(STDLIB)/unix/tty/+linux/open.ha \
	$(STDLIB)/unix/tty/+linux/termios.ha \
	$(STDLIB)/unix/tty/+linux/winsize.ha

$(TESTCACHE)/unix/tty/unix_tty-linux.ssa: $(testlib_unix_tty_linux_srcs) $(testlib_rt) $(testlib_rt_$(PLATFORM)) $(testlib_fs_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/unix/tty
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nunix::tty \
		-t$(TESTCACHE)/unix/tty/unix_tty.td $(testlib_unix_tty_linux_srcs)

# unix::tty (+freebsd)
testlib_unix_tty_freebsd_srcs = \
	$(STDLIB)/unix/tty/types.ha \
	$(STDLIB)/unix/tty/+freebsd/isatty.ha \
	$(STDLIB)/unix/tty/+freebsd/open.ha \
	$(STDLIB)/unix/tty/+freebsd/winsize.ha

$(TESTCACHE)/unix/tty/unix_tty-freebsd.ssa: $(testlib_unix_tty_freebsd_srcs) $(testlib_rt) $(testlib_rt_$(PLATFORM)) $(testlib_fs_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/unix/tty
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nunix::tty \
		-t$(TESTCACHE)/unix/tty/unix_tty.td $(testlib_unix_tty_freebsd_srcs)

# unix::tty (+openbsd)
testlib_unix_tty_openbsd_srcs = \
	$(STDLIB)/unix/tty/types.ha \
	$(STDLIB)/unix/tty/+openbsd/isatty.ha \
	$(STDLIB)/unix/tty/+openbsd/open.ha \
	$(STDLIB)/unix/tty/+openbsd/winsize.ha

$(TESTCACHE)/unix/tty/unix_tty-openbsd.ssa: $(testlib_unix_tty_openbsd_srcs) $(testlib_rt) $(testlib_rt_$(PLATFORM)) $(testlib_fs_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_os_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/unix/tty
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nunix::tty \
		-t$(TESTCACHE)/unix/tty/unix_tty.td $(testlib_unix_tty_openbsd_srcs)

# uuid (+any)
testlib_uuid_any_srcs = \
	$(STDLIB)/uuid/uuid.ha

$(TESTCACHE)/uuid/uuid-any.ssa: $(testlib_uuid_any_srcs) $(testlib_rt) $(testlib_crypto_random_$(PLATFORM)) $(testlib_strio_$(PLATFORM)) $(testlib_fmt_$(PLATFORM)) $(testlib_endian_$(PLATFORM)) $(testlib_io_$(PLATFORM)) $(testlib_bytes_$(PLATFORM)) $(testlib_bufio_$(PLATFORM)) $(testlib_strings_$(PLATFORM)) $(testlib_strconv_$(PLATFORM))
	@printf 'HAREC \t$@\n'
	@mkdir -p $(TESTCACHE)/uuid
	@HARECACHE=$(TESTCACHE) $(HAREC) $(TESTHAREFLAGS) -o $@ -Nuuid \
		-t$(TESTCACHE)/uuid/uuid.td $(testlib_uuid_any_srcs)

